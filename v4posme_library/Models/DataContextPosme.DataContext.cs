//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2025-10-19 11:13:48
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using MySql.EntityFrameworkCore.Extensions;

namespace v4posme_library.Models
{

    public partial class DataContext : DbContext
    {

        public DataContext() :
            base()
        {
            OnCreated();
        }

        public DataContext(DbContextOptions<DataContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseMySQL(GetConnectionString("PosmeConnectionString"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<TbAccount> TbAccounts
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountingBalance> TbAccountingBalances
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountingBalanceTemp> TbAccountingBalanceTemps
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountingCycle> TbAccountingCycles
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountingPeriod> TbAccountingPeriods
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountLevel> TbAccountLevels
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountTmp> TbAccountTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountType> TbAccountTypes
        {
            get;
            set;
        }

        public virtual DbSet<TbBank> TbBanks
        {
            get;
            set;
        }

        public virtual DbSet<TbBankCheque> TbBankCheques
        {
            get;
            set;
        }

        public virtual DbSet<TbBiblia> TbBiblias
        {
            get;
            set;
        }

        public virtual DbSet<TbBranch> TbBranches
        {
            get;
            set;
        }

        public virtual DbSet<TbCaller> TbCallers
        {
            get;
            set;
        }

        public virtual DbSet<TbCashBox> TbCashBoxes
        {
            get;
            set;
        }

        public virtual DbSet<TbCashBoxSession> TbCashBoxSessions
        {
            get;
            set;
        }

        public virtual DbSet<TbCashBoxSessionTransactionMaster> TbCashBoxSessionTransactionMasters
        {
            get;
            set;
        }

        public virtual DbSet<TbCashBoxUser> TbCashBoxUsers
        {
            get;
            set;
        }

        public virtual DbSet<TbCatalog> TbCatalogs
        {
            get;
            set;
        }

        public virtual DbSet<TbCatalogItem> TbCatalogItems
        {
            get;
            set;
        }

        public virtual DbSet<TbCatalogItemConvertion> TbCatalogItemConvertions
        {
            get;
            set;
        }

        public virtual DbSet<TbCenterCost> TbCenterCosts
        {
            get;
            set;
        }

        public virtual DbSet<TbCompany> TbCompanies
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyComponent> TbCompanyComponents
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyComponentConcept> TbCompanyComponentConcepts
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyComponentFlavor> TbCompanyComponentFlavors
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyComponentItemDataview> TbCompanyComponentItemDataviews
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyCurrency> TbCompanyCurrencies
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyDataview> TbCompanyDataviews
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyDefaultDataview> TbCompanyDefaultDataviews
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyParameter> TbCompanyParameters
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanySubelementAudit> TbCompanySubelementAudits
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanySubelementObligatory> TbCompanySubelementObligatories
        {
            get;
            set;
        }

        public virtual DbSet<TbComponent> TbComponents
        {
            get;
            set;
        }

        public virtual DbSet<TbComponentAudit> TbComponentAudits
        {
            get;
            set;
        }

        public virtual DbSet<TbComponentAuditDetail> TbComponentAuditDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbComponentAutorization> TbComponentAutorizations
        {
            get;
            set;
        }

        public virtual DbSet<TbComponentAutorizationDetail> TbComponentAutorizationDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbComponentElement> TbComponentElements
        {
            get;
            set;
        }

        public virtual DbSet<TbCounter> TbCounters
        {
            get;
            set;
        }

        public virtual DbSet<TbCreditLine> TbCreditLines
        {
            get;
            set;
        }

        public virtual DbSet<TbCurrency> TbCurrencies
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomer> TbCustomers
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerConsultasSinRiesgo> TbCustomerConsultasSinRiesgos
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCredit> TbCustomerCredits
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditAmoritization> TbCustomerCreditAmoritizations
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditClasification> TbCustomerCreditClasifications
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditDocument> TbCustomerCreditDocuments
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditDocumentEntityRelated> TbCustomerCreditDocumentEntityRelateds
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditExternalSharon> TbCustomerCreditExternalSharons
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditExternalSharonTmp> TbCustomerCreditExternalSharonTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditLine> TbCustomerCreditLines
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerFrecuencyActuation> TbCustomerFrecuencyActuations
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerPaymentMethod> TbCustomerPaymentMethods
        {
            get;
            set;
        }

        public virtual DbSet<TbDataview> TbDataviews
        {
            get;
            set;
        }

        public virtual DbSet<TbElement> TbElements
        {
            get;
            set;
        }

        public virtual DbSet<TbElementType> TbElementTypes
        {
            get;
            set;
        }

        public virtual DbSet<TbEmployee> TbEmployees
        {
            get;
            set;
        }

        public virtual DbSet<TbEmployeeCalendarPay> TbEmployeeCalendarPays
        {
            get;
            set;
        }

        public virtual DbSet<TbEmployeeCalendarPayDetail> TbEmployeeCalendarPayDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbEntity> TbEntities
        {
            get;
            set;
        }

        public virtual DbSet<TbEntityAccount> TbEntityAccounts
        {
            get;
            set;
        }

        public virtual DbSet<TbEntityEmail> TbEntityEmails
        {
            get;
            set;
        }

        public virtual DbSet<TbEntityLocation> TbEntityLocations
        {
            get;
            set;
        }

        public virtual DbSet<TbEntityPhone> TbEntityPhones
        {
            get;
            set;
        }

        public virtual DbSet<TbError> TbErrors
        {
            get;
            set;
        }

        public virtual DbSet<TbEstadisticaCategoria> TbEstadisticaCategorias
        {
            get;
            set;
        }

        public virtual DbSet<TbEstadisticaClase> TbEstadisticaClases
        {
            get;
            set;
        }

        public virtual DbSet<TbExchangeRate> TbExchangeRates
        {
            get;
            set;
        }

        public virtual DbSet<TbFixedAssent> TbFixedAssents
        {
            get;
            set;
        }

        public virtual DbSet<TbIndicator> TbIndicators
        {
            get;
            set;
        }

        public virtual DbSet<TbIndicatorHistory> TbIndicatorHistories
        {
            get;
            set;
        }

        public virtual DbSet<TbIndicatorTmp> TbIndicatorTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbItem> TbItems
        {
            get;
            set;
        }

        public virtual DbSet<TbItemCategory> TbItemCategories
        {
            get;
            set;
        }

        public virtual DbSet<TbItemConfigLoto> TbItemConfigLotos
        {
            get;
            set;
        }

        public virtual DbSet<TbItemDataSheet> TbItemDataSheets
        {
            get;
            set;
        }

        public virtual DbSet<TbItemDataSheetDetail> TbItemDataSheetDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbItemImport> TbItemImports
        {
            get;
            set;
        }

        public virtual DbSet<TbItemSku> TbItemSkus
        {
            get;
            set;
        }

        public virtual DbSet<TbItemWarehouse> TbItemWarehouses
        {
            get;
            set;
        }

        public virtual DbSet<TbItemWarehouseExpired> TbItemWarehouseExpireds
        {
            get;
            set;
        }

        public virtual DbSet<TbJournalEntry> TbJournalEntries
        {
            get;
            set;
        }

        public virtual DbSet<TbJournalEntryDetail> TbJournalEntryDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbJournalEntryDetailSummary> TbJournalEntryDetailSummaries
        {
            get;
            set;
        }

        public virtual DbSet<TbKardex> TbKardexes
        {
            get;
            set;
        }

        public virtual DbSet<TbLegal> TbLegals
        {
            get;
            set;
        }

        public virtual DbSet<TbListPrice> TbListPrices
        {
            get;
            set;
        }

        public virtual DbSet<TbLog> TbLogs
        {
            get;
            set;
        }

        public virtual DbSet<TbLogMesseger> TbLogMessegers
        {
            get;
            set;
        }

        public virtual DbSet<TbLogSession> TbLogSessions
        {
            get;
            set;
        }

        public virtual DbSet<TbMasterKardexTemp> TbMasterKardexTemps
        {
            get;
            set;
        }

        public virtual DbSet<TbMembership> TbMemberships
        {
            get;
            set;
        }

        public virtual DbSet<TbMenuElement> TbMenuElements
        {
            get;
            set;
        }

        public virtual DbSet<TbNaturale> TbNaturales
        {
            get;
            set;
        }

        public virtual DbSet<TbNotification> TbNotifications
        {
            get;
            set;
        }

        public virtual DbSet<TbParameter> TbParameters
        {
            get;
            set;
        }

        public virtual DbSet<TbPrice> TbPrices
        {
            get;
            set;
        }

        public virtual DbSet<TbProvider> TbProviders
        {
            get;
            set;
        }

        public virtual DbSet<TbProviderItem> TbProviderItems
        {
            get;
            set;
        }

        public virtual DbSet<TbPublicCatalog> TbPublicCatalogs
        {
            get;
            set;
        }

        public virtual DbSet<TbPublicCatalogDetail> TbPublicCatalogDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbRazonesFinancierasTmp> TbRazonesFinancierasTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbRelationship> TbRelationships
        {
            get;
            set;
        }

        public virtual DbSet<TbRemember> TbRemembers
        {
            get;
            set;
        }

        public virtual DbSet<TbRole> TbRoles
        {
            get;
            set;
        }

        public virtual DbSet<TbRoleAutorization> TbRoleAutorizations
        {
            get;
            set;
        }

        public virtual DbSet<TbSubelement> TbSubelements
        {
            get;
            set;
        }

        public virtual DbSet<TbTag> TbTags
        {
            get;
            set;
        }

        public virtual DbSet<TbTransaction> TbTransactions
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionCausal> TbTransactionCausals
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionConcept> TbTransactionConcepts
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMaster> TbTransactionMasters
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterConcept> TbTransactionMasterConcepts
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterDenomination> TbTransactionMasterDenominations
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterDetail> TbTransactionMasterDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterDetailCredit> TbTransactionMasterDetailCredits
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterDetailReference> TbTransactionMasterDetailReferences
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterDetailTemp> TbTransactionMasterDetailTemps
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterInfo> TbTransactionMasterInfos
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterPurchase> TbTransactionMasterPurchases
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterReference> TbTransactionMasterReferences
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterSummaryConceptTmp> TbTransactionMasterSummaryConceptTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionProfileDetail> TbTransactionProfileDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionProfileDetailTmp> TbTransactionProfileDetailTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbTypeMenuElement> TbTypeMenuElements
        {
            get;
            set;
        }

        public virtual DbSet<TbUser> TbUsers
        {
            get;
            set;
        }

        public virtual DbSet<TbUserPermission> TbUserPermissions
        {
            get;
            set;
        }

        public virtual DbSet<TbUserTag> TbUserTags
        {
            get;
            set;
        }

        public virtual DbSet<TbUserWarehouse> TbUserWarehouses
        {
            get;
            set;
        }

        public virtual DbSet<TbWarehouse> TbWarehouses
        {
            get;
            set;
        }

        public virtual DbSet<TbWorkflow> TbWorkflows
        {
            get;
            set;
        }

        public virtual DbSet<TbWorkflowStage> TbWorkflowStages
        {
            get;
            set;
        }

        public virtual DbSet<TbWorkflowStageAffect> TbWorkflowStageAffects
        {
            get;
            set;
        }

        public virtual DbSet<TbWorkflowStageChangeLog> TbWorkflowStageChangeLogs
        {
            get;
            set;
        }

        public virtual DbSet<TbWorkflowStageRelation> TbWorkflowStageRelations
        {
            get;
            set;
        }

        public virtual DbSet<VwContabilidadComprobante> VwContabilidadComprobantes
        {
            get;
            set;
        }

        public virtual DbSet<VwCxcCustomerListRealEstate> VwCxcCustomerListRealEstates
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaBalance> VwGerenciaBalances
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaCustomer> VwGerenciaCustomers
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaDesembolsosDetalle> VwGerenciaDesembolsosDetalles
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaDesembolsosResuman> VwGerenciaDesembolsosResumen
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaEstadoResultado001> VwGerenciaEstadoResultado001s
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaEstadoResultado002> VwGerenciaEstadoResultado002s
        {
            get;
            set;
        }

        public virtual DbSet<VwInventoryListItemRealEstate> VwInventoryListItemRealEstates
        {
            get;
            set;
        }

        public virtual DbSet<VwSalesInventory> VwSalesInventories
        {
            get;
            set;
        }

        public virtual DbSet<VwSinRiesgoReporteCliente> VwSinRiesgoReporteClientes
        {
            get;
            set;
        }

        public virtual DbSet<VwSinRiesgoReporteCredito> VwSinRiesgoReporteCreditos
        {
            get;
            set;
        }

        public virtual DbSet<VwSinRiesgoReporteCreditosToSystema> VwSinRiesgoReporteCreditosToSystemas
        {
            get;
            set;
        }

        public virtual DbSet<VwTransaccionMasterConcept232425> VwTransaccionMasterConcept232425s
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyComponentRelation> TbCompanyComponentRelations
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyPageSetting> TbCompanyPageSettings
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyPageSettingLarge> TbCompanyPageSettingLarges
        {
            get;
            set;
        }

        public virtual DbSet<TbReporting> TbReportings
        {
            get;
            set;
        }

        public virtual DbSet<TbReportingParameter> TbReportingParameters
        {
            get;
            set;
        }

        public virtual DbSet<TbReportingResult> TbReportingResults
        {
            get;
            set;
        }

        #region Methods

        /// <summary>
        /// Procedimiento para obtener el tb_catalog de Cuenta de un Ciclo y sus Saldo
        /// </summary>
        public List<PrAccountingAccountBalanceResult> PrAccountingAccountBalance (int? prCompanyID, int? prPeriodID, int? prCycleID)
        {

            List<PrAccountingAccountBalanceResult> result = new List<PrAccountingAccountBalanceResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_account_balance";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrAccountingAccountBalanceResult row = new PrAccountingAccountBalanceResult();
                            if (fieldNames.Contains("companyID") && !reader.IsDBNull(reader.GetOrdinal(@"companyID")))
                                row.CompanyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"companyID")), typeof(int));

                            if (fieldNames.Contains("accountID") && !reader.IsDBNull(reader.GetOrdinal(@"accountID")))
                                row.AccountID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountID")), typeof(int));

                            if (fieldNames.Contains("parentAccountID") && !reader.IsDBNull(reader.GetOrdinal(@"parentAccountID")))
                                row.ParentAccountID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parentAccountID")), typeof(int));
                            else
                                row.ParentAccountID = null;

                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));

                            if (fieldNames.Contains("name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));

                            if (fieldNames.Contains("isOperative") && !reader.IsDBNull(reader.GetOrdinal(@"isOperative")))
                                row.IsOperative = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isOperative")), typeof(bool));

                            if (fieldNames.Contains("statusID") && !reader.IsDBNull(reader.GetOrdinal(@"statusID")))
                                row.StatusID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusID")), typeof(int));

                            if (fieldNames.Contains("accountTypeID") && !reader.IsDBNull(reader.GetOrdinal(@"accountTypeID")))
                                row.AccountTypeID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountTypeID")), typeof(int));

                            if (fieldNames.Contains("naturaleza") && !reader.IsDBNull(reader.GetOrdinal(@"naturaleza")))
                                row.Naturaleza = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"naturaleza")), typeof(string));

                            if (fieldNames.Contains("balanceStart") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStart")))
                                row.BalanceStart = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStart")), typeof(decimal));
                            else
                                row.BalanceStart = null;

                            if (fieldNames.Contains("debit") && !reader.IsDBNull(reader.GetOrdinal(@"debit")))
                                row.Debit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"debit")), typeof(decimal));

                            if (fieldNames.Contains("credit") && !reader.IsDBNull(reader.GetOrdinal(@"credit")))
                                row.Credit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"credit")), typeof(decimal));

                            if (fieldNames.Contains("balanceEnd") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEnd")))
                                row.BalanceEnd = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEnd")), typeof(decimal));
                            else
                                row.BalanceEnd = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener el tb_catalog de Cuenta de un Ciclo y sus Saldo
        /// </summary>
        public async Task<List<PrAccountingAccountBalanceResult>> PrAccountingAccountBalanceAsync (int? prCompanyID, int? prPeriodID, int? prCycleID)
        {

            List<PrAccountingAccountBalanceResult> result = new List<PrAccountingAccountBalanceResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_account_balance";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrAccountingAccountBalanceResult row = new PrAccountingAccountBalanceResult();
                            if (fieldNames.Contains("companyID") && !reader.IsDBNull(reader.GetOrdinal(@"companyID")))
                                row.CompanyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"companyID")), typeof(int));

                            if (fieldNames.Contains("accountID") && !reader.IsDBNull(reader.GetOrdinal(@"accountID")))
                                row.AccountID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountID")), typeof(int));

                            if (fieldNames.Contains("parentAccountID") && !reader.IsDBNull(reader.GetOrdinal(@"parentAccountID")))
                                row.ParentAccountID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parentAccountID")), typeof(int));
                            else
                                row.ParentAccountID = null;

                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));

                            if (fieldNames.Contains("name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));

                            if (fieldNames.Contains("isOperative") && !reader.IsDBNull(reader.GetOrdinal(@"isOperative")))
                                row.IsOperative = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isOperative")), typeof(bool));

                            if (fieldNames.Contains("statusID") && !reader.IsDBNull(reader.GetOrdinal(@"statusID")))
                                row.StatusID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusID")), typeof(int));

                            if (fieldNames.Contains("accountTypeID") && !reader.IsDBNull(reader.GetOrdinal(@"accountTypeID")))
                                row.AccountTypeID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountTypeID")), typeof(int));

                            if (fieldNames.Contains("naturaleza") && !reader.IsDBNull(reader.GetOrdinal(@"naturaleza")))
                                row.Naturaleza = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"naturaleza")), typeof(string));

                            if (fieldNames.Contains("balanceStart") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStart")))
                                row.BalanceStart = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStart")), typeof(decimal));
                            else
                                row.BalanceStart = null;

                            if (fieldNames.Contains("debit") && !reader.IsDBNull(reader.GetOrdinal(@"debit")))
                                row.Debit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"debit")), typeof(decimal));

                            if (fieldNames.Contains("credit") && !reader.IsDBNull(reader.GetOrdinal(@"credit")))
                                row.Credit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"credit")), typeof(decimal));

                            if (fieldNames.Contains("balanceEnd") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEnd")))
                                row.BalanceEnd = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEnd")), typeof(decimal));
                            else
                                row.BalanceEnd = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para Calcular Utilidades del Ciclo
        /// </summary>
        public void PrAccountingCalculateUtility (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID, out decimal? prUtility)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_calculate_utility";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prUtilityParameter = cmd.CreateParameter();
                    prUtilityParameter.ParameterName = "prUtility";
                    prUtilityParameter.Direction = ParameterDirection.Output;
                    prUtilityParameter.DbType = DbType.Decimal;
                    prUtilityParameter.Precision = 18;
                    prUtilityParameter.Scale = 8;
                    prUtilityParameter.Size = -1;
                    prUtilityParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prUtilityParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prUtility"].Value != null && !(cmd.Parameters["prUtility"].Value is System.DBNull))
                        prUtility = (decimal)Convert.ChangeType(cmd.Parameters["prUtility"].Value, typeof(decimal));
                    else
                        prUtility = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Calcular Utilidades del Ciclo
        /// </summary>
        public async Task<Tuple<decimal?>> PrAccountingCalculateUtilityAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID)
        {

            decimal? prUtility;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_calculate_utility";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prUtilityParameter = cmd.CreateParameter();
                    prUtilityParameter.ParameterName = "prUtility";
                    prUtilityParameter.Direction = ParameterDirection.Output;
                    prUtilityParameter.DbType = DbType.Decimal;
                    prUtilityParameter.Precision = 18;
                    prUtilityParameter.Scale = 8;
                    prUtilityParameter.Size = -1;
                    prUtilityParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prUtilityParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prUtility"].Value != null && !(cmd.Parameters["prUtility"].Value is System.DBNull))
                        prUtility = (decimal)Convert.ChangeType(cmd.Parameters["prUtility"].Value, typeof(decimal));
                    else
                        prUtility = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<decimal?>(prUtility);
        }

        /// <summary>
        /// Procedimiento para saber si se puede eliminar una cuenta contable
        /// </summary>
        public void PrAccountingCheckaccountToDelete (int? prCompanyID, int? prBranchID, int? prLoginID, int? prAccountID, string prApp, out string prResultMessage, out int? prResultCode)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_checkaccount_to_delete";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prAppParameter = cmd.CreateParameter();
                    prAppParameter.ParameterName = "prApp";
                    prAppParameter.Direction = ParameterDirection.Input;
                    prAppParameter.DbType = DbType.String;
                    prAppParameter.Size = 50;
                    if (prApp != null)
                    {
                        prAppParameter.Value = prApp;
                    }
                    else
                    {
                        prAppParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAppParameter);

                    DbParameter prResultMessageParameter = cmd.CreateParameter();
                    prResultMessageParameter.ParameterName = "prResultMessage";
                    prResultMessageParameter.Direction = ParameterDirection.Output;
                    prResultMessageParameter.DbType = DbType.String;
                    prResultMessageParameter.Size = 300;
                    prResultMessageParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultMessageParameter);

                    DbParameter prResultCodeParameter = cmd.CreateParameter();
                    prResultCodeParameter.ParameterName = "prResultCode";
                    prResultCodeParameter.Direction = ParameterDirection.Output;
                    prResultCodeParameter.DbType = DbType.Int32;
                    prResultCodeParameter.Precision = 10;
                    prResultCodeParameter.Scale = 0;
                    prResultCodeParameter.Size = -1;
                    prResultCodeParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultCodeParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResultMessage"].Value != null && !(cmd.Parameters["prResultMessage"].Value is System.DBNull))
                        prResultMessage = (string)Convert.ChangeType(cmd.Parameters["prResultMessage"].Value, typeof(string));
                    else
                        prResultMessage = default(string);

                    if (cmd.Parameters["prResultCode"].Value != null && !(cmd.Parameters["prResultCode"].Value is System.DBNull))
                        prResultCode = (int)Convert.ChangeType(cmd.Parameters["prResultCode"].Value, typeof(int));
                    else
                        prResultCode = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para saber si se puede eliminar una cuenta contable
        /// </summary>
        public async Task<Tuple<string, int?>> PrAccountingCheckaccountToDeleteAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prAccountID, string prApp)
        {

            string prResultMessage;
            int? prResultCode;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_checkaccount_to_delete";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prAppParameter = cmd.CreateParameter();
                    prAppParameter.ParameterName = "prApp";
                    prAppParameter.Direction = ParameterDirection.Input;
                    prAppParameter.DbType = DbType.String;
                    prAppParameter.Size = 50;
                    if (prApp != null)
                    {
                        prAppParameter.Value = prApp;
                    }
                    else
                    {
                        prAppParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAppParameter);

                    DbParameter prResultMessageParameter = cmd.CreateParameter();
                    prResultMessageParameter.ParameterName = "prResultMessage";
                    prResultMessageParameter.Direction = ParameterDirection.Output;
                    prResultMessageParameter.DbType = DbType.String;
                    prResultMessageParameter.Size = 300;
                    prResultMessageParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultMessageParameter);

                    DbParameter prResultCodeParameter = cmd.CreateParameter();
                    prResultCodeParameter.ParameterName = "prResultCode";
                    prResultCodeParameter.Direction = ParameterDirection.Output;
                    prResultCodeParameter.DbType = DbType.Int32;
                    prResultCodeParameter.Precision = 10;
                    prResultCodeParameter.Scale = 0;
                    prResultCodeParameter.Size = -1;
                    prResultCodeParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultCodeParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResultMessage"].Value != null && !(cmd.Parameters["prResultMessage"].Value is System.DBNull))
                        prResultMessage = (string)Convert.ChangeType(cmd.Parameters["prResultMessage"].Value, typeof(string));
                    else
                        prResultMessage = default(string);

                    if (cmd.Parameters["prResultCode"].Value != null && !(cmd.Parameters["prResultCode"].Value is System.DBNull))
                        prResultCode = (int)Convert.ChangeType(cmd.Parameters["prResultCode"].Value, typeof(int));
                    else
                        prResultCode = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<string, int?>(prResultMessage, prResultCode);
        }

        /// <summary>
        /// Procedimiento para Cerrar un Ciclo Contable
        /// </summary>
        public void PrAccountingClosedCycle (int? prCompanyID, int? prBranchID, int? prLoginID, string prCreatedIn, string prTocken, int? prPeriodID, int? prCycleID, out int? prCodeError, out string prMessageResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_closed_cycle";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prCreatedInParameter = cmd.CreateParameter();
                    prCreatedInParameter.ParameterName = "prCreatedIn";
                    prCreatedInParameter.Direction = ParameterDirection.Input;
                    prCreatedInParameter.DbType = DbType.String;
                    prCreatedInParameter.Size = 50;
                    if (prCreatedIn != null)
                    {
                        prCreatedInParameter.Value = prCreatedIn;
                    }
                    else
                    {
                        prCreatedInParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreatedInParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prCodeErrorParameter = cmd.CreateParameter();
                    prCodeErrorParameter.ParameterName = "prCodeError";
                    prCodeErrorParameter.Direction = ParameterDirection.Output;
                    prCodeErrorParameter.DbType = DbType.Int32;
                    prCodeErrorParameter.Precision = 10;
                    prCodeErrorParameter.Scale = 0;
                    prCodeErrorParameter.Size = -1;
                    prCodeErrorParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prCodeErrorParameter);

                    DbParameter prMessageResultParameter = cmd.CreateParameter();
                    prMessageResultParameter.ParameterName = "prMessageResult";
                    prMessageResultParameter.Direction = ParameterDirection.Output;
                    prMessageResultParameter.DbType = DbType.String;
                    prMessageResultParameter.Size = 250;
                    prMessageResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prMessageResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prCodeError"].Value != null && !(cmd.Parameters["prCodeError"].Value is System.DBNull))
                        prCodeError = (int)Convert.ChangeType(cmd.Parameters["prCodeError"].Value, typeof(int));
                    else
                        prCodeError = default(int);

                    if (cmd.Parameters["prMessageResult"].Value != null && !(cmd.Parameters["prMessageResult"].Value is System.DBNull))
                        prMessageResult = (string)Convert.ChangeType(cmd.Parameters["prMessageResult"].Value, typeof(string));
                    else
                        prMessageResult = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Cerrar un Ciclo Contable
        /// </summary>
        public async Task<Tuple<int?, string>> PrAccountingClosedCycleAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prCreatedIn, string prTocken, int? prPeriodID, int? prCycleID)
        {

            int? prCodeError;
            string prMessageResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_closed_cycle";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prCreatedInParameter = cmd.CreateParameter();
                    prCreatedInParameter.ParameterName = "prCreatedIn";
                    prCreatedInParameter.Direction = ParameterDirection.Input;
                    prCreatedInParameter.DbType = DbType.String;
                    prCreatedInParameter.Size = 50;
                    if (prCreatedIn != null)
                    {
                        prCreatedInParameter.Value = prCreatedIn;
                    }
                    else
                    {
                        prCreatedInParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreatedInParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prCodeErrorParameter = cmd.CreateParameter();
                    prCodeErrorParameter.ParameterName = "prCodeError";
                    prCodeErrorParameter.Direction = ParameterDirection.Output;
                    prCodeErrorParameter.DbType = DbType.Int32;
                    prCodeErrorParameter.Precision = 10;
                    prCodeErrorParameter.Scale = 0;
                    prCodeErrorParameter.Size = -1;
                    prCodeErrorParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prCodeErrorParameter);

                    DbParameter prMessageResultParameter = cmd.CreateParameter();
                    prMessageResultParameter.ParameterName = "prMessageResult";
                    prMessageResultParameter.Direction = ParameterDirection.Output;
                    prMessageResultParameter.DbType = DbType.String;
                    prMessageResultParameter.Size = 250;
                    prMessageResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prMessageResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prCodeError"].Value != null && !(cmd.Parameters["prCodeError"].Value is System.DBNull))
                        prCodeError = (int)Convert.ChangeType(cmd.Parameters["prCodeError"].Value, typeof(int));
                    else
                        prCodeError = default(int);

                    if (cmd.Parameters["prMessageResult"].Value != null && !(cmd.Parameters["prMessageResult"].Value is System.DBNull))
                        prMessageResult = (string)Convert.ChangeType(cmd.Parameters["prMessageResult"].Value, typeof(string));
                    else
                        prMessageResult = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?, string>(prCodeError, prMessageResult);
        }

        /// <summary>
        /// procedimiento para el calculo de razones financieras
        /// </summary>
        public void PrAccountingFinancialReason (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID, int? prMonthOnly, string prParameterName, out decimal? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_financial_reason";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 50;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prMonthOnlyParameter = cmd.CreateParameter();
                    prMonthOnlyParameter.ParameterName = "prMonthOnly";
                    prMonthOnlyParameter.Direction = ParameterDirection.Input;
                    prMonthOnlyParameter.DbType = DbType.Int32;
                    prMonthOnlyParameter.Precision = 10;
                    prMonthOnlyParameter.Scale = 0;
                    if (prMonthOnly.HasValue)
                    {
                        prMonthOnlyParameter.Value = prMonthOnly.Value;
                    }
                    else
                    {
                        prMonthOnlyParameter.Size = -1;
                        prMonthOnlyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prMonthOnlyParameter);

                    DbParameter prParameterNameParameter = cmd.CreateParameter();
                    prParameterNameParameter.ParameterName = "prParameterName";
                    prParameterNameParameter.Direction = ParameterDirection.Input;
                    prParameterNameParameter.DbType = DbType.String;
                    prParameterNameParameter.Size = 50;
                    if (prParameterName != null)
                    {
                        prParameterNameParameter.Value = prParameterName;
                    }
                    else
                    {
                        prParameterNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prParameterNameParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Decimal;
                    prResultParameter.Precision = 18;
                    prResultParameter.Scale = 5;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (decimal)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(decimal));
                    else
                        prResult = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// procedimiento para el calculo de razones financieras
        /// </summary>
        public async Task<Tuple<decimal?>> PrAccountingFinancialReasonAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID, int? prMonthOnly, string prParameterName)
        {

            decimal? prResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_financial_reason";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 50;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prMonthOnlyParameter = cmd.CreateParameter();
                    prMonthOnlyParameter.ParameterName = "prMonthOnly";
                    prMonthOnlyParameter.Direction = ParameterDirection.Input;
                    prMonthOnlyParameter.DbType = DbType.Int32;
                    prMonthOnlyParameter.Precision = 10;
                    prMonthOnlyParameter.Scale = 0;
                    if (prMonthOnly.HasValue)
                    {
                        prMonthOnlyParameter.Value = prMonthOnly.Value;
                    }
                    else
                    {
                        prMonthOnlyParameter.Size = -1;
                        prMonthOnlyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prMonthOnlyParameter);

                    DbParameter prParameterNameParameter = cmd.CreateParameter();
                    prParameterNameParameter.ParameterName = "prParameterName";
                    prParameterNameParameter.Direction = ParameterDirection.Input;
                    prParameterNameParameter.DbType = DbType.String;
                    prParameterNameParameter.Size = 50;
                    if (prParameterName != null)
                    {
                        prParameterNameParameter.Value = prParameterName;
                    }
                    else
                    {
                        prParameterNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prParameterNameParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Decimal;
                    prResultParameter.Precision = 18;
                    prResultParameter.Scale = 5;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (decimal)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(decimal));
                    else
                        prResult = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<decimal?>(prResult);
        }

        public void PrAccountingGetHistoryBalanceByAccount (int? prCompanyID, int? prAccountID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_history_balance_by_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrAccountingGetHistoryBalanceByAccountAsync (int? prCompanyID, int? prAccountID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_history_balance_by_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener los movimientos por cuenta
        /// </summary>
        public PrAccountingGetReportAuxiliarAccountMultipleResult PrAccountingGetReportAuxiliarAccount (int? prCompanyID, int? prPeriodID, int? prCycleIDStart, int? prCycleIDEnd, int? prAccountID)
        {

            PrAccountingGetReportAuxiliarAccountMultipleResult result = new PrAccountingGetReportAuxiliarAccountMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_auxiliar_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDStartParameter = cmd.CreateParameter();
                    prCycleIDStartParameter.ParameterName = "prCycleIDStart";
                    prCycleIDStartParameter.Direction = ParameterDirection.Input;
                    prCycleIDStartParameter.DbType = DbType.Int32;
                    prCycleIDStartParameter.Precision = 10;
                    prCycleIDStartParameter.Scale = 0;
                    if (prCycleIDStart.HasValue)
                    {
                        prCycleIDStartParameter.Value = prCycleIDStart.Value;
                    }
                    else
                    {
                        prCycleIDStartParameter.Size = -1;
                        prCycleIDStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDStartParameter);

                    DbParameter prCycleIDEndParameter = cmd.CreateParameter();
                    prCycleIDEndParameter.ParameterName = "prCycleIDEnd";
                    prCycleIDEndParameter.Direction = ParameterDirection.Input;
                    prCycleIDEndParameter.DbType = DbType.Int32;
                    prCycleIDEndParameter.Precision = 10;
                    prCycleIDEndParameter.Scale = 0;
                    if (prCycleIDEnd.HasValue)
                    {
                        prCycleIDEndParameter.Value = prCycleIDEnd.Value;
                    }
                    else
                    {
                        prCycleIDEndParameter.Size = -1;
                        prCycleIDEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDEndParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingGetReportAuxiliarAccountResult resultRow = new PrAccountingGetReportAuxiliarAccountResult();
                            if (fieldNames.Contains(@"accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                resultRow.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));
                            if (fieldNames.Contains(@"name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                resultRow.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));
                            if (fieldNames.Contains(@"description") && !reader.IsDBNull(reader.GetOrdinal(@"description")))
                                resultRow.Description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                resultRow.Description = null;
                            if (fieldNames.Contains(@"naturaleza") && !reader.IsDBNull(reader.GetOrdinal(@"naturaleza")))
                                resultRow.Naturaleza = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"naturaleza")), typeof(string));
                            if (fieldNames.Contains(@"isOperative") && !reader.IsDBNull(reader.GetOrdinal(@"isOperative")))
                                resultRow.IsOperative = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isOperative")), typeof(bool));
                            if (fieldNames.Contains(@"money") && !reader.IsDBNull(reader.GetOrdinal(@"money")))
                                resultRow.Money = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"money")), typeof(string));
                            result.PrAccountingGetReportAuxiliarAccountResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingGetReportAuxiliarAccountResult1 resultRow = new PrAccountingGetReportAuxiliarAccountResult1();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                resultRow.BalanceStart = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            else
                            if (fieldNames.Contains(@"balanceStart") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStart")))
                                resultRow.BalanceStart = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStart")), typeof(decimal));
                            else
                                resultRow.BalanceStart = null;
                            result.PrAccountingGetReportAuxiliarAccountResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingGetReportAuxiliarAccountResult2 resultRow = new PrAccountingGetReportAuxiliarAccountResult2();
                            if (fieldNames.Contains(@"journalNumber") && !reader.IsDBNull(reader.GetOrdinal(@"journalNumber")))
                                resultRow.JournalNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalNumber")), typeof(string));
                            if (fieldNames.Contains(@"note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                resultRow.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                resultRow.Note = null;
                            if (fieldNames.Contains(@"reference1") && !reader.IsDBNull(reader.GetOrdinal(@"reference1")))
                                resultRow.Reference1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference1")), typeof(string));
                            else
                                resultRow.Reference1 = null;
                            if (fieldNames.Contains(@"journalType") && !reader.IsDBNull(reader.GetOrdinal(@"journalType")))
                                resultRow.JournalType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalType")), typeof(string));
                            else
                                resultRow.JournalType = null;
                            if (fieldNames.Contains(@"journalDate") && !reader.IsDBNull(reader.GetOrdinal(@"journalDate")))
                                resultRow.JournalDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalDate")), typeof(System.DateTime));
                            if (fieldNames.Contains(@"debit") && !reader.IsDBNull(reader.GetOrdinal(@"debit")))
                                resultRow.Debit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"debit")), typeof(decimal));
                            if (fieldNames.Contains(@"credit") && !reader.IsDBNull(reader.GetOrdinal(@"credit")))
                                resultRow.Credit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"credit")), typeof(decimal));
                            result.PrAccountingGetReportAuxiliarAccountResult2s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingGetReportAuxiliarAccountResult3 resultRow = new PrAccountingGetReportAuxiliarAccountResult3();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                resultRow.BalanceEnd = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            else
                            if (fieldNames.Contains(@"balanceEnd") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEnd")))
                                resultRow.BalanceEnd = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEnd")), typeof(decimal));
                            else
                                resultRow.BalanceEnd = null;
                            result.PrAccountingGetReportAuxiliarAccountResult3s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para Obtener los movimientos por cuenta
        /// </summary>
        public async Task<PrAccountingGetReportAuxiliarAccountMultipleResult> PrAccountingGetReportAuxiliarAccountAsync (int? prCompanyID, int? prPeriodID, int? prCycleIDStart, int? prCycleIDEnd, int? prAccountID)
        {

            PrAccountingGetReportAuxiliarAccountMultipleResult result = new PrAccountingGetReportAuxiliarAccountMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_auxiliar_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDStartParameter = cmd.CreateParameter();
                    prCycleIDStartParameter.ParameterName = "prCycleIDStart";
                    prCycleIDStartParameter.Direction = ParameterDirection.Input;
                    prCycleIDStartParameter.DbType = DbType.Int32;
                    prCycleIDStartParameter.Precision = 10;
                    prCycleIDStartParameter.Scale = 0;
                    if (prCycleIDStart.HasValue)
                    {
                        prCycleIDStartParameter.Value = prCycleIDStart.Value;
                    }
                    else
                    {
                        prCycleIDStartParameter.Size = -1;
                        prCycleIDStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDStartParameter);

                    DbParameter prCycleIDEndParameter = cmd.CreateParameter();
                    prCycleIDEndParameter.ParameterName = "prCycleIDEnd";
                    prCycleIDEndParameter.Direction = ParameterDirection.Input;
                    prCycleIDEndParameter.DbType = DbType.Int32;
                    prCycleIDEndParameter.Precision = 10;
                    prCycleIDEndParameter.Scale = 0;
                    if (prCycleIDEnd.HasValue)
                    {
                        prCycleIDEndParameter.Value = prCycleIDEnd.Value;
                    }
                    else
                    {
                        prCycleIDEndParameter.Size = -1;
                        prCycleIDEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDEndParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingGetReportAuxiliarAccountResult resultRow = new PrAccountingGetReportAuxiliarAccountResult();
                            if (fieldNames.Contains(@"accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                resultRow.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));
                            if (fieldNames.Contains(@"name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                resultRow.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));
                            if (fieldNames.Contains(@"description") && !reader.IsDBNull(reader.GetOrdinal(@"description")))
                                resultRow.Description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                resultRow.Description = null;
                            if (fieldNames.Contains(@"naturaleza") && !reader.IsDBNull(reader.GetOrdinal(@"naturaleza")))
                                resultRow.Naturaleza = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"naturaleza")), typeof(string));
                            if (fieldNames.Contains(@"isOperative") && !reader.IsDBNull(reader.GetOrdinal(@"isOperative")))
                                resultRow.IsOperative = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isOperative")), typeof(bool));
                            if (fieldNames.Contains(@"money") && !reader.IsDBNull(reader.GetOrdinal(@"money")))
                                resultRow.Money = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"money")), typeof(string));
                            result.PrAccountingGetReportAuxiliarAccountResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingGetReportAuxiliarAccountResult1 resultRow = new PrAccountingGetReportAuxiliarAccountResult1();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                resultRow.BalanceStart = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            else
                            if (fieldNames.Contains(@"balanceStart") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStart")))
                                resultRow.BalanceStart = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStart")), typeof(decimal));
                            else
                                resultRow.BalanceStart = null;
                            result.PrAccountingGetReportAuxiliarAccountResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingGetReportAuxiliarAccountResult2 resultRow = new PrAccountingGetReportAuxiliarAccountResult2();
                            if (fieldNames.Contains(@"journalNumber") && !reader.IsDBNull(reader.GetOrdinal(@"journalNumber")))
                                resultRow.JournalNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalNumber")), typeof(string));
                            if (fieldNames.Contains(@"note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                resultRow.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                resultRow.Note = null;
                            if (fieldNames.Contains(@"reference1") && !reader.IsDBNull(reader.GetOrdinal(@"reference1")))
                                resultRow.Reference1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference1")), typeof(string));
                            else
                                resultRow.Reference1 = null;
                            if (fieldNames.Contains(@"journalType") && !reader.IsDBNull(reader.GetOrdinal(@"journalType")))
                                resultRow.JournalType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalType")), typeof(string));
                            else
                                resultRow.JournalType = null;
                            if (fieldNames.Contains(@"journalDate") && !reader.IsDBNull(reader.GetOrdinal(@"journalDate")))
                                resultRow.JournalDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalDate")), typeof(System.DateTime));
                            if (fieldNames.Contains(@"debit") && !reader.IsDBNull(reader.GetOrdinal(@"debit")))
                                resultRow.Debit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"debit")), typeof(decimal));
                            if (fieldNames.Contains(@"credit") && !reader.IsDBNull(reader.GetOrdinal(@"credit")))
                                resultRow.Credit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"credit")), typeof(decimal));
                            result.PrAccountingGetReportAuxiliarAccountResult2s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingGetReportAuxiliarAccountResult3 resultRow = new PrAccountingGetReportAuxiliarAccountResult3();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                resultRow.BalanceEnd = (decimal)Convert.ChangeType(reader.GetValue(0), typeof(decimal));
                            else
                            if (fieldNames.Contains(@"balanceEnd") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEnd")))
                                resultRow.BalanceEnd = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEnd")), typeof(decimal));
                            else
                                resultRow.BalanceEnd = null;
                            result.PrAccountingGetReportAuxiliarAccountResult3s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para Obtener los movimientos por tipo de comprobantes
        /// </summary>
        public List<PrAccountingGetReportAuxiliarMovTipoComprobanteResult> PrAccountingGetReportAuxiliarMovTipoComprobante (int? prCompanyID, int? prJournalTypeID, DateTime? prStartOn, DateTime? prEndOn, int? prExcludeSystem, string prStringContainer, int? prClassID)
        {

            List<PrAccountingGetReportAuxiliarMovTipoComprobanteResult> result = new List<PrAccountingGetReportAuxiliarMovTipoComprobanteResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_auxiliar_mov_tipo_comprobantes";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prJournalTypeIDParameter = cmd.CreateParameter();
                    prJournalTypeIDParameter.ParameterName = "prJournalTypeID";
                    prJournalTypeIDParameter.Direction = ParameterDirection.Input;
                    prJournalTypeIDParameter.DbType = DbType.Int32;
                    prJournalTypeIDParameter.Precision = 10;
                    prJournalTypeIDParameter.Scale = 0;
                    if (prJournalTypeID.HasValue)
                    {
                        prJournalTypeIDParameter.Value = prJournalTypeID.Value;
                    }
                    else
                    {
                        prJournalTypeIDParameter.Size = -1;
                        prJournalTypeIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalTypeIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prExcludeSystemParameter = cmd.CreateParameter();
                    prExcludeSystemParameter.ParameterName = "prExcludeSystem";
                    prExcludeSystemParameter.Direction = ParameterDirection.Input;
                    prExcludeSystemParameter.DbType = DbType.Int32;
                    prExcludeSystemParameter.Precision = 10;
                    prExcludeSystemParameter.Scale = 0;
                    if (prExcludeSystem.HasValue)
                    {
                        prExcludeSystemParameter.Value = prExcludeSystem.Value;
                    }
                    else
                    {
                        prExcludeSystemParameter.Size = -1;
                        prExcludeSystemParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prExcludeSystemParameter);

                    DbParameter prStringContainerParameter = cmd.CreateParameter();
                    prStringContainerParameter.ParameterName = "prStringContainer";
                    prStringContainerParameter.Direction = ParameterDirection.Input;
                    prStringContainerParameter.DbType = DbType.String;
                    prStringContainerParameter.Size = 500;
                    if (prStringContainer != null)
                    {
                        prStringContainerParameter.Value = prStringContainer;
                    }
                    else
                    {
                        prStringContainerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStringContainerParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrAccountingGetReportAuxiliarMovTipoComprobanteResult row = new PrAccountingGetReportAuxiliarMovTipoComprobanteResult();
                            if (fieldNames.Contains("journalNumber") && !reader.IsDBNull(reader.GetOrdinal(@"journalNumber")))
                                row.JournalNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalNumber")), typeof(string));

                            if (fieldNames.Contains("journalDate") && !reader.IsDBNull(reader.GetOrdinal(@"journalDate")))
                                row.JournalDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalDate")), typeof(System.DateTime));

                            if (fieldNames.Contains("journalType") && !reader.IsDBNull(reader.GetOrdinal(@"journalType")))
                                row.JournalType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalType")), typeof(string));
                            else
                                row.JournalType = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("reference1") && !reader.IsDBNull(reader.GetOrdinal(@"reference1")))
                                row.Reference1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference1")), typeof(string));
                            else
                                row.Reference1 = null;

                            if (fieldNames.Contains("tb_exchange_rate") && !reader.IsDBNull(reader.GetOrdinal(@"tb_exchange_rate")))
                                row.TbExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tb_exchange_rate")), typeof(decimal));

                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));

                            if (fieldNames.Contains("accountName") && !reader.IsDBNull(reader.GetOrdinal(@"accountName")))
                                row.AccountName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountName")), typeof(string));

                            if (fieldNames.Contains("debit") && !reader.IsDBNull(reader.GetOrdinal(@"debit")))
                                row.Debit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"debit")), typeof(decimal));

                            if (fieldNames.Contains("credit") && !reader.IsDBNull(reader.GetOrdinal(@"credit")))
                                row.Credit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"credit")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para Obtener los movimientos por tipo de comprobantes
        /// </summary>
        public async Task<List<PrAccountingGetReportAuxiliarMovTipoComprobanteResult>> PrAccountingGetReportAuxiliarMovTipoComprobanteAsync (int? prCompanyID, int? prJournalTypeID, DateTime? prStartOn, DateTime? prEndOn, int? prExcludeSystem, string prStringContainer, int? prClassID)
        {

            List<PrAccountingGetReportAuxiliarMovTipoComprobanteResult> result = new List<PrAccountingGetReportAuxiliarMovTipoComprobanteResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_auxiliar_mov_tipo_comprobantes";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prJournalTypeIDParameter = cmd.CreateParameter();
                    prJournalTypeIDParameter.ParameterName = "prJournalTypeID";
                    prJournalTypeIDParameter.Direction = ParameterDirection.Input;
                    prJournalTypeIDParameter.DbType = DbType.Int32;
                    prJournalTypeIDParameter.Precision = 10;
                    prJournalTypeIDParameter.Scale = 0;
                    if (prJournalTypeID.HasValue)
                    {
                        prJournalTypeIDParameter.Value = prJournalTypeID.Value;
                    }
                    else
                    {
                        prJournalTypeIDParameter.Size = -1;
                        prJournalTypeIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalTypeIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prExcludeSystemParameter = cmd.CreateParameter();
                    prExcludeSystemParameter.ParameterName = "prExcludeSystem";
                    prExcludeSystemParameter.Direction = ParameterDirection.Input;
                    prExcludeSystemParameter.DbType = DbType.Int32;
                    prExcludeSystemParameter.Precision = 10;
                    prExcludeSystemParameter.Scale = 0;
                    if (prExcludeSystem.HasValue)
                    {
                        prExcludeSystemParameter.Value = prExcludeSystem.Value;
                    }
                    else
                    {
                        prExcludeSystemParameter.Size = -1;
                        prExcludeSystemParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prExcludeSystemParameter);

                    DbParameter prStringContainerParameter = cmd.CreateParameter();
                    prStringContainerParameter.ParameterName = "prStringContainer";
                    prStringContainerParameter.Direction = ParameterDirection.Input;
                    prStringContainerParameter.DbType = DbType.String;
                    prStringContainerParameter.Size = 500;
                    if (prStringContainer != null)
                    {
                        prStringContainerParameter.Value = prStringContainer;
                    }
                    else
                    {
                        prStringContainerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStringContainerParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrAccountingGetReportAuxiliarMovTipoComprobanteResult row = new PrAccountingGetReportAuxiliarMovTipoComprobanteResult();
                            if (fieldNames.Contains("journalNumber") && !reader.IsDBNull(reader.GetOrdinal(@"journalNumber")))
                                row.JournalNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalNumber")), typeof(string));

                            if (fieldNames.Contains("journalDate") && !reader.IsDBNull(reader.GetOrdinal(@"journalDate")))
                                row.JournalDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalDate")), typeof(System.DateTime));

                            if (fieldNames.Contains("journalType") && !reader.IsDBNull(reader.GetOrdinal(@"journalType")))
                                row.JournalType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"journalType")), typeof(string));
                            else
                                row.JournalType = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("reference1") && !reader.IsDBNull(reader.GetOrdinal(@"reference1")))
                                row.Reference1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference1")), typeof(string));
                            else
                                row.Reference1 = null;

                            if (fieldNames.Contains("tb_exchange_rate") && !reader.IsDBNull(reader.GetOrdinal(@"tb_exchange_rate")))
                                row.TbExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tb_exchange_rate")), typeof(decimal));

                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));

                            if (fieldNames.Contains("accountName") && !reader.IsDBNull(reader.GetOrdinal(@"accountName")))
                                row.AccountName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountName")), typeof(string));

                            if (fieldNames.Contains("debit") && !reader.IsDBNull(reader.GetOrdinal(@"debit")))
                                row.Debit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"debit")), typeof(decimal));

                            if (fieldNames.Contains("credit") && !reader.IsDBNull(reader.GetOrdinal(@"credit")))
                                row.Credit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"credit")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para Obtener el Balance General de la Empresa
        /// </summary>
        public void PrAccountingGetReportBalanceGeneral (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_balance_general";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener el Balance General de la Empresa
        /// </summary>
        public async Task PrAccountingGetReportBalanceGeneralAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_balance_general";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener la Balanza de Comprobacion
        /// </summary>
        public PrAccountingGetReportBalanzaDeComprobacionMultipleResult PrAccountingGetReportBalanzaDeComprobacion (int? prCompanyID, int? prPeriodID, int? prCycleID, int? prClassID)
        {

            PrAccountingGetReportBalanzaDeComprobacionMultipleResult result = new PrAccountingGetReportBalanzaDeComprobacionMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_balanza_de_comprobacion";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingAccountBalanceResult resultRow = new PrAccountingAccountBalanceResult();
                            if (fieldNames.Contains(@"companyID") && !reader.IsDBNull(reader.GetOrdinal(@"companyID")))
                                resultRow.CompanyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"companyID")), typeof(int));
                            if (fieldNames.Contains(@"accountID") && !reader.IsDBNull(reader.GetOrdinal(@"accountID")))
                                resultRow.AccountID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountID")), typeof(int));
                            if (fieldNames.Contains(@"parentAccountID") && !reader.IsDBNull(reader.GetOrdinal(@"parentAccountID")))
                                resultRow.ParentAccountID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parentAccountID")), typeof(int));
                            else
                                resultRow.ParentAccountID = null;
                            if (fieldNames.Contains(@"accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                resultRow.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));
                            if (fieldNames.Contains(@"name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                resultRow.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));
                            if (fieldNames.Contains(@"isOperative") && !reader.IsDBNull(reader.GetOrdinal(@"isOperative")))
                                resultRow.IsOperative = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isOperative")), typeof(bool));
                            if (fieldNames.Contains(@"statusID") && !reader.IsDBNull(reader.GetOrdinal(@"statusID")))
                                resultRow.StatusID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusID")), typeof(int));
                            if (fieldNames.Contains(@"accountTypeID") && !reader.IsDBNull(reader.GetOrdinal(@"accountTypeID")))
                                resultRow.AccountTypeID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountTypeID")), typeof(int));
                            if (fieldNames.Contains(@"naturaleza") && !reader.IsDBNull(reader.GetOrdinal(@"naturaleza")))
                                resultRow.Naturaleza = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"naturaleza")), typeof(string));
                            if (fieldNames.Contains(@"balanceStart") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStart")))
                                resultRow.BalanceStart = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStart")), typeof(decimal));
                            else
                                resultRow.BalanceStart = null;
                            if (fieldNames.Contains(@"debit") && !reader.IsDBNull(reader.GetOrdinal(@"debit")))
                                resultRow.Debit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"debit")), typeof(decimal));
                            if (fieldNames.Contains(@"credit") && !reader.IsDBNull(reader.GetOrdinal(@"credit")))
                                resultRow.Credit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"credit")), typeof(decimal));
                            if (fieldNames.Contains(@"balanceEnd") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEnd")))
                                resultRow.BalanceEnd = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEnd")), typeof(decimal));
                            else
                                resultRow.BalanceEnd = null;
                            result.PrAccountingAccountBalanceResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingGetReportBalanzaDeComprobacionResult resultRow = new PrAccountingGetReportBalanzaDeComprobacionResult();
                            if (fieldNames.Contains(@"debit") && !reader.IsDBNull(reader.GetOrdinal(@"debit")))
                                resultRow.Debit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"debit")), typeof(decimal));
                            else
                                resultRow.Debit = null;
                            if (fieldNames.Contains(@"credit") && !reader.IsDBNull(reader.GetOrdinal(@"credit")))
                                resultRow.Credit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"credit")), typeof(decimal));
                            else
                                resultRow.Credit = null;
                            result.PrAccountingGetReportBalanzaDeComprobacionResults.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para Obtener la Balanza de Comprobacion
        /// </summary>
        public async Task<PrAccountingGetReportBalanzaDeComprobacionMultipleResult> PrAccountingGetReportBalanzaDeComprobacionAsync (int? prCompanyID, int? prPeriodID, int? prCycleID, int? prClassID)
        {

            PrAccountingGetReportBalanzaDeComprobacionMultipleResult result = new PrAccountingGetReportBalanzaDeComprobacionMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_balanza_de_comprobacion";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingAccountBalanceResult resultRow = new PrAccountingAccountBalanceResult();
                            if (fieldNames.Contains(@"companyID") && !reader.IsDBNull(reader.GetOrdinal(@"companyID")))
                                resultRow.CompanyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"companyID")), typeof(int));
                            if (fieldNames.Contains(@"accountID") && !reader.IsDBNull(reader.GetOrdinal(@"accountID")))
                                resultRow.AccountID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountID")), typeof(int));
                            if (fieldNames.Contains(@"parentAccountID") && !reader.IsDBNull(reader.GetOrdinal(@"parentAccountID")))
                                resultRow.ParentAccountID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"parentAccountID")), typeof(int));
                            else
                                resultRow.ParentAccountID = null;
                            if (fieldNames.Contains(@"accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                resultRow.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));
                            if (fieldNames.Contains(@"name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                resultRow.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));
                            if (fieldNames.Contains(@"isOperative") && !reader.IsDBNull(reader.GetOrdinal(@"isOperative")))
                                resultRow.IsOperative = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isOperative")), typeof(bool));
                            if (fieldNames.Contains(@"statusID") && !reader.IsDBNull(reader.GetOrdinal(@"statusID")))
                                resultRow.StatusID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusID")), typeof(int));
                            if (fieldNames.Contains(@"accountTypeID") && !reader.IsDBNull(reader.GetOrdinal(@"accountTypeID")))
                                resultRow.AccountTypeID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountTypeID")), typeof(int));
                            if (fieldNames.Contains(@"naturaleza") && !reader.IsDBNull(reader.GetOrdinal(@"naturaleza")))
                                resultRow.Naturaleza = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"naturaleza")), typeof(string));
                            if (fieldNames.Contains(@"balanceStart") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStart")))
                                resultRow.BalanceStart = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStart")), typeof(decimal));
                            else
                                resultRow.BalanceStart = null;
                            if (fieldNames.Contains(@"debit") && !reader.IsDBNull(reader.GetOrdinal(@"debit")))
                                resultRow.Debit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"debit")), typeof(decimal));
                            if (fieldNames.Contains(@"credit") && !reader.IsDBNull(reader.GetOrdinal(@"credit")))
                                resultRow.Credit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"credit")), typeof(decimal));
                            if (fieldNames.Contains(@"balanceEnd") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEnd")))
                                resultRow.BalanceEnd = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEnd")), typeof(decimal));
                            else
                                resultRow.BalanceEnd = null;
                            result.PrAccountingAccountBalanceResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAccountingGetReportBalanzaDeComprobacionResult resultRow = new PrAccountingGetReportBalanzaDeComprobacionResult();
                            if (fieldNames.Contains(@"debit") && !reader.IsDBNull(reader.GetOrdinal(@"debit")))
                                resultRow.Debit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"debit")), typeof(decimal));
                            else
                                resultRow.Debit = null;
                            if (fieldNames.Contains(@"credit") && !reader.IsDBNull(reader.GetOrdinal(@"credit")))
                                resultRow.Credit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"credit")), typeof(decimal));
                            else
                                resultRow.Credit = null;
                            result.PrAccountingGetReportBalanzaDeComprobacionResults.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PrAccountingGetReportCashFlowResult> PrAccountingGetReportCashFlow (int? prCompanyID, string prTokenID, int? prUserID, int? prCycleID, int? prPeriodID)
        {

            List<PrAccountingGetReportCashFlowResult> result = new List<PrAccountingGetReportCashFlowResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_cash_flow";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrAccountingGetReportCashFlowResult row = new PrAccountingGetReportCashFlowResult();
                            if (fieldNames.Contains("accountType") && !reader.IsDBNull(reader.GetOrdinal(@"accountType")))
                                row.AccountType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountType")), typeof(string));
                            else
                                row.AccountType = null;

                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));
                            else
                                row.AccountNumber = null;

                            if (fieldNames.Contains("account") && !reader.IsDBNull(reader.GetOrdinal(@"account")))
                                row.Account = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"account")), typeof(string));
                            else
                                row.Account = null;

                            if (fieldNames.Contains("saldoInicial") && !reader.IsDBNull(reader.GetOrdinal(@"saldoInicial")))
                                row.SaldoInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"saldoInicial")), typeof(decimal));
                            else
                                row.SaldoInicial = null;

                            if (fieldNames.Contains("saldoFinal") && !reader.IsDBNull(reader.GetOrdinal(@"saldoFinal")))
                                row.SaldoFinal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"saldoFinal")), typeof(decimal));
                            else
                                row.SaldoFinal = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrAccountingGetReportCashFlowResult>> PrAccountingGetReportCashFlowAsync (int? prCompanyID, string prTokenID, int? prUserID, int? prCycleID, int? prPeriodID)
        {

            List<PrAccountingGetReportCashFlowResult> result = new List<PrAccountingGetReportCashFlowResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_cash_flow";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrAccountingGetReportCashFlowResult row = new PrAccountingGetReportCashFlowResult();
                            if (fieldNames.Contains("accountType") && !reader.IsDBNull(reader.GetOrdinal(@"accountType")))
                                row.AccountType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountType")), typeof(string));
                            else
                                row.AccountType = null;

                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));
                            else
                                row.AccountNumber = null;

                            if (fieldNames.Contains("account") && !reader.IsDBNull(reader.GetOrdinal(@"account")))
                                row.Account = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"account")), typeof(string));
                            else
                                row.Account = null;

                            if (fieldNames.Contains("saldoInicial") && !reader.IsDBNull(reader.GetOrdinal(@"saldoInicial")))
                                row.SaldoInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"saldoInicial")), typeof(decimal));
                            else
                                row.SaldoInicial = null;

                            if (fieldNames.Contains("saldoFinal") && !reader.IsDBNull(reader.GetOrdinal(@"saldoFinal")))
                                row.SaldoFinal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"saldoFinal")), typeof(decimal));
                            else
                                row.SaldoFinal = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para Obtener el tb_catalog de cuenta de la empresa
        /// </summary>
        public List<PrAccountingGetReportCatalogoDeCuentaResult> PrAccountingGetReportCatalogoDeCuenta (int? prCompanyID)
        {

            List<PrAccountingGetReportCatalogoDeCuentaResult> result = new List<PrAccountingGetReportCatalogoDeCuentaResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_catalogo_de_cuenta";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrAccountingGetReportCatalogoDeCuentaResult row = new PrAccountingGetReportCatalogoDeCuentaResult();
                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));

                            if (fieldNames.Contains("name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal(@"description")))
                                row.Description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.Description = null;

                            if (fieldNames.Contains("isOperative") && !reader.IsDBNull(reader.GetOrdinal(@"isOperative")))
                                row.IsOperative = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isOperative")), typeof(bool));

                            if (fieldNames.Contains("money") && !reader.IsDBNull(reader.GetOrdinal(@"money")))
                                row.Money = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"money")), typeof(string));

                            if (fieldNames.Contains("nivel") && !reader.IsDBNull(reader.GetOrdinal(@"nivel")))
                                row.Nivel = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nivel")), typeof(string));

                            if (fieldNames.Contains("lengthTotal") && !reader.IsDBNull(reader.GetOrdinal(@"lengthTotal")))
                                row.LengthTotal = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lengthTotal")), typeof(int));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("naturaleza") && !reader.IsDBNull(reader.GetOrdinal(@"naturaleza")))
                                row.Naturaleza = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"naturaleza")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para Obtener el tb_catalog de cuenta de la empresa
        /// </summary>
        public async Task<List<PrAccountingGetReportCatalogoDeCuentaResult>> PrAccountingGetReportCatalogoDeCuentaAsync (int? prCompanyID)
        {

            List<PrAccountingGetReportCatalogoDeCuentaResult> result = new List<PrAccountingGetReportCatalogoDeCuentaResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_catalogo_de_cuenta";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrAccountingGetReportCatalogoDeCuentaResult row = new PrAccountingGetReportCatalogoDeCuentaResult();
                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));

                            if (fieldNames.Contains("name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal(@"description")))
                                row.Description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));
                            else
                                row.Description = null;

                            if (fieldNames.Contains("isOperative") && !reader.IsDBNull(reader.GetOrdinal(@"isOperative")))
                                row.IsOperative = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isOperative")), typeof(bool));

                            if (fieldNames.Contains("money") && !reader.IsDBNull(reader.GetOrdinal(@"money")))
                                row.Money = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"money")), typeof(string));

                            if (fieldNames.Contains("nivel") && !reader.IsDBNull(reader.GetOrdinal(@"nivel")))
                                row.Nivel = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nivel")), typeof(string));

                            if (fieldNames.Contains("lengthTotal") && !reader.IsDBNull(reader.GetOrdinal(@"lengthTotal")))
                                row.LengthTotal = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lengthTotal")), typeof(int));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("naturaleza") && !reader.IsDBNull(reader.GetOrdinal(@"naturaleza")))
                                row.Naturaleza = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"naturaleza")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para Obtener el Estado de Resultado de la Empresa
        /// </summary>
        public void PrAccountingGetReportEstadoResultado (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID, int? prClassID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_estado_resultado";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener el Estado de Resultado de la Empresa
        /// </summary>
        public async Task PrAccountingGetReportEstadoResultadoAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID, int? prClassID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_estado_resultado";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<PrAccountingGetReportPresupuestoryResult> PrAccountingGetReportPresupuestory (int? prCompanyID, int? prPeriodID, int? prCycleID)
        {

            List<PrAccountingGetReportPresupuestoryResult> result = new List<PrAccountingGetReportPresupuestoryResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_presupuestory";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrAccountingGetReportPresupuestoryResult row = new PrAccountingGetReportPresupuestoryResult();
                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));

                            if (fieldNames.Contains("accountName") && !reader.IsDBNull(reader.GetOrdinal(@"accountName")))
                                row.AccountName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountName")), typeof(string));

                            if (fieldNames.Contains("numberPresupuesto") && !reader.IsDBNull(reader.GetOrdinal(@"numberPresupuesto")))
                                row.NumberPresupuesto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"numberPresupuesto")), typeof(decimal));

                            if (fieldNames.Contains("realPresupuesto") && !reader.IsDBNull(reader.GetOrdinal(@"realPresupuesto")))
                                row.RealPresupuesto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"realPresupuesto")), typeof(decimal));
                            else
                                row.RealPresupuesto = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrAccountingGetReportPresupuestoryResult>> PrAccountingGetReportPresupuestoryAsync (int? prCompanyID, int? prPeriodID, int? prCycleID)
        {

            List<PrAccountingGetReportPresupuestoryResult> result = new List<PrAccountingGetReportPresupuestoryResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_presupuestory";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrAccountingGetReportPresupuestoryResult row = new PrAccountingGetReportPresupuestoryResult();
                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));

                            if (fieldNames.Contains("accountName") && !reader.IsDBNull(reader.GetOrdinal(@"accountName")))
                                row.AccountName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountName")), typeof(string));

                            if (fieldNames.Contains("numberPresupuesto") && !reader.IsDBNull(reader.GetOrdinal(@"numberPresupuesto")))
                                row.NumberPresupuesto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"numberPresupuesto")), typeof(decimal));

                            if (fieldNames.Contains("realPresupuesto") && !reader.IsDBNull(reader.GetOrdinal(@"realPresupuesto")))
                                row.RealPresupuesto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"realPresupuesto")), typeof(decimal));
                            else
                                row.RealPresupuesto = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// reporte de las razones financieras
        /// </summary>
        public void PrAccountingGetReportRazonFinancial (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_razon_financial";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// reporte de las razones financieras
        /// </summary>
        public async Task PrAccountingGetReportRazonFinancialAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_razon_financial";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para importar cuentas
        /// </summary>
        public void PrAccountingImportAccount ()
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_import_account";
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para importar cuentas
        /// </summary>
        public async Task PrAccountingImportAccountAsync ()
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_import_account";
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para inicializar la tabla temporal
        /// </summary>
        public void PrAccountingInitializeAccountTmp (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_initialize_account_tmp";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para inicializar la tabla temporal
        /// </summary>
        public async Task PrAccountingInitializeAccountTmpAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_initialize_account_tmp";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar cuentas
        /// </summary>
        public void PrAccountingMayorizateAccount (int? prCompanyID, int? prPeriodID, int? prCycleID, int? prAccountID, decimal? prBalance, decimal? prDebit, decimal? prCredit)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prBalanceParameter = cmd.CreateParameter();
                    prBalanceParameter.ParameterName = "prBalance";
                    prBalanceParameter.Direction = ParameterDirection.Input;
                    prBalanceParameter.DbType = DbType.Decimal;
                    prBalanceParameter.Precision = 19;
                    prBalanceParameter.Scale = 8;
                    if (prBalance.HasValue)
                    {
                        prBalanceParameter.Value = prBalance.Value;
                    }
                    else
                    {
                        prBalanceParameter.Size = -1;
                        prBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceParameter);

                    DbParameter prDebitParameter = cmd.CreateParameter();
                    prDebitParameter.ParameterName = "prDebit";
                    prDebitParameter.Direction = ParameterDirection.Input;
                    prDebitParameter.DbType = DbType.Decimal;
                    prDebitParameter.Precision = 19;
                    prDebitParameter.Scale = 8;
                    if (prDebit.HasValue)
                    {
                        prDebitParameter.Value = prDebit.Value;
                    }
                    else
                    {
                        prDebitParameter.Size = -1;
                        prDebitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDebitParameter);

                    DbParameter prCreditParameter = cmd.CreateParameter();
                    prCreditParameter.ParameterName = "prCredit";
                    prCreditParameter.Direction = ParameterDirection.Input;
                    prCreditParameter.DbType = DbType.Decimal;
                    prCreditParameter.Precision = 19;
                    prCreditParameter.Scale = 8;
                    if (prCredit.HasValue)
                    {
                        prCreditParameter.Value = prCredit.Value;
                    }
                    else
                    {
                        prCreditParameter.Size = -1;
                        prCreditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreditParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar cuentas
        /// </summary>
        public async Task PrAccountingMayorizateAccountAsync (int? prCompanyID, int? prPeriodID, int? prCycleID, int? prAccountID, decimal? prBalance, decimal? prDebit, decimal? prCredit)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prBalanceParameter = cmd.CreateParameter();
                    prBalanceParameter.ParameterName = "prBalance";
                    prBalanceParameter.Direction = ParameterDirection.Input;
                    prBalanceParameter.DbType = DbType.Decimal;
                    prBalanceParameter.Precision = 19;
                    prBalanceParameter.Scale = 8;
                    if (prBalance.HasValue)
                    {
                        prBalanceParameter.Value = prBalance.Value;
                    }
                    else
                    {
                        prBalanceParameter.Size = -1;
                        prBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceParameter);

                    DbParameter prDebitParameter = cmd.CreateParameter();
                    prDebitParameter.ParameterName = "prDebit";
                    prDebitParameter.Direction = ParameterDirection.Input;
                    prDebitParameter.DbType = DbType.Decimal;
                    prDebitParameter.Precision = 19;
                    prDebitParameter.Scale = 8;
                    if (prDebit.HasValue)
                    {
                        prDebitParameter.Value = prDebit.Value;
                    }
                    else
                    {
                        prDebitParameter.Size = -1;
                        prDebitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDebitParameter);

                    DbParameter prCreditParameter = cmd.CreateParameter();
                    prCreditParameter.ParameterName = "prCredit";
                    prCreditParameter.Direction = ParameterDirection.Input;
                    prCreditParameter.DbType = DbType.Decimal;
                    prCreditParameter.Precision = 19;
                    prCreditParameter.Scale = 8;
                    if (prCredit.HasValue)
                    {
                        prCreditParameter.Value = prCredit.Value;
                    }
                    else
                    {
                        prCreditParameter.Size = -1;
                        prCreditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreditParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar la tabla Temporal
        /// </summary>
        public void PrAccountingMayorizateAccountTmp (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prAccountID, decimal? prBalance, decimal? prDebit, decimal? prCredit, decimal? prBalanceEnd)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_account_tmp";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prBalanceParameter = cmd.CreateParameter();
                    prBalanceParameter.ParameterName = "prBalance";
                    prBalanceParameter.Direction = ParameterDirection.Input;
                    prBalanceParameter.DbType = DbType.Decimal;
                    prBalanceParameter.Precision = 19;
                    prBalanceParameter.Scale = 8;
                    if (prBalance.HasValue)
                    {
                        prBalanceParameter.Value = prBalance.Value;
                    }
                    else
                    {
                        prBalanceParameter.Size = -1;
                        prBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceParameter);

                    DbParameter prDebitParameter = cmd.CreateParameter();
                    prDebitParameter.ParameterName = "prDebit";
                    prDebitParameter.Direction = ParameterDirection.Input;
                    prDebitParameter.DbType = DbType.Decimal;
                    prDebitParameter.Precision = 19;
                    prDebitParameter.Scale = 8;
                    if (prDebit.HasValue)
                    {
                        prDebitParameter.Value = prDebit.Value;
                    }
                    else
                    {
                        prDebitParameter.Size = -1;
                        prDebitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDebitParameter);

                    DbParameter prCreditParameter = cmd.CreateParameter();
                    prCreditParameter.ParameterName = "prCredit";
                    prCreditParameter.Direction = ParameterDirection.Input;
                    prCreditParameter.DbType = DbType.Decimal;
                    prCreditParameter.Precision = 19;
                    prCreditParameter.Scale = 8;
                    if (prCredit.HasValue)
                    {
                        prCreditParameter.Value = prCredit.Value;
                    }
                    else
                    {
                        prCreditParameter.Size = -1;
                        prCreditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreditParameter);

                    DbParameter prBalanceEndParameter = cmd.CreateParameter();
                    prBalanceEndParameter.ParameterName = "prBalanceEnd";
                    prBalanceEndParameter.Direction = ParameterDirection.Input;
                    prBalanceEndParameter.DbType = DbType.Decimal;
                    prBalanceEndParameter.Precision = 19;
                    prBalanceEndParameter.Scale = 8;
                    if (prBalanceEnd.HasValue)
                    {
                        prBalanceEndParameter.Value = prBalanceEnd.Value;
                    }
                    else
                    {
                        prBalanceEndParameter.Size = -1;
                        prBalanceEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceEndParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar la tabla Temporal
        /// </summary>
        public async Task PrAccountingMayorizateAccountTmpAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prAccountID, decimal? prBalance, decimal? prDebit, decimal? prCredit, decimal? prBalanceEnd)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_account_tmp";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prBalanceParameter = cmd.CreateParameter();
                    prBalanceParameter.ParameterName = "prBalance";
                    prBalanceParameter.Direction = ParameterDirection.Input;
                    prBalanceParameter.DbType = DbType.Decimal;
                    prBalanceParameter.Precision = 19;
                    prBalanceParameter.Scale = 8;
                    if (prBalance.HasValue)
                    {
                        prBalanceParameter.Value = prBalance.Value;
                    }
                    else
                    {
                        prBalanceParameter.Size = -1;
                        prBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceParameter);

                    DbParameter prDebitParameter = cmd.CreateParameter();
                    prDebitParameter.ParameterName = "prDebit";
                    prDebitParameter.Direction = ParameterDirection.Input;
                    prDebitParameter.DbType = DbType.Decimal;
                    prDebitParameter.Precision = 19;
                    prDebitParameter.Scale = 8;
                    if (prDebit.HasValue)
                    {
                        prDebitParameter.Value = prDebit.Value;
                    }
                    else
                    {
                        prDebitParameter.Size = -1;
                        prDebitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDebitParameter);

                    DbParameter prCreditParameter = cmd.CreateParameter();
                    prCreditParameter.ParameterName = "prCredit";
                    prCreditParameter.Direction = ParameterDirection.Input;
                    prCreditParameter.DbType = DbType.Decimal;
                    prCreditParameter.Precision = 19;
                    prCreditParameter.Scale = 8;
                    if (prCredit.HasValue)
                    {
                        prCreditParameter.Value = prCredit.Value;
                    }
                    else
                    {
                        prCreditParameter.Size = -1;
                        prCreditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreditParameter);

                    DbParameter prBalanceEndParameter = cmd.CreateParameter();
                    prBalanceEndParameter.ParameterName = "prBalanceEnd";
                    prBalanceEndParameter.Direction = ParameterDirection.Input;
                    prBalanceEndParameter.DbType = DbType.Decimal;
                    prBalanceEndParameter.Precision = 19;
                    prBalanceEndParameter.Scale = 8;
                    if (prBalanceEnd.HasValue)
                    {
                        prBalanceEndParameter.Value = prBalanceEnd.Value;
                    }
                    else
                    {
                        prBalanceEndParameter.Size = -1;
                        prBalanceEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceEndParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar los comprobantes realizados
        /// </summary>
        public void PrAccountingMayorizateCycle (int? prCompanyID, int? prBranchID, int? prLoginID, int? prPeriodID, int? prCycleID, out int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_cycle";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar los comprobantes realizados
        /// </summary>
        public async Task<Tuple<int?>> PrAccountingMayorizateCycleAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prPeriodID, int? prCycleID)
        {

            int? prResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_cycle";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prResult);
        }

        /// <summary>
        /// procedimiento para crear un comprobante a partir de un template
        /// </summary>
        public void PrAccountingTemplatedToJournal (int? prCompanyID, int? prBranchID, int? prLoginID, string prApp, int? prJournalEntryTemplated, ref int? prJournalEntryResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_templated_to_journal";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prAppParameter = cmd.CreateParameter();
                    prAppParameter.ParameterName = "prApp";
                    prAppParameter.Direction = ParameterDirection.Input;
                    prAppParameter.DbType = DbType.String;
                    prAppParameter.Size = 50;
                    if (prApp != null)
                    {
                        prAppParameter.Value = prApp;
                    }
                    else
                    {
                        prAppParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAppParameter);

                    DbParameter prJournalEntryTemplatedParameter = cmd.CreateParameter();
                    prJournalEntryTemplatedParameter.ParameterName = "prJournalEntryTemplated";
                    prJournalEntryTemplatedParameter.Direction = ParameterDirection.Input;
                    prJournalEntryTemplatedParameter.DbType = DbType.Int32;
                    prJournalEntryTemplatedParameter.Precision = 10;
                    prJournalEntryTemplatedParameter.Scale = 0;
                    if (prJournalEntryTemplated.HasValue)
                    {
                        prJournalEntryTemplatedParameter.Value = prJournalEntryTemplated.Value;
                    }
                    else
                    {
                        prJournalEntryTemplatedParameter.Size = -1;
                        prJournalEntryTemplatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalEntryTemplatedParameter);

                    DbParameter prJournalEntryResultParameter = cmd.CreateParameter();
                    prJournalEntryResultParameter.ParameterName = "prJournalEntryResult";
                    prJournalEntryResultParameter.Direction = ParameterDirection.InputOutput;
                    prJournalEntryResultParameter.DbType = DbType.Int32;
                    prJournalEntryResultParameter.Precision = 10;
                    prJournalEntryResultParameter.Scale = 0;
                    if (prJournalEntryResult.HasValue)
                    {
                        prJournalEntryResultParameter.Value = prJournalEntryResult.Value;
                    }
                    else
                    {
                        prJournalEntryResultParameter.Size = -1;
                        prJournalEntryResultParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalEntryResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prJournalEntryResult"].Value != null && !(cmd.Parameters["prJournalEntryResult"].Value is System.DBNull))
                        prJournalEntryResult = (int)Convert.ChangeType(cmd.Parameters["prJournalEntryResult"].Value, typeof(int));
                    else
                        prJournalEntryResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// procedimiento para crear un comprobante a partir de un template
        /// </summary>
        public async Task<Tuple<int?>> PrAccountingTemplatedToJournalAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prApp, int? prJournalEntryTemplated, int? prJournalEntryResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_templated_to_journal";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prAppParameter = cmd.CreateParameter();
                    prAppParameter.ParameterName = "prApp";
                    prAppParameter.Direction = ParameterDirection.Input;
                    prAppParameter.DbType = DbType.String;
                    prAppParameter.Size = 50;
                    if (prApp != null)
                    {
                        prAppParameter.Value = prApp;
                    }
                    else
                    {
                        prAppParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAppParameter);

                    DbParameter prJournalEntryTemplatedParameter = cmd.CreateParameter();
                    prJournalEntryTemplatedParameter.ParameterName = "prJournalEntryTemplated";
                    prJournalEntryTemplatedParameter.Direction = ParameterDirection.Input;
                    prJournalEntryTemplatedParameter.DbType = DbType.Int32;
                    prJournalEntryTemplatedParameter.Precision = 10;
                    prJournalEntryTemplatedParameter.Scale = 0;
                    if (prJournalEntryTemplated.HasValue)
                    {
                        prJournalEntryTemplatedParameter.Value = prJournalEntryTemplated.Value;
                    }
                    else
                    {
                        prJournalEntryTemplatedParameter.Size = -1;
                        prJournalEntryTemplatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalEntryTemplatedParameter);

                    DbParameter prJournalEntryResultParameter = cmd.CreateParameter();
                    prJournalEntryResultParameter.ParameterName = "prJournalEntryResult";
                    prJournalEntryResultParameter.Direction = ParameterDirection.InputOutput;
                    prJournalEntryResultParameter.DbType = DbType.Int32;
                    prJournalEntryResultParameter.Precision = 10;
                    prJournalEntryResultParameter.Scale = 0;
                    if (prJournalEntryResult.HasValue)
                    {
                        prJournalEntryResultParameter.Value = prJournalEntryResult.Value;
                    }
                    else
                    {
                        prJournalEntryResultParameter.Size = -1;
                        prJournalEntryResultParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalEntryResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prJournalEntryResult"].Value != null && !(cmd.Parameters["prJournalEntryResult"].Value is System.DBNull))
                        prJournalEntryResult = (int)Convert.ChangeType(cmd.Parameters["prJournalEntryResult"].Value, typeof(int));
                    else
                        prJournalEntryResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prJournalEntryResult);
        }

        /// <summary>
        /// Este procedimiento es para contabilizar todos los documentos de los modulos que estaran involucrado a la contabilidad
        /// </summary>
        public void PrAccountingTransactionToJournal (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, string prSourceName, int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_transaction_to_journal";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prSourceNameParameter = cmd.CreateParameter();
                    prSourceNameParameter.ParameterName = "prSourceName";
                    prSourceNameParameter.Direction = ParameterDirection.Input;
                    prSourceNameParameter.DbType = DbType.String;
                    prSourceNameParameter.Size = 50;
                    if (prSourceName != null)
                    {
                        prSourceNameParameter.Value = prSourceName;
                    }
                    else
                    {
                        prSourceNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prSourceNameParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Input;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    if (prResult.HasValue)
                    {
                        prResultParameter.Value = prResult.Value;
                    }
                    else
                    {
                        prResultParameter.Size = -1;
                        prResultParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Este procedimiento es para contabilizar todos los documentos de los modulos que estaran involucrado a la contabilidad
        /// </summary>
        public async Task PrAccountingTransactionToJournalAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, string prSourceName, int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_transaction_to_journal";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prSourceNameParameter = cmd.CreateParameter();
                    prSourceNameParameter.ParameterName = "prSourceName";
                    prSourceNameParameter.Direction = ParameterDirection.Input;
                    prSourceNameParameter.DbType = DbType.String;
                    prSourceNameParameter.Size = 50;
                    if (prSourceName != null)
                    {
                        prSourceNameParameter.Value = prSourceName;
                    }
                    else
                    {
                        prSourceNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prSourceNameParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Input;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    if (prResult.HasValue)
                    {
                        prResultParameter.Value = prResult.Value;
                    }
                    else
                    {
                        prResultParameter.Size = -1;
                        prResultParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// guarda el listado de transacciones que se guardan dentro de una session de caja
        /// </summary>
        public void PrBoxClosedBox (int? prUserID, int? prBranchID, string prTokenID, int? prCompanyID, int? prTransactionMasterOpen, int? prTransactionMasterClosed, int? prCashBoxID, int? prCashBoxSessionID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_closed_box";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionMasterOpenParameter = cmd.CreateParameter();
                    prTransactionMasterOpenParameter.ParameterName = "prTransactionMasterOpen";
                    prTransactionMasterOpenParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterOpenParameter.DbType = DbType.Int32;
                    prTransactionMasterOpenParameter.Precision = 10;
                    prTransactionMasterOpenParameter.Scale = 0;
                    if (prTransactionMasterOpen.HasValue)
                    {
                        prTransactionMasterOpenParameter.Value = prTransactionMasterOpen.Value;
                    }
                    else
                    {
                        prTransactionMasterOpenParameter.Size = -1;
                        prTransactionMasterOpenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterOpenParameter);

                    DbParameter prTransactionMasterClosedParameter = cmd.CreateParameter();
                    prTransactionMasterClosedParameter.ParameterName = "prTransactionMasterClosed";
                    prTransactionMasterClosedParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterClosedParameter.DbType = DbType.Int32;
                    prTransactionMasterClosedParameter.Precision = 10;
                    prTransactionMasterClosedParameter.Scale = 0;
                    if (prTransactionMasterClosed.HasValue)
                    {
                        prTransactionMasterClosedParameter.Value = prTransactionMasterClosed.Value;
                    }
                    else
                    {
                        prTransactionMasterClosedParameter.Size = -1;
                        prTransactionMasterClosedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterClosedParameter);

                    DbParameter prCashBoxIDParameter = cmd.CreateParameter();
                    prCashBoxIDParameter.ParameterName = "prCashBoxID";
                    prCashBoxIDParameter.Direction = ParameterDirection.Input;
                    prCashBoxIDParameter.DbType = DbType.Int32;
                    prCashBoxIDParameter.Precision = 10;
                    prCashBoxIDParameter.Scale = 0;
                    if (prCashBoxID.HasValue)
                    {
                        prCashBoxIDParameter.Value = prCashBoxID.Value;
                    }
                    else
                    {
                        prCashBoxIDParameter.Size = -1;
                        prCashBoxIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCashBoxIDParameter);

                    DbParameter prCashBoxSessionIDParameter = cmd.CreateParameter();
                    prCashBoxSessionIDParameter.ParameterName = "prCashBoxSessionID";
                    prCashBoxSessionIDParameter.Direction = ParameterDirection.Input;
                    prCashBoxSessionIDParameter.DbType = DbType.Int32;
                    prCashBoxSessionIDParameter.Precision = 10;
                    prCashBoxSessionIDParameter.Scale = 0;
                    if (prCashBoxSessionID.HasValue)
                    {
                        prCashBoxSessionIDParameter.Value = prCashBoxSessionID.Value;
                    }
                    else
                    {
                        prCashBoxSessionIDParameter.Size = -1;
                        prCashBoxSessionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCashBoxSessionIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// guarda el listado de transacciones que se guardan dentro de una session de caja
        /// </summary>
        public async Task PrBoxClosedBoxAsync (int? prUserID, int? prBranchID, string prTokenID, int? prCompanyID, int? prTransactionMasterOpen, int? prTransactionMasterClosed, int? prCashBoxID, int? prCashBoxSessionID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_closed_box";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionMasterOpenParameter = cmd.CreateParameter();
                    prTransactionMasterOpenParameter.ParameterName = "prTransactionMasterOpen";
                    prTransactionMasterOpenParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterOpenParameter.DbType = DbType.Int32;
                    prTransactionMasterOpenParameter.Precision = 10;
                    prTransactionMasterOpenParameter.Scale = 0;
                    if (prTransactionMasterOpen.HasValue)
                    {
                        prTransactionMasterOpenParameter.Value = prTransactionMasterOpen.Value;
                    }
                    else
                    {
                        prTransactionMasterOpenParameter.Size = -1;
                        prTransactionMasterOpenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterOpenParameter);

                    DbParameter prTransactionMasterClosedParameter = cmd.CreateParameter();
                    prTransactionMasterClosedParameter.ParameterName = "prTransactionMasterClosed";
                    prTransactionMasterClosedParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterClosedParameter.DbType = DbType.Int32;
                    prTransactionMasterClosedParameter.Precision = 10;
                    prTransactionMasterClosedParameter.Scale = 0;
                    if (prTransactionMasterClosed.HasValue)
                    {
                        prTransactionMasterClosedParameter.Value = prTransactionMasterClosed.Value;
                    }
                    else
                    {
                        prTransactionMasterClosedParameter.Size = -1;
                        prTransactionMasterClosedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterClosedParameter);

                    DbParameter prCashBoxIDParameter = cmd.CreateParameter();
                    prCashBoxIDParameter.ParameterName = "prCashBoxID";
                    prCashBoxIDParameter.Direction = ParameterDirection.Input;
                    prCashBoxIDParameter.DbType = DbType.Int32;
                    prCashBoxIDParameter.Precision = 10;
                    prCashBoxIDParameter.Scale = 0;
                    if (prCashBoxID.HasValue)
                    {
                        prCashBoxIDParameter.Value = prCashBoxID.Value;
                    }
                    else
                    {
                        prCashBoxIDParameter.Size = -1;
                        prCashBoxIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCashBoxIDParameter);

                    DbParameter prCashBoxSessionIDParameter = cmd.CreateParameter();
                    prCashBoxSessionIDParameter.ParameterName = "prCashBoxSessionID";
                    prCashBoxSessionIDParameter.Direction = ParameterDirection.Input;
                    prCashBoxSessionIDParameter.DbType = DbType.Int32;
                    prCashBoxSessionIDParameter.Precision = 10;
                    prCashBoxSessionIDParameter.Scale = 0;
                    if (prCashBoxSessionID.HasValue)
                    {
                        prCashBoxSessionIDParameter.Value = prCashBoxSessionID.Value;
                    }
                    else
                    {
                        prCashBoxSessionIDParameter.Size = -1;
                        prCashBoxSessionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCashBoxSessionIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public List<PrBoxGetReportAbonoResult> PrBoxGetReportAbono (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, int? prBranchID)
        {

            List<PrBoxGetReportAbonoResult> result = new List<PrBoxGetReportAbonoResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_abonos";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportAbonoResult row = new PrBoxGetReportAbonoResult();
                            if (fieldNames.Contains("transactionName") && !reader.IsDBNull(reader.GetOrdinal(@"transactionName")))
                                row.TransactionName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionName")), typeof(string));

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(string));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("montoTotal") && !reader.IsDBNull(reader.GetOrdinal(@"montoTotal")))
                                row.MontoTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoTotal")), typeof(decimal));
                            else
                                row.MontoTotal = null;

                            if (fieldNames.Contains("estado") && !reader.IsDBNull(reader.GetOrdinal(@"estado")))
                                row.Estado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estado")), typeof(string));
                            else
                                row.Estado = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("Fac") && !reader.IsDBNull(reader.GetOrdinal(@"Fac")))
                                row.Fac = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fac")), typeof(string));
                            else
                                row.Fac = null;

                            if (fieldNames.Contains("montoCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"montoCordoba")))
                                row.MontoCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoCordoba")), typeof(decimal));
                            else
                                row.MontoCordoba = null;

                            if (fieldNames.Contains("montoFac") && !reader.IsDBNull(reader.GetOrdinal(@"montoFac")))
                                row.MontoFac = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoFac")), typeof(decimal));
                            else
                                row.MontoFac = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));

                            if (fieldNames.Contains("tipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambio")), typeof(decimal));
                            else
                                row.TipoCambio = null;

                            if (fieldNames.Contains("PERMISSION_ME") && !reader.IsDBNull(reader.GetOrdinal(@"PERMISSION_ME")))
                                row.PERMISSIONME = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"PERMISSION_ME")), typeof(int));
                            else
                                row.PERMISSIONME = null;

                            if (fieldNames.Contains("prAuthorization") && !reader.IsDBNull(reader.GetOrdinal(@"prAuthorization")))
                                row.PrAuthorization = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prAuthorization")), typeof(int));
                            else
                                row.PrAuthorization = null;

                            if (fieldNames.Contains("createdBy") && !reader.IsDBNull(reader.GetOrdinal(@"createdBy")))
                                row.CreatedBy = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdBy")), typeof(int));
                            else
                                row.CreatedBy = null;

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("conceptosName") && !reader.IsDBNull(reader.GetOrdinal(@"conceptosName")))
                                row.ConceptosName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"conceptosName")), typeof(string));

                            if (fieldNames.Contains("conceptosSubName") && !reader.IsDBNull(reader.GetOrdinal(@"conceptosSubName")))
                                row.ConceptosSubName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"conceptosSubName")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public async Task<List<PrBoxGetReportAbonoResult>> PrBoxGetReportAbonoAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, int? prBranchID)
        {

            List<PrBoxGetReportAbonoResult> result = new List<PrBoxGetReportAbonoResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_abonos";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportAbonoResult row = new PrBoxGetReportAbonoResult();
                            if (fieldNames.Contains("transactionName") && !reader.IsDBNull(reader.GetOrdinal(@"transactionName")))
                                row.TransactionName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionName")), typeof(string));

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(string));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("montoTotal") && !reader.IsDBNull(reader.GetOrdinal(@"montoTotal")))
                                row.MontoTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoTotal")), typeof(decimal));
                            else
                                row.MontoTotal = null;

                            if (fieldNames.Contains("estado") && !reader.IsDBNull(reader.GetOrdinal(@"estado")))
                                row.Estado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estado")), typeof(string));
                            else
                                row.Estado = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("Fac") && !reader.IsDBNull(reader.GetOrdinal(@"Fac")))
                                row.Fac = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fac")), typeof(string));
                            else
                                row.Fac = null;

                            if (fieldNames.Contains("montoCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"montoCordoba")))
                                row.MontoCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoCordoba")), typeof(decimal));
                            else
                                row.MontoCordoba = null;

                            if (fieldNames.Contains("montoFac") && !reader.IsDBNull(reader.GetOrdinal(@"montoFac")))
                                row.MontoFac = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoFac")), typeof(decimal));
                            else
                                row.MontoFac = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));

                            if (fieldNames.Contains("tipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambio")), typeof(decimal));
                            else
                                row.TipoCambio = null;

                            if (fieldNames.Contains("PERMISSION_ME") && !reader.IsDBNull(reader.GetOrdinal(@"PERMISSION_ME")))
                                row.PERMISSIONME = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"PERMISSION_ME")), typeof(int));
                            else
                                row.PERMISSIONME = null;

                            if (fieldNames.Contains("prAuthorization") && !reader.IsDBNull(reader.GetOrdinal(@"prAuthorization")))
                                row.PrAuthorization = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prAuthorization")), typeof(int));
                            else
                                row.PrAuthorization = null;

                            if (fieldNames.Contains("createdBy") && !reader.IsDBNull(reader.GetOrdinal(@"createdBy")))
                                row.CreatedBy = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdBy")), typeof(int));
                            else
                                row.CreatedBy = null;

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("conceptosName") && !reader.IsDBNull(reader.GetOrdinal(@"conceptosName")))
                                row.ConceptosName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"conceptosName")), typeof(string));

                            if (fieldNames.Contains("conceptosSubName") && !reader.IsDBNull(reader.GetOrdinal(@"conceptosSubName")))
                                row.ConceptosSubName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"conceptosSubName")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de asistencia
        /// </summary>
        public List<PrBoxGetReportAttendanceResult> PrBoxGetReportAttendance (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            List<PrBoxGetReportAttendanceResult> result = new List<PrBoxGetReportAttendanceResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_attendance";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportAttendanceResult row = new PrBoxGetReportAttendanceResult();
                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("estado") && !reader.IsDBNull(reader.GetOrdinal(@"estado")))
                                row.Estado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estado")), typeof(string));
                            else
                                row.Estado = null;

                            if (fieldNames.Contains("prioridad") && !reader.IsDBNull(reader.GetOrdinal(@"prioridad")))
                                row.Prioridad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prioridad")), typeof(string));
                            else
                                row.Prioridad = null;

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("solvencia") && !reader.IsDBNull(reader.GetOrdinal(@"solvencia")))
                                row.Solvencia = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"solvencia")), typeof(string));
                            else
                                row.Solvencia = null;

                            if (fieldNames.Contains("proximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"proximoPago")))
                                row.ProximoPago = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"proximoPago")), typeof(string));
                            else
                                row.ProximoPago = null;

                            if (fieldNames.Contains("diasProximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"diasProximoPago")))
                                row.DiasProximoPago = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"diasProximoPago")), typeof(string));
                            else
                                row.DiasProximoPago = null;

                            if (fieldNames.Contains("vencimiento") && !reader.IsDBNull(reader.GetOrdinal(@"vencimiento")))
                                row.Vencimiento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"vencimiento")), typeof(string));
                            else
                                row.Vencimiento = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de asistencia
        /// </summary>
        public async Task<List<PrBoxGetReportAttendanceResult>> PrBoxGetReportAttendanceAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            List<PrBoxGetReportAttendanceResult> result = new List<PrBoxGetReportAttendanceResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_attendance";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportAttendanceResult row = new PrBoxGetReportAttendanceResult();
                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("estado") && !reader.IsDBNull(reader.GetOrdinal(@"estado")))
                                row.Estado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estado")), typeof(string));
                            else
                                row.Estado = null;

                            if (fieldNames.Contains("prioridad") && !reader.IsDBNull(reader.GetOrdinal(@"prioridad")))
                                row.Prioridad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prioridad")), typeof(string));
                            else
                                row.Prioridad = null;

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("solvencia") && !reader.IsDBNull(reader.GetOrdinal(@"solvencia")))
                                row.Solvencia = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"solvencia")), typeof(string));
                            else
                                row.Solvencia = null;

                            if (fieldNames.Contains("proximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"proximoPago")))
                                row.ProximoPago = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"proximoPago")), typeof(string));
                            else
                                row.ProximoPago = null;

                            if (fieldNames.Contains("diasProximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"diasProximoPago")))
                                row.DiasProximoPago = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"diasProximoPago")), typeof(string));
                            else
                                row.DiasProximoPago = null;

                            if (fieldNames.Contains("vencimiento") && !reader.IsDBNull(reader.GetOrdinal(@"vencimiento")))
                                row.Vencimiento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"vencimiento")), typeof(string));
                            else
                                row.Vencimiento = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public List<PrBoxGetReportClosedResult> PrBoxGetReportClosed (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            List<PrBoxGetReportClosedResult> result = new List<PrBoxGetReportClosedResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportClosedResult row = new PrBoxGetReportClosedResult();
                            if (fieldNames.Contains("sumary") && !reader.IsDBNull(reader.GetOrdinal(@"sumary")))
                                row.Sumary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sumary")), typeof(string));
                            else
                                row.Sumary = null;

                            if (fieldNames.Contains("comandoProce") && !reader.IsDBNull(reader.GetOrdinal(@"comandoProce")))
                                row.ComandoProce = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comandoProce")), typeof(string));
                            else
                                row.ComandoProce = null;

                            if (fieldNames.Contains("substitulo") && !reader.IsDBNull(reader.GetOrdinal(@"substitulo")))
                                row.Substitulo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"substitulo")), typeof(string));
                            else
                                row.Substitulo = null;

                            if (fieldNames.Contains("codigo") && !reader.IsDBNull(reader.GetOrdinal(@"codigo")))
                                row.Codigo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"codigo")), typeof(string));
                            else
                                row.Codigo = null;

                            if (fieldNames.Contains("nombre") && !reader.IsDBNull(reader.GetOrdinal(@"nombre")))
                                row.Nombre = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nombre")), typeof(string));
                            else
                                row.Nombre = null;

                            if (fieldNames.Contains("cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"cantidad")))
                                row.Cantidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cantidad")), typeof(string));
                            else
                                row.Cantidad = null;

                            if (fieldNames.Contains("subtotal") && !reader.IsDBNull(reader.GetOrdinal(@"subtotal")))
                                row.Subtotal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subtotal")), typeof(string));
                            else
                                row.Subtotal = null;

                            if (fieldNames.Contains("total") && !reader.IsDBNull(reader.GetOrdinal(@"total")))
                                row.Total = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total")), typeof(decimal));
                            else
                                row.Total = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(int));
                            else
                                row.Moneda = null;

                            if (fieldNames.Contains("tipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambio")), typeof(decimal));
                            else
                                row.TipoCambio = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public async Task<List<PrBoxGetReportClosedResult>> PrBoxGetReportClosedAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            List<PrBoxGetReportClosedResult> result = new List<PrBoxGetReportClosedResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportClosedResult row = new PrBoxGetReportClosedResult();
                            if (fieldNames.Contains("sumary") && !reader.IsDBNull(reader.GetOrdinal(@"sumary")))
                                row.Sumary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sumary")), typeof(string));
                            else
                                row.Sumary = null;

                            if (fieldNames.Contains("comandoProce") && !reader.IsDBNull(reader.GetOrdinal(@"comandoProce")))
                                row.ComandoProce = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comandoProce")), typeof(string));
                            else
                                row.ComandoProce = null;

                            if (fieldNames.Contains("substitulo") && !reader.IsDBNull(reader.GetOrdinal(@"substitulo")))
                                row.Substitulo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"substitulo")), typeof(string));
                            else
                                row.Substitulo = null;

                            if (fieldNames.Contains("codigo") && !reader.IsDBNull(reader.GetOrdinal(@"codigo")))
                                row.Codigo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"codigo")), typeof(string));
                            else
                                row.Codigo = null;

                            if (fieldNames.Contains("nombre") && !reader.IsDBNull(reader.GetOrdinal(@"nombre")))
                                row.Nombre = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nombre")), typeof(string));
                            else
                                row.Nombre = null;

                            if (fieldNames.Contains("cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"cantidad")))
                                row.Cantidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cantidad")), typeof(string));
                            else
                                row.Cantidad = null;

                            if (fieldNames.Contains("subtotal") && !reader.IsDBNull(reader.GetOrdinal(@"subtotal")))
                                row.Subtotal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subtotal")), typeof(string));
                            else
                                row.Subtotal = null;

                            if (fieldNames.Contains("total") && !reader.IsDBNull(reader.GetOrdinal(@"total")))
                                row.Total = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total")), typeof(decimal));
                            else
                                row.Total = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(int));
                            else
                                row.Moneda = null;

                            if (fieldNames.Contains("tipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambio")), typeof(decimal));
                            else
                                row.TipoCambio = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public List<PrBoxGetReportClosedResult> PrBoxGetReportClosedGlamcut (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            List<PrBoxGetReportClosedResult> result = new List<PrBoxGetReportClosedResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed_glamcuts";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportClosedResult row = new PrBoxGetReportClosedResult();
                            if (fieldNames.Contains("sumary") && !reader.IsDBNull(reader.GetOrdinal(@"sumary")))
                                row.Sumary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sumary")), typeof(string));
                            else
                                row.Sumary = null;

                            if (fieldNames.Contains("comandoProce") && !reader.IsDBNull(reader.GetOrdinal(@"comandoProce")))
                                row.ComandoProce = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comandoProce")), typeof(string));
                            else
                                row.ComandoProce = null;

                            if (fieldNames.Contains("substitulo") && !reader.IsDBNull(reader.GetOrdinal(@"substitulo")))
                                row.Substitulo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"substitulo")), typeof(string));
                            else
                                row.Substitulo = null;

                            if (fieldNames.Contains("codigo") && !reader.IsDBNull(reader.GetOrdinal(@"codigo")))
                                row.Codigo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"codigo")), typeof(string));
                            else
                                row.Codigo = null;

                            if (fieldNames.Contains("nombre") && !reader.IsDBNull(reader.GetOrdinal(@"nombre")))
                                row.Nombre = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nombre")), typeof(string));
                            else
                                row.Nombre = null;

                            if (fieldNames.Contains("cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"cantidad")))
                                row.Cantidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cantidad")), typeof(string));
                            else
                                row.Cantidad = null;

                            if (fieldNames.Contains("subtotal") && !reader.IsDBNull(reader.GetOrdinal(@"subtotal")))
                                row.Subtotal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subtotal")), typeof(string));
                            else
                                row.Subtotal = null;

                            if (fieldNames.Contains("total") && !reader.IsDBNull(reader.GetOrdinal(@"total")))
                                row.Total = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total")), typeof(decimal));
                            else
                                row.Total = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(int));
                            else
                                row.Moneda = null;

                            if (fieldNames.Contains("tipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambio")), typeof(decimal));
                            else
                                row.TipoCambio = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public async Task<List<PrBoxGetReportClosedResult>> PrBoxGetReportClosedGlamcutAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            List<PrBoxGetReportClosedResult> result = new List<PrBoxGetReportClosedResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed_glamcuts";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportClosedResult row = new PrBoxGetReportClosedResult();
                            if (fieldNames.Contains("sumary") && !reader.IsDBNull(reader.GetOrdinal(@"sumary")))
                                row.Sumary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sumary")), typeof(string));
                            else
                                row.Sumary = null;

                            if (fieldNames.Contains("comandoProce") && !reader.IsDBNull(reader.GetOrdinal(@"comandoProce")))
                                row.ComandoProce = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comandoProce")), typeof(string));
                            else
                                row.ComandoProce = null;

                            if (fieldNames.Contains("substitulo") && !reader.IsDBNull(reader.GetOrdinal(@"substitulo")))
                                row.Substitulo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"substitulo")), typeof(string));
                            else
                                row.Substitulo = null;

                            if (fieldNames.Contains("codigo") && !reader.IsDBNull(reader.GetOrdinal(@"codigo")))
                                row.Codigo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"codigo")), typeof(string));
                            else
                                row.Codigo = null;

                            if (fieldNames.Contains("nombre") && !reader.IsDBNull(reader.GetOrdinal(@"nombre")))
                                row.Nombre = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nombre")), typeof(string));
                            else
                                row.Nombre = null;

                            if (fieldNames.Contains("cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"cantidad")))
                                row.Cantidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cantidad")), typeof(string));
                            else
                                row.Cantidad = null;

                            if (fieldNames.Contains("subtotal") && !reader.IsDBNull(reader.GetOrdinal(@"subtotal")))
                                row.Subtotal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subtotal")), typeof(string));
                            else
                                row.Subtotal = null;

                            if (fieldNames.Contains("total") && !reader.IsDBNull(reader.GetOrdinal(@"total")))
                                row.Total = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total")), typeof(decimal));
                            else
                                row.Total = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(int));
                            else
                                row.Moneda = null;

                            if (fieldNames.Contains("tipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambio")), typeof(decimal));
                            else
                                row.TipoCambio = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public List<PrBoxGetReportClosedResult> PrBoxGetReportClosedGym (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            List<PrBoxGetReportClosedResult> result = new List<PrBoxGetReportClosedResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed_gym";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportClosedResult row = new PrBoxGetReportClosedResult();
                            if (fieldNames.Contains("sumary") && !reader.IsDBNull(reader.GetOrdinal(@"sumary")))
                                row.Sumary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sumary")), typeof(string));
                            else
                                row.Sumary = null;

                            if (fieldNames.Contains("comandoProce") && !reader.IsDBNull(reader.GetOrdinal(@"comandoProce")))
                                row.ComandoProce = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comandoProce")), typeof(string));
                            else
                                row.ComandoProce = null;

                            if (fieldNames.Contains("substitulo") && !reader.IsDBNull(reader.GetOrdinal(@"substitulo")))
                                row.Substitulo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"substitulo")), typeof(string));
                            else
                                row.Substitulo = null;

                            if (fieldNames.Contains("codigo") && !reader.IsDBNull(reader.GetOrdinal(@"codigo")))
                                row.Codigo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"codigo")), typeof(string));
                            else
                                row.Codigo = null;

                            if (fieldNames.Contains("nombre") && !reader.IsDBNull(reader.GetOrdinal(@"nombre")))
                                row.Nombre = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nombre")), typeof(string));
                            else
                                row.Nombre = null;

                            if (fieldNames.Contains("cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"cantidad")))
                                row.Cantidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cantidad")), typeof(string));
                            else
                                row.Cantidad = null;

                            if (fieldNames.Contains("subtotal") && !reader.IsDBNull(reader.GetOrdinal(@"subtotal")))
                                row.Subtotal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subtotal")), typeof(string));
                            else
                                row.Subtotal = null;

                            if (fieldNames.Contains("total") && !reader.IsDBNull(reader.GetOrdinal(@"total")))
                                row.Total = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total")), typeof(decimal));
                            else
                                row.Total = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(int));
                            else
                                row.Moneda = null;

                            if (fieldNames.Contains("tipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambio")), typeof(decimal));
                            else
                                row.TipoCambio = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public async Task<List<PrBoxGetReportClosedResult>> PrBoxGetReportClosedGymAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            List<PrBoxGetReportClosedResult> result = new List<PrBoxGetReportClosedResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed_gym";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportClosedResult row = new PrBoxGetReportClosedResult();
                            if (fieldNames.Contains("sumary") && !reader.IsDBNull(reader.GetOrdinal(@"sumary")))
                                row.Sumary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sumary")), typeof(string));
                            else
                                row.Sumary = null;

                            if (fieldNames.Contains("comandoProce") && !reader.IsDBNull(reader.GetOrdinal(@"comandoProce")))
                                row.ComandoProce = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comandoProce")), typeof(string));
                            else
                                row.ComandoProce = null;

                            if (fieldNames.Contains("substitulo") && !reader.IsDBNull(reader.GetOrdinal(@"substitulo")))
                                row.Substitulo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"substitulo")), typeof(string));
                            else
                                row.Substitulo = null;

                            if (fieldNames.Contains("codigo") && !reader.IsDBNull(reader.GetOrdinal(@"codigo")))
                                row.Codigo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"codigo")), typeof(string));
                            else
                                row.Codigo = null;

                            if (fieldNames.Contains("nombre") && !reader.IsDBNull(reader.GetOrdinal(@"nombre")))
                                row.Nombre = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nombre")), typeof(string));
                            else
                                row.Nombre = null;

                            if (fieldNames.Contains("cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"cantidad")))
                                row.Cantidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cantidad")), typeof(string));
                            else
                                row.Cantidad = null;

                            if (fieldNames.Contains("subtotal") && !reader.IsDBNull(reader.GetOrdinal(@"subtotal")))
                                row.Subtotal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"subtotal")), typeof(string));
                            else
                                row.Subtotal = null;

                            if (fieldNames.Contains("total") && !reader.IsDBNull(reader.GetOrdinal(@"total")))
                                row.Total = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"total")), typeof(decimal));
                            else
                                row.Total = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(int));
                            else
                                row.Moneda = null;

                            if (fieldNames.Contains("tipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambio")), typeof(decimal));
                            else
                                row.TipoCambio = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Reporte de cierre de caja
        /// </summary>
        public PrBoxGetReportClosedOperationMultipleResult PrBoxGetReportClosedOperation (int? prUserID, string prTokenID, int? prCompanyID, int? prUserBoxID, DateTime? prStartOn, DateTime? prEndOn)
        {

            PrBoxGetReportClosedOperationMultipleResult result = new PrBoxGetReportClosedOperationMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed_operation";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserBoxIDParameter = cmd.CreateParameter();
                    prUserBoxIDParameter.ParameterName = "prUserBoxID";
                    prUserBoxIDParameter.Direction = ParameterDirection.Input;
                    prUserBoxIDParameter.DbType = DbType.Int32;
                    prUserBoxIDParameter.Precision = 10;
                    prUserBoxIDParameter.Scale = 0;
                    if (prUserBoxID.HasValue)
                    {
                        prUserBoxIDParameter.Value = prUserBoxID.Value;
                    }
                    else
                    {
                        prUserBoxIDParameter.Size = -1;
                        prUserBoxIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserBoxIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrBoxGetReportClosedOperationResult resultRow = new PrBoxGetReportClosedOperationResult();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                resultRow.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));
                            if (fieldNames.Contains(@"CurrencyID") && !reader.IsDBNull(reader.GetOrdinal(@"CurrencyID")))
                                resultRow.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CurrencyID")), typeof(int));
                            else
                                resultRow.CurrencyID = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            if (fieldNames.Contains(@"Entidad") && !reader.IsDBNull(reader.GetOrdinal(@"Entidad")))
                                resultRow.Entidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Entidad")), typeof(string));
                            if (fieldNames.Contains(@"NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                resultRow.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                resultRow.NombreCliente = null;
                            if (fieldNames.Contains(@"Referencia1") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia1")))
                                resultRow.Referencia1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia1")), typeof(string));
                            else
                                resultRow.Referencia1 = null;
                            if (fieldNames.Contains(@"Referencia2") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia2")))
                                resultRow.Referencia2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia2")), typeof(string));
                            else
                                resultRow.Referencia2 = null;
                            if (fieldNames.Contains(@"Referencia3") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia3")))
                                resultRow.Referencia3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia3")), typeof(string));
                            else
                                resultRow.Referencia3 = null;
                            if (fieldNames.Contains(@"Referencia4") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia4")))
                                resultRow.Referencia4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia4")), typeof(string));
                            else
                                resultRow.Referencia4 = null;
                            if (fieldNames.Contains(@"Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                resultRow.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                resultRow.Concepto = null;
                            if (fieldNames.Contains(@"CodigoEmpleado") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoEmpleado")))
                                resultRow.CodigoEmpleado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoEmpleado")), typeof(string));
                            if (fieldNames.Contains(@"SubCategoria") && !reader.IsDBNull(reader.GetOrdinal(@"SubCategoria")))
                                resultRow.SubCategoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SubCategoria")), typeof(string));
                            if (fieldNames.Contains(@"Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                resultRow.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            if (fieldNames.Contains(@"ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                resultRow.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            if (fieldNames.Contains(@"MonedaLocal") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaLocal")))
                                resultRow.MonedaLocal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaLocal")), typeof(string));
                            else
                                resultRow.MonedaLocal = null;
                            if (fieldNames.Contains(@"MonedaExt") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaExt")))
                                resultRow.MonedaExt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaExt")), typeof(string));
                            else
                                resultRow.MonedaExt = null;
                            result.PrBoxGetReportClosedOperationResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrBoxGetReportClosedOperationResult resultRow = new PrBoxGetReportClosedOperationResult();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                resultRow.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));
                            if (fieldNames.Contains(@"CurrencyID") && !reader.IsDBNull(reader.GetOrdinal(@"CurrencyID")))
                                resultRow.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CurrencyID")), typeof(int));
                            else
                                resultRow.CurrencyID = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            if (fieldNames.Contains(@"Entidad") && !reader.IsDBNull(reader.GetOrdinal(@"Entidad")))
                                resultRow.Entidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Entidad")), typeof(string));
                            if (fieldNames.Contains(@"NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                resultRow.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                resultRow.NombreCliente = null;
                            if (fieldNames.Contains(@"Referencia1") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia1")))
                                resultRow.Referencia1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia1")), typeof(string));
                            else
                                resultRow.Referencia1 = null;
                            if (fieldNames.Contains(@"Referencia2") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia2")))
                                resultRow.Referencia2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia2")), typeof(string));
                            else
                                resultRow.Referencia2 = null;
                            if (fieldNames.Contains(@"Referencia3") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia3")))
                                resultRow.Referencia3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia3")), typeof(string));
                            else
                                resultRow.Referencia3 = null;
                            if (fieldNames.Contains(@"Referencia4") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia4")))
                                resultRow.Referencia4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia4")), typeof(string));
                            else
                                resultRow.Referencia4 = null;
                            if (fieldNames.Contains(@"Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                resultRow.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                resultRow.Concepto = null;
                            if (fieldNames.Contains(@"CodigoEmpleado") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoEmpleado")))
                                resultRow.CodigoEmpleado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoEmpleado")), typeof(string));
                            if (fieldNames.Contains(@"SubCategoria") && !reader.IsDBNull(reader.GetOrdinal(@"SubCategoria")))
                                resultRow.SubCategoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SubCategoria")), typeof(string));
                            if (fieldNames.Contains(@"Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                resultRow.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            if (fieldNames.Contains(@"ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                resultRow.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            if (fieldNames.Contains(@"MonedaLocal") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaLocal")))
                                resultRow.MonedaLocal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaLocal")), typeof(string));
                            else
                                resultRow.MonedaLocal = null;
                            if (fieldNames.Contains(@"MonedaExt") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaExt")))
                                resultRow.MonedaExt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaExt")), typeof(string));
                            else
                                resultRow.MonedaExt = null;
                            result.PrBoxGetReportClosedOperationResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrBoxGetReportClosedOperationResult resultRow = new PrBoxGetReportClosedOperationResult();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                resultRow.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));
                            if (fieldNames.Contains(@"CurrencyID") && !reader.IsDBNull(reader.GetOrdinal(@"CurrencyID")))
                                resultRow.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CurrencyID")), typeof(int));
                            else
                                resultRow.CurrencyID = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            if (fieldNames.Contains(@"Entidad") && !reader.IsDBNull(reader.GetOrdinal(@"Entidad")))
                                resultRow.Entidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Entidad")), typeof(string));
                            if (fieldNames.Contains(@"NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                resultRow.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                resultRow.NombreCliente = null;
                            if (fieldNames.Contains(@"Referencia1") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia1")))
                                resultRow.Referencia1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia1")), typeof(string));
                            else
                                resultRow.Referencia1 = null;
                            if (fieldNames.Contains(@"Referencia2") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia2")))
                                resultRow.Referencia2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia2")), typeof(string));
                            else
                                resultRow.Referencia2 = null;
                            if (fieldNames.Contains(@"Referencia3") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia3")))
                                resultRow.Referencia3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia3")), typeof(string));
                            else
                                resultRow.Referencia3 = null;
                            if (fieldNames.Contains(@"Referencia4") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia4")))
                                resultRow.Referencia4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia4")), typeof(string));
                            else
                                resultRow.Referencia4 = null;
                            if (fieldNames.Contains(@"Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                resultRow.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                resultRow.Concepto = null;
                            if (fieldNames.Contains(@"CodigoEmpleado") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoEmpleado")))
                                resultRow.CodigoEmpleado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoEmpleado")), typeof(string));
                            if (fieldNames.Contains(@"SubCategoria") && !reader.IsDBNull(reader.GetOrdinal(@"SubCategoria")))
                                resultRow.SubCategoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SubCategoria")), typeof(string));
                            if (fieldNames.Contains(@"Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                resultRow.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            if (fieldNames.Contains(@"ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                resultRow.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            if (fieldNames.Contains(@"MonedaLocal") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaLocal")))
                                resultRow.MonedaLocal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaLocal")), typeof(string));
                            else
                                resultRow.MonedaLocal = null;
                            if (fieldNames.Contains(@"MonedaExt") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaExt")))
                                resultRow.MonedaExt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaExt")), typeof(string));
                            else
                                resultRow.MonedaExt = null;
                            result.PrBoxGetReportClosedOperationResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrBoxGetReportClosedOperationResult resultRow = new PrBoxGetReportClosedOperationResult();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                resultRow.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));
                            if (fieldNames.Contains(@"CurrencyID") && !reader.IsDBNull(reader.GetOrdinal(@"CurrencyID")))
                                resultRow.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CurrencyID")), typeof(int));
                            else
                                resultRow.CurrencyID = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            if (fieldNames.Contains(@"Entidad") && !reader.IsDBNull(reader.GetOrdinal(@"Entidad")))
                                resultRow.Entidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Entidad")), typeof(string));
                            if (fieldNames.Contains(@"NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                resultRow.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                resultRow.NombreCliente = null;
                            if (fieldNames.Contains(@"Referencia1") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia1")))
                                resultRow.Referencia1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia1")), typeof(string));
                            else
                                resultRow.Referencia1 = null;
                            if (fieldNames.Contains(@"Referencia2") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia2")))
                                resultRow.Referencia2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia2")), typeof(string));
                            else
                                resultRow.Referencia2 = null;
                            if (fieldNames.Contains(@"Referencia3") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia3")))
                                resultRow.Referencia3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia3")), typeof(string));
                            else
                                resultRow.Referencia3 = null;
                            if (fieldNames.Contains(@"Referencia4") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia4")))
                                resultRow.Referencia4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia4")), typeof(string));
                            else
                                resultRow.Referencia4 = null;
                            if (fieldNames.Contains(@"Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                resultRow.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                resultRow.Concepto = null;
                            if (fieldNames.Contains(@"CodigoEmpleado") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoEmpleado")))
                                resultRow.CodigoEmpleado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoEmpleado")), typeof(string));
                            if (fieldNames.Contains(@"SubCategoria") && !reader.IsDBNull(reader.GetOrdinal(@"SubCategoria")))
                                resultRow.SubCategoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SubCategoria")), typeof(string));
                            if (fieldNames.Contains(@"Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                resultRow.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            if (fieldNames.Contains(@"ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                resultRow.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            if (fieldNames.Contains(@"MonedaLocal") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaLocal")))
                                resultRow.MonedaLocal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaLocal")), typeof(string));
                            else
                                resultRow.MonedaLocal = null;
                            if (fieldNames.Contains(@"MonedaExt") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaExt")))
                                resultRow.MonedaExt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaExt")), typeof(string));
                            else
                                resultRow.MonedaExt = null;
                            result.PrBoxGetReportClosedOperationResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrBoxGetReportClosedOperationResult resultRow = new PrBoxGetReportClosedOperationResult();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                resultRow.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));
                            if (fieldNames.Contains(@"CurrencyID") && !reader.IsDBNull(reader.GetOrdinal(@"CurrencyID")))
                                resultRow.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CurrencyID")), typeof(int));
                            else
                                resultRow.CurrencyID = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            if (fieldNames.Contains(@"Entidad") && !reader.IsDBNull(reader.GetOrdinal(@"Entidad")))
                                resultRow.Entidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Entidad")), typeof(string));
                            if (fieldNames.Contains(@"NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                resultRow.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                resultRow.NombreCliente = null;
                            if (fieldNames.Contains(@"Referencia1") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia1")))
                                resultRow.Referencia1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia1")), typeof(string));
                            else
                                resultRow.Referencia1 = null;
                            if (fieldNames.Contains(@"Referencia2") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia2")))
                                resultRow.Referencia2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia2")), typeof(string));
                            else
                                resultRow.Referencia2 = null;
                            if (fieldNames.Contains(@"Referencia3") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia3")))
                                resultRow.Referencia3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia3")), typeof(string));
                            else
                                resultRow.Referencia3 = null;
                            if (fieldNames.Contains(@"Referencia4") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia4")))
                                resultRow.Referencia4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia4")), typeof(string));
                            else
                                resultRow.Referencia4 = null;
                            if (fieldNames.Contains(@"Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                resultRow.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                resultRow.Concepto = null;
                            if (fieldNames.Contains(@"CodigoEmpleado") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoEmpleado")))
                                resultRow.CodigoEmpleado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoEmpleado")), typeof(string));
                            if (fieldNames.Contains(@"SubCategoria") && !reader.IsDBNull(reader.GetOrdinal(@"SubCategoria")))
                                resultRow.SubCategoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SubCategoria")), typeof(string));
                            if (fieldNames.Contains(@"Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                resultRow.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            if (fieldNames.Contains(@"ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                resultRow.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            if (fieldNames.Contains(@"MonedaLocal") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaLocal")))
                                resultRow.MonedaLocal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaLocal")), typeof(string));
                            else
                                resultRow.MonedaLocal = null;
                            if (fieldNames.Contains(@"MonedaExt") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaExt")))
                                resultRow.MonedaExt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaExt")), typeof(string));
                            else
                                resultRow.MonedaExt = null;
                            result.PrBoxGetReportClosedOperationResults.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Reporte de cierre de caja
        /// </summary>
        public async Task<PrBoxGetReportClosedOperationMultipleResult> PrBoxGetReportClosedOperationAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prUserBoxID, DateTime? prStartOn, DateTime? prEndOn)
        {

            PrBoxGetReportClosedOperationMultipleResult result = new PrBoxGetReportClosedOperationMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed_operation";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserBoxIDParameter = cmd.CreateParameter();
                    prUserBoxIDParameter.ParameterName = "prUserBoxID";
                    prUserBoxIDParameter.Direction = ParameterDirection.Input;
                    prUserBoxIDParameter.DbType = DbType.Int32;
                    prUserBoxIDParameter.Precision = 10;
                    prUserBoxIDParameter.Scale = 0;
                    if (prUserBoxID.HasValue)
                    {
                        prUserBoxIDParameter.Value = prUserBoxID.Value;
                    }
                    else
                    {
                        prUserBoxIDParameter.Size = -1;
                        prUserBoxIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserBoxIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrBoxGetReportClosedOperationResult resultRow = new PrBoxGetReportClosedOperationResult();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                resultRow.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));
                            if (fieldNames.Contains(@"CurrencyID") && !reader.IsDBNull(reader.GetOrdinal(@"CurrencyID")))
                                resultRow.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CurrencyID")), typeof(int));
                            else
                                resultRow.CurrencyID = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            if (fieldNames.Contains(@"Entidad") && !reader.IsDBNull(reader.GetOrdinal(@"Entidad")))
                                resultRow.Entidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Entidad")), typeof(string));
                            if (fieldNames.Contains(@"NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                resultRow.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                resultRow.NombreCliente = null;
                            if (fieldNames.Contains(@"Referencia1") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia1")))
                                resultRow.Referencia1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia1")), typeof(string));
                            else
                                resultRow.Referencia1 = null;
                            if (fieldNames.Contains(@"Referencia2") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia2")))
                                resultRow.Referencia2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia2")), typeof(string));
                            else
                                resultRow.Referencia2 = null;
                            if (fieldNames.Contains(@"Referencia3") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia3")))
                                resultRow.Referencia3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia3")), typeof(string));
                            else
                                resultRow.Referencia3 = null;
                            if (fieldNames.Contains(@"Referencia4") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia4")))
                                resultRow.Referencia4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia4")), typeof(string));
                            else
                                resultRow.Referencia4 = null;
                            if (fieldNames.Contains(@"Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                resultRow.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                resultRow.Concepto = null;
                            if (fieldNames.Contains(@"CodigoEmpleado") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoEmpleado")))
                                resultRow.CodigoEmpleado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoEmpleado")), typeof(string));
                            if (fieldNames.Contains(@"SubCategoria") && !reader.IsDBNull(reader.GetOrdinal(@"SubCategoria")))
                                resultRow.SubCategoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SubCategoria")), typeof(string));
                            if (fieldNames.Contains(@"Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                resultRow.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            if (fieldNames.Contains(@"ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                resultRow.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            if (fieldNames.Contains(@"MonedaLocal") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaLocal")))
                                resultRow.MonedaLocal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaLocal")), typeof(string));
                            else
                                resultRow.MonedaLocal = null;
                            if (fieldNames.Contains(@"MonedaExt") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaExt")))
                                resultRow.MonedaExt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaExt")), typeof(string));
                            else
                                resultRow.MonedaExt = null;
                            result.PrBoxGetReportClosedOperationResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrBoxGetReportClosedOperationResult resultRow = new PrBoxGetReportClosedOperationResult();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                resultRow.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));
                            if (fieldNames.Contains(@"CurrencyID") && !reader.IsDBNull(reader.GetOrdinal(@"CurrencyID")))
                                resultRow.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CurrencyID")), typeof(int));
                            else
                                resultRow.CurrencyID = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            if (fieldNames.Contains(@"Entidad") && !reader.IsDBNull(reader.GetOrdinal(@"Entidad")))
                                resultRow.Entidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Entidad")), typeof(string));
                            if (fieldNames.Contains(@"NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                resultRow.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                resultRow.NombreCliente = null;
                            if (fieldNames.Contains(@"Referencia1") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia1")))
                                resultRow.Referencia1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia1")), typeof(string));
                            else
                                resultRow.Referencia1 = null;
                            if (fieldNames.Contains(@"Referencia2") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia2")))
                                resultRow.Referencia2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia2")), typeof(string));
                            else
                                resultRow.Referencia2 = null;
                            if (fieldNames.Contains(@"Referencia3") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia3")))
                                resultRow.Referencia3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia3")), typeof(string));
                            else
                                resultRow.Referencia3 = null;
                            if (fieldNames.Contains(@"Referencia4") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia4")))
                                resultRow.Referencia4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia4")), typeof(string));
                            else
                                resultRow.Referencia4 = null;
                            if (fieldNames.Contains(@"Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                resultRow.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                resultRow.Concepto = null;
                            if (fieldNames.Contains(@"CodigoEmpleado") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoEmpleado")))
                                resultRow.CodigoEmpleado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoEmpleado")), typeof(string));
                            if (fieldNames.Contains(@"SubCategoria") && !reader.IsDBNull(reader.GetOrdinal(@"SubCategoria")))
                                resultRow.SubCategoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SubCategoria")), typeof(string));
                            if (fieldNames.Contains(@"Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                resultRow.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            if (fieldNames.Contains(@"ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                resultRow.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            if (fieldNames.Contains(@"MonedaLocal") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaLocal")))
                                resultRow.MonedaLocal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaLocal")), typeof(string));
                            else
                                resultRow.MonedaLocal = null;
                            if (fieldNames.Contains(@"MonedaExt") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaExt")))
                                resultRow.MonedaExt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaExt")), typeof(string));
                            else
                                resultRow.MonedaExt = null;
                            result.PrBoxGetReportClosedOperationResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrBoxGetReportClosedOperationResult resultRow = new PrBoxGetReportClosedOperationResult();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                resultRow.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));
                            if (fieldNames.Contains(@"CurrencyID") && !reader.IsDBNull(reader.GetOrdinal(@"CurrencyID")))
                                resultRow.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CurrencyID")), typeof(int));
                            else
                                resultRow.CurrencyID = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            if (fieldNames.Contains(@"Entidad") && !reader.IsDBNull(reader.GetOrdinal(@"Entidad")))
                                resultRow.Entidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Entidad")), typeof(string));
                            if (fieldNames.Contains(@"NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                resultRow.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                resultRow.NombreCliente = null;
                            if (fieldNames.Contains(@"Referencia1") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia1")))
                                resultRow.Referencia1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia1")), typeof(string));
                            else
                                resultRow.Referencia1 = null;
                            if (fieldNames.Contains(@"Referencia2") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia2")))
                                resultRow.Referencia2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia2")), typeof(string));
                            else
                                resultRow.Referencia2 = null;
                            if (fieldNames.Contains(@"Referencia3") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia3")))
                                resultRow.Referencia3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia3")), typeof(string));
                            else
                                resultRow.Referencia3 = null;
                            if (fieldNames.Contains(@"Referencia4") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia4")))
                                resultRow.Referencia4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia4")), typeof(string));
                            else
                                resultRow.Referencia4 = null;
                            if (fieldNames.Contains(@"Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                resultRow.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                resultRow.Concepto = null;
                            if (fieldNames.Contains(@"CodigoEmpleado") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoEmpleado")))
                                resultRow.CodigoEmpleado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoEmpleado")), typeof(string));
                            if (fieldNames.Contains(@"SubCategoria") && !reader.IsDBNull(reader.GetOrdinal(@"SubCategoria")))
                                resultRow.SubCategoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SubCategoria")), typeof(string));
                            if (fieldNames.Contains(@"Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                resultRow.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            if (fieldNames.Contains(@"ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                resultRow.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            if (fieldNames.Contains(@"MonedaLocal") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaLocal")))
                                resultRow.MonedaLocal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaLocal")), typeof(string));
                            else
                                resultRow.MonedaLocal = null;
                            if (fieldNames.Contains(@"MonedaExt") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaExt")))
                                resultRow.MonedaExt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaExt")), typeof(string));
                            else
                                resultRow.MonedaExt = null;
                            result.PrBoxGetReportClosedOperationResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrBoxGetReportClosedOperationResult resultRow = new PrBoxGetReportClosedOperationResult();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                resultRow.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));
                            if (fieldNames.Contains(@"CurrencyID") && !reader.IsDBNull(reader.GetOrdinal(@"CurrencyID")))
                                resultRow.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CurrencyID")), typeof(int));
                            else
                                resultRow.CurrencyID = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            if (fieldNames.Contains(@"Entidad") && !reader.IsDBNull(reader.GetOrdinal(@"Entidad")))
                                resultRow.Entidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Entidad")), typeof(string));
                            if (fieldNames.Contains(@"NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                resultRow.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                resultRow.NombreCliente = null;
                            if (fieldNames.Contains(@"Referencia1") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia1")))
                                resultRow.Referencia1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia1")), typeof(string));
                            else
                                resultRow.Referencia1 = null;
                            if (fieldNames.Contains(@"Referencia2") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia2")))
                                resultRow.Referencia2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia2")), typeof(string));
                            else
                                resultRow.Referencia2 = null;
                            if (fieldNames.Contains(@"Referencia3") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia3")))
                                resultRow.Referencia3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia3")), typeof(string));
                            else
                                resultRow.Referencia3 = null;
                            if (fieldNames.Contains(@"Referencia4") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia4")))
                                resultRow.Referencia4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia4")), typeof(string));
                            else
                                resultRow.Referencia4 = null;
                            if (fieldNames.Contains(@"Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                resultRow.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                resultRow.Concepto = null;
                            if (fieldNames.Contains(@"CodigoEmpleado") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoEmpleado")))
                                resultRow.CodigoEmpleado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoEmpleado")), typeof(string));
                            if (fieldNames.Contains(@"SubCategoria") && !reader.IsDBNull(reader.GetOrdinal(@"SubCategoria")))
                                resultRow.SubCategoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SubCategoria")), typeof(string));
                            if (fieldNames.Contains(@"Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                resultRow.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            if (fieldNames.Contains(@"ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                resultRow.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            if (fieldNames.Contains(@"MonedaLocal") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaLocal")))
                                resultRow.MonedaLocal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaLocal")), typeof(string));
                            else
                                resultRow.MonedaLocal = null;
                            if (fieldNames.Contains(@"MonedaExt") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaExt")))
                                resultRow.MonedaExt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaExt")), typeof(string));
                            else
                                resultRow.MonedaExt = null;
                            result.PrBoxGetReportClosedOperationResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrBoxGetReportClosedOperationResult resultRow = new PrBoxGetReportClosedOperationResult();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                resultRow.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));
                            if (fieldNames.Contains(@"CurrencyID") && !reader.IsDBNull(reader.GetOrdinal(@"CurrencyID")))
                                resultRow.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CurrencyID")), typeof(int));
                            else
                                resultRow.CurrencyID = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            if (fieldNames.Contains(@"Entidad") && !reader.IsDBNull(reader.GetOrdinal(@"Entidad")))
                                resultRow.Entidad = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Entidad")), typeof(string));
                            if (fieldNames.Contains(@"NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                resultRow.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                resultRow.NombreCliente = null;
                            if (fieldNames.Contains(@"Referencia1") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia1")))
                                resultRow.Referencia1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia1")), typeof(string));
                            else
                                resultRow.Referencia1 = null;
                            if (fieldNames.Contains(@"Referencia2") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia2")))
                                resultRow.Referencia2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia2")), typeof(string));
                            else
                                resultRow.Referencia2 = null;
                            if (fieldNames.Contains(@"Referencia3") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia3")))
                                resultRow.Referencia3 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia3")), typeof(string));
                            else
                                resultRow.Referencia3 = null;
                            if (fieldNames.Contains(@"Referencia4") && !reader.IsDBNull(reader.GetOrdinal(@"Referencia4")))
                                resultRow.Referencia4 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Referencia4")), typeof(string));
                            else
                                resultRow.Referencia4 = null;
                            if (fieldNames.Contains(@"Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                resultRow.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                resultRow.Concepto = null;
                            if (fieldNames.Contains(@"CodigoEmpleado") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoEmpleado")))
                                resultRow.CodigoEmpleado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoEmpleado")), typeof(string));
                            if (fieldNames.Contains(@"SubCategoria") && !reader.IsDBNull(reader.GetOrdinal(@"SubCategoria")))
                                resultRow.SubCategoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SubCategoria")), typeof(string));
                            if (fieldNames.Contains(@"Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                resultRow.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            if (fieldNames.Contains(@"ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                resultRow.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            if (fieldNames.Contains(@"MonedaLocal") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaLocal")))
                                resultRow.MonedaLocal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaLocal")), typeof(string));
                            else
                                resultRow.MonedaLocal = null;
                            if (fieldNames.Contains(@"MonedaExt") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaExt")))
                                resultRow.MonedaExt = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaExt")), typeof(string));
                            else
                                resultRow.MonedaExt = null;
                            result.PrBoxGetReportClosedOperationResults.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// listado de ingresos y egresos de efectivo de la caja
        /// </summary>
        public void PrBoxGetReportInputCash (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter, int? prBranchID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_input_cash";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// listado de ingresos y egresos de efectivo de la caja
        /// </summary>
        public async Task PrBoxGetReportInputCashAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter, int? prBranchID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_input_cash";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// listado de ingresos y egresos de efectivo de la caja
        /// </summary>
        public void PrBoxGetReportOutputCash (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter, int? prBranchID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_output_cash";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// listado de ingresos y egresos de efectivo de la caja
        /// </summary>
        public async Task PrBoxGetReportOutputCashAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter, int? prBranchID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_output_cash";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<PrBoxGetReportReconciliationDepositResult> PrBoxGetReportReconciliationDeposit (int? prUserID, string prTokenID, int? prCompanyID, string prEmployeeCode, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrBoxGetReportReconciliationDepositResult> result = new List<PrBoxGetReportReconciliationDepositResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_reconciliation_deposit";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prEmployeeCodeParameter = cmd.CreateParameter();
                    prEmployeeCodeParameter.ParameterName = "prEmployeeCode";
                    prEmployeeCodeParameter.Direction = ParameterDirection.Input;
                    prEmployeeCodeParameter.DbType = DbType.String;
                    prEmployeeCodeParameter.Size = 50;
                    if (prEmployeeCode != null)
                    {
                        prEmployeeCodeParameter.Value = prEmployeeCode;
                    }
                    else
                    {
                        prEmployeeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployeeCodeParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportReconciliationDepositResult row = new PrBoxGetReportReconciliationDepositResult();
                            if (fieldNames.Contains("FiltroCode") && !reader.IsDBNull(reader.GetOrdinal(@"FiltroCode")))
                                row.FiltroCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FiltroCode")), typeof(string));

                            if (fieldNames.Contains("FiltroName") && !reader.IsDBNull(reader.GetOrdinal(@"FiltroName")))
                                row.FiltroName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FiltroName")), typeof(string));
                            else
                                row.FiltroName = null;

                            if (fieldNames.Contains("NoGestor") && !reader.IsDBNull(reader.GetOrdinal(@"NoGestor")))
                                row.NoGestor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NoGestor")), typeof(string));

                            if (fieldNames.Contains("Gestor") && !reader.IsDBNull(reader.GetOrdinal(@"Gestor")))
                                row.Gestor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Gestor")), typeof(string));
                            else
                                row.Gestor = null;

                            if (fieldNames.Contains("NoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NoCliente")))
                                row.NoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NoCliente")), typeof(string));

                            if (fieldNames.Contains("Cliente") && !reader.IsDBNull(reader.GetOrdinal(@"Cliente")))
                                row.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cliente")), typeof(string));
                            else
                                row.Cliente = null;

                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                row.Fecha = null;

                            if (fieldNames.Contains("Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                row.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));

                            if (fieldNames.Contains("Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                row.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                row.Monto = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrBoxGetReportReconciliationDepositResult>> PrBoxGetReportReconciliationDepositAsync (int? prUserID, string prTokenID, int? prCompanyID, string prEmployeeCode, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrBoxGetReportReconciliationDepositResult> result = new List<PrBoxGetReportReconciliationDepositResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_reconciliation_deposit";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prEmployeeCodeParameter = cmd.CreateParameter();
                    prEmployeeCodeParameter.ParameterName = "prEmployeeCode";
                    prEmployeeCodeParameter.Direction = ParameterDirection.Input;
                    prEmployeeCodeParameter.DbType = DbType.String;
                    prEmployeeCodeParameter.Size = 50;
                    if (prEmployeeCode != null)
                    {
                        prEmployeeCodeParameter.Value = prEmployeeCode;
                    }
                    else
                    {
                        prEmployeeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployeeCodeParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrBoxGetReportReconciliationDepositResult row = new PrBoxGetReportReconciliationDepositResult();
                            if (fieldNames.Contains("FiltroCode") && !reader.IsDBNull(reader.GetOrdinal(@"FiltroCode")))
                                row.FiltroCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FiltroCode")), typeof(string));

                            if (fieldNames.Contains("FiltroName") && !reader.IsDBNull(reader.GetOrdinal(@"FiltroName")))
                                row.FiltroName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FiltroName")), typeof(string));
                            else
                                row.FiltroName = null;

                            if (fieldNames.Contains("NoGestor") && !reader.IsDBNull(reader.GetOrdinal(@"NoGestor")))
                                row.NoGestor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NoGestor")), typeof(string));

                            if (fieldNames.Contains("Gestor") && !reader.IsDBNull(reader.GetOrdinal(@"Gestor")))
                                row.Gestor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Gestor")), typeof(string));
                            else
                                row.Gestor = null;

                            if (fieldNames.Contains("NoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NoCliente")))
                                row.NoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NoCliente")), typeof(string));

                            if (fieldNames.Contains("Cliente") && !reader.IsDBNull(reader.GetOrdinal(@"Cliente")))
                                row.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cliente")), typeof(string));
                            else
                                row.Cliente = null;

                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                row.Fecha = null;

                            if (fieldNames.Contains("Documento") && !reader.IsDBNull(reader.GetOrdinal(@"Documento")))
                                row.Documento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Documento")), typeof(string));

                            if (fieldNames.Contains("Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                row.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                row.Monto = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener la lista de movimientos y sus comisiones.
        /// </summary>
        public List<PrCollectionGetReportCommisionProviderResult> PrCollectionGetReportCommisionProvider (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStart, DateTime? prEnd, int? prProviderID)
        {

            List<PrCollectionGetReportCommisionProviderResult> result = new List<PrCollectionGetReportCommisionProviderResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_commision_provider";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartParameter = cmd.CreateParameter();
                    prStartParameter.ParameterName = "prStart";
                    prStartParameter.Direction = ParameterDirection.Input;
                    prStartParameter.DbType = DbType.DateTime;
                    if (prStart.HasValue)
                    {
                        prStartParameter.Value = prStart.Value;
                    }
                    else
                    {
                        prStartParameter.Size = -1;
                        prStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartParameter);

                    DbParameter prEndParameter = cmd.CreateParameter();
                    prEndParameter.ParameterName = "prEnd";
                    prEndParameter.Direction = ParameterDirection.Input;
                    prEndParameter.DbType = DbType.DateTime;
                    if (prEnd.HasValue)
                    {
                        prEndParameter.Value = prEnd.Value;
                    }
                    else
                    {
                        prEndParameter.Size = -1;
                        prEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndParameter);

                    DbParameter prProviderIDParameter = cmd.CreateParameter();
                    prProviderIDParameter.ParameterName = "prProviderID";
                    prProviderIDParameter.Direction = ParameterDirection.Input;
                    prProviderIDParameter.DbType = DbType.Int32;
                    prProviderIDParameter.Precision = 10;
                    prProviderIDParameter.Scale = 0;
                    if (prProviderID.HasValue)
                    {
                        prProviderIDParameter.Value = prProviderID.Value;
                    }
                    else
                    {
                        prProviderIDParameter.Size = -1;
                        prProviderIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prProviderIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportCommisionProviderResult row = new PrCollectionGetReportCommisionProviderResult();
                            if (fieldNames.Contains("TelefonoCobrador") && !reader.IsDBNull(reader.GetOrdinal(@"TelefonoCobrador")))
                                row.TelefonoCobrador = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TelefonoCobrador")), typeof(string));
                            else
                                row.TelefonoCobrador = null;

                            if (fieldNames.Contains("NombreCobrador") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCobrador")))
                                row.NombreCobrador = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCobrador")), typeof(string));
                            else
                                row.NombreCobrador = null;

                            if (fieldNames.Contains("CodigoProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoProveedor")))
                                row.CodigoProveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoProveedor")), typeof(string));
                            else
                                row.CodigoProveedor = null;

                            if (fieldNames.Contains("NombreProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"NombreProveedor")))
                                row.NombreProveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreProveedor")), typeof(string));
                            else
                                row.NombreProveedor = null;

                            if (fieldNames.Contains("CodigoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoCliente")))
                                row.CodigoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoCliente")), typeof(string));
                            else
                                row.CodigoCliente = null;

                            if (fieldNames.Contains("NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                row.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                row.NombreCliente = null;

                            if (fieldNames.Contains("TelefonoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"TelefonoCliente")))
                                row.TelefonoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TelefonoCliente")), typeof(string));
                            else
                                row.TelefonoCliente = null;

                            if (fieldNames.Contains("CodigoDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoDesembolso")))
                                row.CodigoDesembolso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoDesembolso")), typeof(string));
                            else
                                row.CodigoDesembolso = null;

                            if (fieldNames.Contains("CodigoTransaccion") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoTransaccion")))
                                row.CodigoTransaccion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoTransaccion")), typeof(string));
                            else
                                row.CodigoTransaccion = null;

                            if (fieldNames.Contains("FechaTransaccion") && !reader.IsDBNull(reader.GetOrdinal(@"FechaTransaccion")))
                                row.FechaTransaccion = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FechaTransaccion")), typeof(System.DateTime));
                            else
                                row.FechaTransaccion = null;

                            if (fieldNames.Contains("TipoTransaccion") && !reader.IsDBNull(reader.GetOrdinal(@"TipoTransaccion")))
                                row.TipoTransaccion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TipoTransaccion")), typeof(string));
                            else
                                row.TipoTransaccion = null;

                            if (fieldNames.Contains("FrecuenciaPagoMovimiento") && !reader.IsDBNull(reader.GetOrdinal(@"FrecuenciaPagoMovimiento")))
                                row.FrecuenciaPagoMovimiento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FrecuenciaPagoMovimiento")), typeof(string));
                            else
                                row.FrecuenciaPagoMovimiento = null;

                            if (fieldNames.Contains("PrimerFechaPagoMovimiento") && !reader.IsDBNull(reader.GetOrdinal(@"PrimerFechaPagoMovimiento")))
                                row.PrimerFechaPagoMovimiento = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"PrimerFechaPagoMovimiento")), typeof(System.DateTime));
                            else
                                row.PrimerFechaPagoMovimiento = null;

                            if (fieldNames.Contains("Balance") && !reader.IsDBNull(reader.GetOrdinal(@"Balance")))
                                row.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Balance")), typeof(decimal));
                            else
                                row.Balance = null;

                            if (fieldNames.Contains("SaldoInicial") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoInicial")))
                                row.SaldoInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoInicial")), typeof(decimal));
                            else
                                row.SaldoInicial = null;

                            if (fieldNames.Contains("Abono") && !reader.IsDBNull(reader.GetOrdinal(@"Abono")))
                                row.Abono = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Abono")), typeof(decimal));
                            else
                                row.Abono = null;

                            if (fieldNames.Contains("SaldoFinal") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoFinal")))
                                row.SaldoFinal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoFinal")), typeof(decimal));
                            else
                                row.SaldoFinal = null;

                            if (fieldNames.Contains("InteresTotalDelAbono") && !reader.IsDBNull(reader.GetOrdinal(@"InteresTotalDelAbono")))
                                row.InteresTotalDelAbono = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"InteresTotalDelAbono")), typeof(decimal));
                            else
                                row.InteresTotalDelAbono = null;

                            if (fieldNames.Contains("CapitalTotalDelAbono") && !reader.IsDBNull(reader.GetOrdinal(@"CapitalTotalDelAbono")))
                                row.CapitalTotalDelAbono = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CapitalTotalDelAbono")), typeof(decimal));
                            else
                                row.CapitalTotalDelAbono = null;

                            if (fieldNames.Contains("CapitalDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"CapitalDesembolso")))
                                row.CapitalDesembolso = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CapitalDesembolso")), typeof(decimal));
                            else
                                row.CapitalDesembolso = null;

                            if (fieldNames.Contains("InterestTotalDelCredito") && !reader.IsDBNull(reader.GetOrdinal(@"InterestTotalDelCredito")))
                                row.InterestTotalDelCredito = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"InterestTotalDelCredito")), typeof(decimal));
                            else
                                row.InterestTotalDelCredito = null;

                            if (fieldNames.Contains("GastoFijoMonto") && !reader.IsDBNull(reader.GetOrdinal(@"GastoFijoMonto")))
                                row.GastoFijoMonto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GastoFijoMonto")), typeof(decimal));
                            else
                                row.GastoFijoMonto = null;

                            if (fieldNames.Contains("GastoFijoPorcentaje") && !reader.IsDBNull(reader.GetOrdinal(@"GastoFijoPorcentaje")))
                                row.GastoFijoPorcentaje = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GastoFijoPorcentaje")), typeof(decimal));
                            else
                                row.GastoFijoPorcentaje = null;

                            if (fieldNames.Contains("RendimientoCompartido") && !reader.IsDBNull(reader.GetOrdinal(@"RendimientoCompartido")))
                                row.RendimientoCompartido = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"RendimientoCompartido")), typeof(decimal));
                            else
                                row.RendimientoCompartido = null;

                            if (fieldNames.Contains("RendimientoXComision") && !reader.IsDBNull(reader.GetOrdinal(@"RendimientoXComision")))
                                row.RendimientoXComision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"RendimientoXComision")), typeof(decimal));
                            else
                                row.RendimientoXComision = null;

                            if (fieldNames.Contains("RendimientoXProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"RendimientoXProveedor")))
                                row.RendimientoXProveedor = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"RendimientoXProveedor")), typeof(decimal));
                            else
                                row.RendimientoXProveedor = null;

                            if (fieldNames.Contains("DepositoAProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"DepositoAProveedor")))
                                row.DepositoAProveedor = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DepositoAProveedor")), typeof(decimal));
                            else
                                row.DepositoAProveedor = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener la lista de movimientos y sus comisiones.
        /// </summary>
        public async Task<List<PrCollectionGetReportCommisionProviderResult>> PrCollectionGetReportCommisionProviderAsync (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStart, DateTime? prEnd, int? prProviderID)
        {

            List<PrCollectionGetReportCommisionProviderResult> result = new List<PrCollectionGetReportCommisionProviderResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_commision_provider";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartParameter = cmd.CreateParameter();
                    prStartParameter.ParameterName = "prStart";
                    prStartParameter.Direction = ParameterDirection.Input;
                    prStartParameter.DbType = DbType.DateTime;
                    if (prStart.HasValue)
                    {
                        prStartParameter.Value = prStart.Value;
                    }
                    else
                    {
                        prStartParameter.Size = -1;
                        prStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartParameter);

                    DbParameter prEndParameter = cmd.CreateParameter();
                    prEndParameter.ParameterName = "prEnd";
                    prEndParameter.Direction = ParameterDirection.Input;
                    prEndParameter.DbType = DbType.DateTime;
                    if (prEnd.HasValue)
                    {
                        prEndParameter.Value = prEnd.Value;
                    }
                    else
                    {
                        prEndParameter.Size = -1;
                        prEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndParameter);

                    DbParameter prProviderIDParameter = cmd.CreateParameter();
                    prProviderIDParameter.ParameterName = "prProviderID";
                    prProviderIDParameter.Direction = ParameterDirection.Input;
                    prProviderIDParameter.DbType = DbType.Int32;
                    prProviderIDParameter.Precision = 10;
                    prProviderIDParameter.Scale = 0;
                    if (prProviderID.HasValue)
                    {
                        prProviderIDParameter.Value = prProviderID.Value;
                    }
                    else
                    {
                        prProviderIDParameter.Size = -1;
                        prProviderIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prProviderIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportCommisionProviderResult row = new PrCollectionGetReportCommisionProviderResult();
                            if (fieldNames.Contains("TelefonoCobrador") && !reader.IsDBNull(reader.GetOrdinal(@"TelefonoCobrador")))
                                row.TelefonoCobrador = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TelefonoCobrador")), typeof(string));
                            else
                                row.TelefonoCobrador = null;

                            if (fieldNames.Contains("NombreCobrador") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCobrador")))
                                row.NombreCobrador = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCobrador")), typeof(string));
                            else
                                row.NombreCobrador = null;

                            if (fieldNames.Contains("CodigoProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoProveedor")))
                                row.CodigoProveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoProveedor")), typeof(string));
                            else
                                row.CodigoProveedor = null;

                            if (fieldNames.Contains("NombreProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"NombreProveedor")))
                                row.NombreProveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreProveedor")), typeof(string));
                            else
                                row.NombreProveedor = null;

                            if (fieldNames.Contains("CodigoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoCliente")))
                                row.CodigoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoCliente")), typeof(string));
                            else
                                row.CodigoCliente = null;

                            if (fieldNames.Contains("NombreCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NombreCliente")))
                                row.NombreCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreCliente")), typeof(string));
                            else
                                row.NombreCliente = null;

                            if (fieldNames.Contains("TelefonoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"TelefonoCliente")))
                                row.TelefonoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TelefonoCliente")), typeof(string));
                            else
                                row.TelefonoCliente = null;

                            if (fieldNames.Contains("CodigoDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoDesembolso")))
                                row.CodigoDesembolso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoDesembolso")), typeof(string));
                            else
                                row.CodigoDesembolso = null;

                            if (fieldNames.Contains("CodigoTransaccion") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoTransaccion")))
                                row.CodigoTransaccion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoTransaccion")), typeof(string));
                            else
                                row.CodigoTransaccion = null;

                            if (fieldNames.Contains("FechaTransaccion") && !reader.IsDBNull(reader.GetOrdinal(@"FechaTransaccion")))
                                row.FechaTransaccion = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FechaTransaccion")), typeof(System.DateTime));
                            else
                                row.FechaTransaccion = null;

                            if (fieldNames.Contains("TipoTransaccion") && !reader.IsDBNull(reader.GetOrdinal(@"TipoTransaccion")))
                                row.TipoTransaccion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TipoTransaccion")), typeof(string));
                            else
                                row.TipoTransaccion = null;

                            if (fieldNames.Contains("FrecuenciaPagoMovimiento") && !reader.IsDBNull(reader.GetOrdinal(@"FrecuenciaPagoMovimiento")))
                                row.FrecuenciaPagoMovimiento = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FrecuenciaPagoMovimiento")), typeof(string));
                            else
                                row.FrecuenciaPagoMovimiento = null;

                            if (fieldNames.Contains("PrimerFechaPagoMovimiento") && !reader.IsDBNull(reader.GetOrdinal(@"PrimerFechaPagoMovimiento")))
                                row.PrimerFechaPagoMovimiento = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"PrimerFechaPagoMovimiento")), typeof(System.DateTime));
                            else
                                row.PrimerFechaPagoMovimiento = null;

                            if (fieldNames.Contains("Balance") && !reader.IsDBNull(reader.GetOrdinal(@"Balance")))
                                row.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Balance")), typeof(decimal));
                            else
                                row.Balance = null;

                            if (fieldNames.Contains("SaldoInicial") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoInicial")))
                                row.SaldoInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoInicial")), typeof(decimal));
                            else
                                row.SaldoInicial = null;

                            if (fieldNames.Contains("Abono") && !reader.IsDBNull(reader.GetOrdinal(@"Abono")))
                                row.Abono = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Abono")), typeof(decimal));
                            else
                                row.Abono = null;

                            if (fieldNames.Contains("SaldoFinal") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoFinal")))
                                row.SaldoFinal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoFinal")), typeof(decimal));
                            else
                                row.SaldoFinal = null;

                            if (fieldNames.Contains("InteresTotalDelAbono") && !reader.IsDBNull(reader.GetOrdinal(@"InteresTotalDelAbono")))
                                row.InteresTotalDelAbono = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"InteresTotalDelAbono")), typeof(decimal));
                            else
                                row.InteresTotalDelAbono = null;

                            if (fieldNames.Contains("CapitalTotalDelAbono") && !reader.IsDBNull(reader.GetOrdinal(@"CapitalTotalDelAbono")))
                                row.CapitalTotalDelAbono = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CapitalTotalDelAbono")), typeof(decimal));
                            else
                                row.CapitalTotalDelAbono = null;

                            if (fieldNames.Contains("CapitalDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"CapitalDesembolso")))
                                row.CapitalDesembolso = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CapitalDesembolso")), typeof(decimal));
                            else
                                row.CapitalDesembolso = null;

                            if (fieldNames.Contains("InterestTotalDelCredito") && !reader.IsDBNull(reader.GetOrdinal(@"InterestTotalDelCredito")))
                                row.InterestTotalDelCredito = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"InterestTotalDelCredito")), typeof(decimal));
                            else
                                row.InterestTotalDelCredito = null;

                            if (fieldNames.Contains("GastoFijoMonto") && !reader.IsDBNull(reader.GetOrdinal(@"GastoFijoMonto")))
                                row.GastoFijoMonto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GastoFijoMonto")), typeof(decimal));
                            else
                                row.GastoFijoMonto = null;

                            if (fieldNames.Contains("GastoFijoPorcentaje") && !reader.IsDBNull(reader.GetOrdinal(@"GastoFijoPorcentaje")))
                                row.GastoFijoPorcentaje = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"GastoFijoPorcentaje")), typeof(decimal));
                            else
                                row.GastoFijoPorcentaje = null;

                            if (fieldNames.Contains("RendimientoCompartido") && !reader.IsDBNull(reader.GetOrdinal(@"RendimientoCompartido")))
                                row.RendimientoCompartido = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"RendimientoCompartido")), typeof(decimal));
                            else
                                row.RendimientoCompartido = null;

                            if (fieldNames.Contains("RendimientoXComision") && !reader.IsDBNull(reader.GetOrdinal(@"RendimientoXComision")))
                                row.RendimientoXComision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"RendimientoXComision")), typeof(decimal));
                            else
                                row.RendimientoXComision = null;

                            if (fieldNames.Contains("RendimientoXProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"RendimientoXProveedor")))
                                row.RendimientoXProveedor = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"RendimientoXProveedor")), typeof(decimal));
                            else
                                row.RendimientoXProveedor = null;

                            if (fieldNames.Contains("DepositoAProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"DepositoAProveedor")))
                                row.DepositoAProveedor = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DepositoAProveedor")), typeof(decimal));
                            else
                                row.DepositoAProveedor = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de clientes de los gestores de credito
        /// </summary>
        public List<PrCollectionGetReportCustomerResult> PrCollectionGetReportCustomer (int? prUserID, string prToken, int? prCompanyID)
        {

            List<PrCollectionGetReportCustomerResult> result = new List<PrCollectionGetReportCustomerResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_customer";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenParameter = cmd.CreateParameter();
                    prTokenParameter.ParameterName = "prToken";
                    prTokenParameter.Direction = ParameterDirection.Input;
                    prTokenParameter.DbType = DbType.String;
                    prTokenParameter.Size = 50;
                    if (prToken != null)
                    {
                        prTokenParameter.Value = prToken;
                    }
                    else
                    {
                        prTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportCustomerResult row = new PrCollectionGetReportCustomerResult();
                            if (fieldNames.Contains("entityID") && !reader.IsDBNull(reader.GetOrdinal(@"entityID")))
                                row.EntityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"entityID")), typeof(int));

                            if (fieldNames.Contains("customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                row.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));

                            if (fieldNames.Contains("Gestor") && !reader.IsDBNull(reader.GetOrdinal(@"Gestor")))
                                row.Gestor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Gestor")), typeof(string));

                            if (fieldNames.Contains("CodigoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoCliente")))
                                row.CodigoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoCliente")), typeof(string));

                            if (fieldNames.Contains("Cliente") && !reader.IsDBNull(reader.GetOrdinal(@"Cliente")))
                                row.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cliente")), typeof(string));
                            else
                                row.Cliente = null;

                            if (fieldNames.Contains("TipoTelefono") && !reader.IsDBNull(reader.GetOrdinal(@"TipoTelefono")))
                                row.TipoTelefono = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TipoTelefono")), typeof(string));
                            else
                                row.TipoTelefono = null;

                            if (fieldNames.Contains("Telefono") && !reader.IsDBNull(reader.GetOrdinal(@"Telefono")))
                                row.Telefono = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Telefono")), typeof(string));
                            else
                                row.Telefono = null;

                            if (fieldNames.Contains("Factura") && !reader.IsDBNull(reader.GetOrdinal(@"Factura")))
                                row.Factura = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Factura")), typeof(string));

                            if (fieldNames.Contains("dias_atrazo") && !reader.IsDBNull(reader.GetOrdinal(@"dias_atrazo")))
                                row.DiasAtrazo = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dias_atrazo")), typeof(long));
                            else
                                row.DiasAtrazo = null;

                            if (fieldNames.Contains("dias_proximo_pago") && !reader.IsDBNull(reader.GetOrdinal(@"dias_proximo_pago")))
                                row.DiasProximoPago = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dias_proximo_pago")), typeof(long));
                            else
                                row.DiasProximoPago = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de clientes de los gestores de credito
        /// </summary>
        public async Task<List<PrCollectionGetReportCustomerResult>> PrCollectionGetReportCustomerAsync (int? prUserID, string prToken, int? prCompanyID)
        {

            List<PrCollectionGetReportCustomerResult> result = new List<PrCollectionGetReportCustomerResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_customer";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenParameter = cmd.CreateParameter();
                    prTokenParameter.ParameterName = "prToken";
                    prTokenParameter.Direction = ParameterDirection.Input;
                    prTokenParameter.DbType = DbType.String;
                    prTokenParameter.Size = 50;
                    if (prToken != null)
                    {
                        prTokenParameter.Value = prToken;
                    }
                    else
                    {
                        prTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportCustomerResult row = new PrCollectionGetReportCustomerResult();
                            if (fieldNames.Contains("entityID") && !reader.IsDBNull(reader.GetOrdinal(@"entityID")))
                                row.EntityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"entityID")), typeof(int));

                            if (fieldNames.Contains("customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                row.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));

                            if (fieldNames.Contains("Gestor") && !reader.IsDBNull(reader.GetOrdinal(@"Gestor")))
                                row.Gestor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Gestor")), typeof(string));

                            if (fieldNames.Contains("CodigoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoCliente")))
                                row.CodigoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoCliente")), typeof(string));

                            if (fieldNames.Contains("Cliente") && !reader.IsDBNull(reader.GetOrdinal(@"Cliente")))
                                row.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cliente")), typeof(string));
                            else
                                row.Cliente = null;

                            if (fieldNames.Contains("TipoTelefono") && !reader.IsDBNull(reader.GetOrdinal(@"TipoTelefono")))
                                row.TipoTelefono = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TipoTelefono")), typeof(string));
                            else
                                row.TipoTelefono = null;

                            if (fieldNames.Contains("Telefono") && !reader.IsDBNull(reader.GetOrdinal(@"Telefono")))
                                row.Telefono = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Telefono")), typeof(string));
                            else
                                row.Telefono = null;

                            if (fieldNames.Contains("Factura") && !reader.IsDBNull(reader.GetOrdinal(@"Factura")))
                                row.Factura = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Factura")), typeof(string));

                            if (fieldNames.Contains("dias_atrazo") && !reader.IsDBNull(reader.GetOrdinal(@"dias_atrazo")))
                                row.DiasAtrazo = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dias_atrazo")), typeof(long));
                            else
                                row.DiasAtrazo = null;

                            if (fieldNames.Contains("dias_proximo_pago") && !reader.IsDBNull(reader.GetOrdinal(@"dias_proximo_pago")))
                                row.DiasProximoPago = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dias_proximo_pago")), typeof(long));
                            else
                                row.DiasProximoPago = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Reporte para ver el calculo de comisiones de los gestores
        /// </summary>
        public List<PrCollectionGetReportDetalleTransactionResult> PrCollectionGetReportDetalleTransaction (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            List<PrCollectionGetReportDetalleTransactionResult> result = new List<PrCollectionGetReportDetalleTransactionResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_detalle_transaction";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportDetalleTransactionResult row = new PrCollectionGetReportDetalleTransactionResult();
                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("mes") && !reader.IsDBNull(reader.GetOrdinal(@"mes")))
                                row.Mes = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mes")), typeof(string));
                            else
                                row.Mes = null;

                            if (fieldNames.Contains("comision10") && !reader.IsDBNull(reader.GetOrdinal(@"comision10")))
                                row.Comision10 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision10")), typeof(decimal));
                            else
                                row.Comision10 = null;

                            if (fieldNames.Contains("comision20") && !reader.IsDBNull(reader.GetOrdinal(@"comision20")))
                                row.Comision20 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision20")), typeof(decimal));
                            else
                                row.Comision20 = null;

                            if (fieldNames.Contains("comision30") && !reader.IsDBNull(reader.GetOrdinal(@"comision30")))
                                row.Comision30 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision30")), typeof(decimal));
                            else
                                row.Comision30 = null;

                            if (fieldNames.Contains("comision40") && !reader.IsDBNull(reader.GetOrdinal(@"comision40")))
                                row.Comision40 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision40")), typeof(decimal));
                            else
                                row.Comision40 = null;

                            if (fieldNames.Contains("comision50") && !reader.IsDBNull(reader.GetOrdinal(@"comision50")))
                                row.Comision50 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision50")), typeof(decimal));
                            else
                                row.Comision50 = null;

                            if (fieldNames.Contains("comision100") && !reader.IsDBNull(reader.GetOrdinal(@"comision100")))
                                row.Comision100 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision100")), typeof(decimal));
                            else
                                row.Comision100 = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Reporte para ver el calculo de comisiones de los gestores
        /// </summary>
        public async Task<List<PrCollectionGetReportDetalleTransactionResult>> PrCollectionGetReportDetalleTransactionAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            List<PrCollectionGetReportDetalleTransactionResult> result = new List<PrCollectionGetReportDetalleTransactionResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_detalle_transaction";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportDetalleTransactionResult row = new PrCollectionGetReportDetalleTransactionResult();
                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("mes") && !reader.IsDBNull(reader.GetOrdinal(@"mes")))
                                row.Mes = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mes")), typeof(string));
                            else
                                row.Mes = null;

                            if (fieldNames.Contains("comision10") && !reader.IsDBNull(reader.GetOrdinal(@"comision10")))
                                row.Comision10 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision10")), typeof(decimal));
                            else
                                row.Comision10 = null;

                            if (fieldNames.Contains("comision20") && !reader.IsDBNull(reader.GetOrdinal(@"comision20")))
                                row.Comision20 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision20")), typeof(decimal));
                            else
                                row.Comision20 = null;

                            if (fieldNames.Contains("comision30") && !reader.IsDBNull(reader.GetOrdinal(@"comision30")))
                                row.Comision30 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision30")), typeof(decimal));
                            else
                                row.Comision30 = null;

                            if (fieldNames.Contains("comision40") && !reader.IsDBNull(reader.GetOrdinal(@"comision40")))
                                row.Comision40 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision40")), typeof(decimal));
                            else
                                row.Comision40 = null;

                            if (fieldNames.Contains("comision50") && !reader.IsDBNull(reader.GetOrdinal(@"comision50")))
                                row.Comision50 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision50")), typeof(decimal));
                            else
                                row.Comision50 = null;

                            if (fieldNames.Contains("comision100") && !reader.IsDBNull(reader.GetOrdinal(@"comision100")))
                                row.Comision100 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comision100")), typeof(decimal));
                            else
                                row.Comision100 = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PrCollectionGetReportDocumentsCreditResult> PrCollectionGetReportDocumentsCredit (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prDateStart, DateTime? prDateEnd)
        {

            List<PrCollectionGetReportDocumentsCreditResult> result = new List<PrCollectionGetReportDocumentsCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_documents_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDateStartParameter = cmd.CreateParameter();
                    prDateStartParameter.ParameterName = "prDateStart";
                    prDateStartParameter.Direction = ParameterDirection.Input;
                    prDateStartParameter.DbType = DbType.DateTime;
                    if (prDateStart.HasValue)
                    {
                        prDateStartParameter.Value = prDateStart.Value;
                    }
                    else
                    {
                        prDateStartParameter.Size = -1;
                        prDateStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateStartParameter);

                    DbParameter prDateEndParameter = cmd.CreateParameter();
                    prDateEndParameter.ParameterName = "prDateEnd";
                    prDateEndParameter.Direction = ParameterDirection.Input;
                    prDateEndParameter.DbType = DbType.DateTime;
                    if (prDateEnd.HasValue)
                    {
                        prDateEndParameter.Value = prDateEnd.Value;
                    }
                    else
                    {
                        prDateEndParameter.Size = -1;
                        prDateEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateEndParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportDocumentsCreditResult row = new PrCollectionGetReportDocumentsCreditResult();
                            if (fieldNames.Contains("orden") && !reader.IsDBNull(reader.GetOrdinal(@"orden")))
                                row.Orden = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"orden")), typeof(string));
                            else
                                row.Orden = null;

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("customerCreatedOn") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreatedOn")))
                                row.CustomerCreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreatedOn")), typeof(System.DateTime));
                            else
                                row.CustomerCreatedOn = null;

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("customerName") && !reader.IsDBNull(reader.GetOrdinal(@"customerName")))
                                row.CustomerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerName")), typeof(string));
                            else
                                row.CustomerName = null;

                            if (fieldNames.Contains("documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                row.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));

                            if (fieldNames.Contains("comercialName") && !reader.IsDBNull(reader.GetOrdinal(@"comercialName")))
                                row.ComercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comercialName")), typeof(string));
                            else
                                row.ComercialName = null;

                            if (fieldNames.Contains("identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                row.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));

                            if (fieldNames.Contains("sexo") && !reader.IsDBNull(reader.GetOrdinal(@"sexo")))
                                row.Sexo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sexo")), typeof(string));
                            else
                                row.Sexo = null;

                            if (fieldNames.Contains("location") && !reader.IsDBNull(reader.GetOrdinal(@"location")))
                                row.Location = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"location")), typeof(string));
                            else
                                row.Location = null;

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("statusCivil") && !reader.IsDBNull(reader.GetOrdinal(@"statusCivil")))
                                row.StatusCivil = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusCivil")), typeof(string));
                            else
                                row.StatusCivil = null;

                            if (fieldNames.Contains("term") && !reader.IsDBNull(reader.GetOrdinal(@"term")))
                                row.Term = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"term")), typeof(int));

                            if (fieldNames.Contains("interes") && !reader.IsDBNull(reader.GetOrdinal(@"interes")))
                                row.Interes = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interes")), typeof(decimal));

                            if (fieldNames.Contains("amountDocument") && !reader.IsDBNull(reader.GetOrdinal(@"amountDocument")))
                                row.AmountDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountDocument")), typeof(decimal));

                            if (fieldNames.Contains("dateDocument") && !reader.IsDBNull(reader.GetOrdinal(@"dateDocument")))
                                row.DateDocument = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateDocument")), typeof(System.DateTime));

                            if (fieldNames.Contains("dateLastShareDocument") && !reader.IsDBNull(reader.GetOrdinal(@"dateLastShareDocument")))
                                row.DateLastShareDocument = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateLastShareDocument")), typeof(System.DateTime));
                            else
                                row.DateLastShareDocument = null;

                            if (fieldNames.Contains("deudaTotal") && !reader.IsDBNull(reader.GetOrdinal(@"deudaTotal")))
                                row.DeudaTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deudaTotal")), typeof(decimal));
                            else
                                row.DeudaTotal = null;

                            if (fieldNames.Contains("montoPagado") && !reader.IsDBNull(reader.GetOrdinal(@"montoPagado")))
                                row.MontoPagado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoPagado")), typeof(decimal));
                            else
                                row.MontoPagado = null;

                            if (fieldNames.Contains("avance") && !reader.IsDBNull(reader.GetOrdinal(@"avance")))
                                row.Avance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"avance")), typeof(decimal));
                            else
                                row.Avance = null;

                            if (fieldNames.Contains("saldo") && !reader.IsDBNull(reader.GetOrdinal(@"saldo")))
                                row.Saldo = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"saldo")), typeof(decimal));

                            if (fieldNames.Contains("Orden") && !reader.IsDBNull(reader.GetOrdinal(@"Orden")))
                                row.Orden1 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Orden")), typeof(int));
                            else
                                row.Orden1 = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));

                            if (fieldNames.Contains("statusCustomer") && !reader.IsDBNull(reader.GetOrdinal(@"statusCustomer")))
                                row.StatusCustomer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusCustomer")), typeof(string));

                            if (fieldNames.Contains("statusName") && !reader.IsDBNull(reader.GetOrdinal(@"statusName")))
                                row.StatusName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusName")), typeof(string));
                            else
                                row.StatusName = null;

                            if (fieldNames.Contains("periodPay") && !reader.IsDBNull(reader.GetOrdinal(@"periodPay")))
                                row.PeriodPay = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"periodPay")), typeof(string));
                            else
                                row.PeriodPay = null;

                            if (fieldNames.Contains("customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                row.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));

                            if (fieldNames.Contains("2025-06-24") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-24")))
                                row._2025_06_24 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-24")), typeof(decimal));
                            else
                                row._2025_06_24 = null;

                            if (fieldNames.Contains("2025-06-23") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-23")))
                                row._2025_06_23 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-23")), typeof(decimal));
                            else
                                row._2025_06_23 = null;

                            if (fieldNames.Contains("2025-06-22") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-22")))
                                row._2025_06_22 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-22")), typeof(decimal));
                            else
                                row._2025_06_22 = null;

                            if (fieldNames.Contains("2025-06-21") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-21")))
                                row._2025_06_21 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-21")), typeof(decimal));
                            else
                                row._2025_06_21 = null;

                            if (fieldNames.Contains("2025-06-20") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-20")))
                                row._2025_06_20 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-20")), typeof(decimal));
                            else
                                row._2025_06_20 = null;

                            if (fieldNames.Contains("2025-06-19") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-19")))
                                row._2025_06_19 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-19")), typeof(decimal));
                            else
                                row._2025_06_19 = null;

                            if (fieldNames.Contains("2025-06-18") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-18")))
                                row._2025_06_18 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-18")), typeof(decimal));
                            else
                                row._2025_06_18 = null;

                            if (fieldNames.Contains("2025-06-17") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-17")))
                                row._2025_06_17 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-17")), typeof(decimal));
                            else
                                row._2025_06_17 = null;

                            if (fieldNames.Contains("2025-06-16") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-16")))
                                row._2025_06_16 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-16")), typeof(decimal));
                            else
                                row._2025_06_16 = null;

                            if (fieldNames.Contains("2025-06-15") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-15")))
                                row._2025_06_15 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-15")), typeof(decimal));
                            else
                                row._2025_06_15 = null;

                            if (fieldNames.Contains("2025-06-14") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-14")))
                                row._2025_06_14 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-14")), typeof(decimal));
                            else
                                row._2025_06_14 = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrCollectionGetReportDocumentsCreditResult>> PrCollectionGetReportDocumentsCreditAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prDateStart, DateTime? prDateEnd)
        {

            List<PrCollectionGetReportDocumentsCreditResult> result = new List<PrCollectionGetReportDocumentsCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_documents_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDateStartParameter = cmd.CreateParameter();
                    prDateStartParameter.ParameterName = "prDateStart";
                    prDateStartParameter.Direction = ParameterDirection.Input;
                    prDateStartParameter.DbType = DbType.DateTime;
                    if (prDateStart.HasValue)
                    {
                        prDateStartParameter.Value = prDateStart.Value;
                    }
                    else
                    {
                        prDateStartParameter.Size = -1;
                        prDateStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateStartParameter);

                    DbParameter prDateEndParameter = cmd.CreateParameter();
                    prDateEndParameter.ParameterName = "prDateEnd";
                    prDateEndParameter.Direction = ParameterDirection.Input;
                    prDateEndParameter.DbType = DbType.DateTime;
                    if (prDateEnd.HasValue)
                    {
                        prDateEndParameter.Value = prDateEnd.Value;
                    }
                    else
                    {
                        prDateEndParameter.Size = -1;
                        prDateEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateEndParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportDocumentsCreditResult row = new PrCollectionGetReportDocumentsCreditResult();
                            if (fieldNames.Contains("orden") && !reader.IsDBNull(reader.GetOrdinal(@"orden")))
                                row.Orden = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"orden")), typeof(string));
                            else
                                row.Orden = null;

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("customerCreatedOn") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreatedOn")))
                                row.CustomerCreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreatedOn")), typeof(System.DateTime));
                            else
                                row.CustomerCreatedOn = null;

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("customerName") && !reader.IsDBNull(reader.GetOrdinal(@"customerName")))
                                row.CustomerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerName")), typeof(string));
                            else
                                row.CustomerName = null;

                            if (fieldNames.Contains("documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                row.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));

                            if (fieldNames.Contains("comercialName") && !reader.IsDBNull(reader.GetOrdinal(@"comercialName")))
                                row.ComercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comercialName")), typeof(string));
                            else
                                row.ComercialName = null;

                            if (fieldNames.Contains("identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                row.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));

                            if (fieldNames.Contains("sexo") && !reader.IsDBNull(reader.GetOrdinal(@"sexo")))
                                row.Sexo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sexo")), typeof(string));
                            else
                                row.Sexo = null;

                            if (fieldNames.Contains("location") && !reader.IsDBNull(reader.GetOrdinal(@"location")))
                                row.Location = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"location")), typeof(string));
                            else
                                row.Location = null;

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("statusCivil") && !reader.IsDBNull(reader.GetOrdinal(@"statusCivil")))
                                row.StatusCivil = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusCivil")), typeof(string));
                            else
                                row.StatusCivil = null;

                            if (fieldNames.Contains("term") && !reader.IsDBNull(reader.GetOrdinal(@"term")))
                                row.Term = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"term")), typeof(int));

                            if (fieldNames.Contains("interes") && !reader.IsDBNull(reader.GetOrdinal(@"interes")))
                                row.Interes = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interes")), typeof(decimal));

                            if (fieldNames.Contains("amountDocument") && !reader.IsDBNull(reader.GetOrdinal(@"amountDocument")))
                                row.AmountDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountDocument")), typeof(decimal));

                            if (fieldNames.Contains("dateDocument") && !reader.IsDBNull(reader.GetOrdinal(@"dateDocument")))
                                row.DateDocument = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateDocument")), typeof(System.DateTime));

                            if (fieldNames.Contains("dateLastShareDocument") && !reader.IsDBNull(reader.GetOrdinal(@"dateLastShareDocument")))
                                row.DateLastShareDocument = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateLastShareDocument")), typeof(System.DateTime));
                            else
                                row.DateLastShareDocument = null;

                            if (fieldNames.Contains("deudaTotal") && !reader.IsDBNull(reader.GetOrdinal(@"deudaTotal")))
                                row.DeudaTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deudaTotal")), typeof(decimal));
                            else
                                row.DeudaTotal = null;

                            if (fieldNames.Contains("montoPagado") && !reader.IsDBNull(reader.GetOrdinal(@"montoPagado")))
                                row.MontoPagado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoPagado")), typeof(decimal));
                            else
                                row.MontoPagado = null;

                            if (fieldNames.Contains("avance") && !reader.IsDBNull(reader.GetOrdinal(@"avance")))
                                row.Avance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"avance")), typeof(decimal));
                            else
                                row.Avance = null;

                            if (fieldNames.Contains("saldo") && !reader.IsDBNull(reader.GetOrdinal(@"saldo")))
                                row.Saldo = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"saldo")), typeof(decimal));

                            if (fieldNames.Contains("Orden") && !reader.IsDBNull(reader.GetOrdinal(@"Orden")))
                                row.Orden1 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Orden")), typeof(int));
                            else
                                row.Orden1 = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));

                            if (fieldNames.Contains("statusCustomer") && !reader.IsDBNull(reader.GetOrdinal(@"statusCustomer")))
                                row.StatusCustomer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusCustomer")), typeof(string));

                            if (fieldNames.Contains("statusName") && !reader.IsDBNull(reader.GetOrdinal(@"statusName")))
                                row.StatusName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusName")), typeof(string));
                            else
                                row.StatusName = null;

                            if (fieldNames.Contains("periodPay") && !reader.IsDBNull(reader.GetOrdinal(@"periodPay")))
                                row.PeriodPay = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"periodPay")), typeof(string));
                            else
                                row.PeriodPay = null;

                            if (fieldNames.Contains("customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                row.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));

                            if (fieldNames.Contains("2025-06-24") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-24")))
                                row._2025_06_24 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-24")), typeof(decimal));
                            else
                                row._2025_06_24 = null;

                            if (fieldNames.Contains("2025-06-23") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-23")))
                                row._2025_06_23 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-23")), typeof(decimal));
                            else
                                row._2025_06_23 = null;

                            if (fieldNames.Contains("2025-06-22") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-22")))
                                row._2025_06_22 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-22")), typeof(decimal));
                            else
                                row._2025_06_22 = null;

                            if (fieldNames.Contains("2025-06-21") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-21")))
                                row._2025_06_21 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-21")), typeof(decimal));
                            else
                                row._2025_06_21 = null;

                            if (fieldNames.Contains("2025-06-20") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-20")))
                                row._2025_06_20 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-20")), typeof(decimal));
                            else
                                row._2025_06_20 = null;

                            if (fieldNames.Contains("2025-06-19") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-19")))
                                row._2025_06_19 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-19")), typeof(decimal));
                            else
                                row._2025_06_19 = null;

                            if (fieldNames.Contains("2025-06-18") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-18")))
                                row._2025_06_18 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-18")), typeof(decimal));
                            else
                                row._2025_06_18 = null;

                            if (fieldNames.Contains("2025-06-17") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-17")))
                                row._2025_06_17 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-17")), typeof(decimal));
                            else
                                row._2025_06_17 = null;

                            if (fieldNames.Contains("2025-06-16") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-16")))
                                row._2025_06_16 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-16")), typeof(decimal));
                            else
                                row._2025_06_16 = null;

                            if (fieldNames.Contains("2025-06-15") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-15")))
                                row._2025_06_15 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-15")), typeof(decimal));
                            else
                                row._2025_06_15 = null;

                            if (fieldNames.Contains("2025-06-14") && !reader.IsDBNull(reader.GetOrdinal(@"2025-06-14")))
                                row._2025_06_14 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"2025-06-14")), typeof(decimal));
                            else
                                row._2025_06_14 = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PrCollectionGetReportDocumentCreditResult> PrCollectionGetReportDocumentCredit (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            List<PrCollectionGetReportDocumentCreditResult> result = new List<PrCollectionGetReportDocumentCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_document_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportDocumentCreditResult row = new PrCollectionGetReportDocumentCreditResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("simbol") && !reader.IsDBNull(reader.GetOrdinal(@"simbol")))
                                row.Simbol = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"simbol")), typeof(string));

                            if (fieldNames.Contains("customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                row.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));

                            if (fieldNames.Contains("entityID") && !reader.IsDBNull(reader.GetOrdinal(@"entityID")))
                                row.EntityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"entityID")), typeof(int));

                            if (fieldNames.Contains("creditAmortizationID") && !reader.IsDBNull(reader.GetOrdinal(@"creditAmortizationID")))
                                row.CreditAmortizationID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creditAmortizationID")), typeof(int));

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("nameCustomer") && !reader.IsDBNull(reader.GetOrdinal(@"nameCustomer")))
                                row.NameCustomer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCustomer")), typeof(string));
                            else
                                row.NameCustomer = null;

                            if (fieldNames.Contains("documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                row.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));

                            if (fieldNames.Contains("dateApply") && !reader.IsDBNull(reader.GetOrdinal(@"dateApply")))
                                row.DateApply = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateApply")), typeof(System.DateTime));

                            if (fieldNames.Contains("capitalMoreInteres") && !reader.IsDBNull(reader.GetOrdinal(@"capitalMoreInteres")))
                                row.CapitalMoreInteres = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalMoreInteres")), typeof(decimal));
                            else
                                row.CapitalMoreInteres = null;

                            if (fieldNames.Contains("shareProgramin") && !reader.IsDBNull(reader.GetOrdinal(@"shareProgramin")))
                                row.ShareProgramin = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"shareProgramin")), typeof(decimal));

                            if (fieldNames.Contains("shareReal") && !reader.IsDBNull(reader.GetOrdinal(@"shareReal")))
                                row.ShareReal = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"shareReal")), typeof(int));

                            if (fieldNames.Contains("balanceStart") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStart")))
                                row.BalanceStart = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStart")), typeof(int));

                            if (fieldNames.Contains("balanceEnd") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEnd")))
                                row.BalanceEnd = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEnd")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrCollectionGetReportDocumentCreditResult>> PrCollectionGetReportDocumentCreditAsync (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            List<PrCollectionGetReportDocumentCreditResult> result = new List<PrCollectionGetReportDocumentCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_document_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportDocumentCreditResult row = new PrCollectionGetReportDocumentCreditResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("simbol") && !reader.IsDBNull(reader.GetOrdinal(@"simbol")))
                                row.Simbol = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"simbol")), typeof(string));

                            if (fieldNames.Contains("customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                row.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));

                            if (fieldNames.Contains("entityID") && !reader.IsDBNull(reader.GetOrdinal(@"entityID")))
                                row.EntityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"entityID")), typeof(int));

                            if (fieldNames.Contains("creditAmortizationID") && !reader.IsDBNull(reader.GetOrdinal(@"creditAmortizationID")))
                                row.CreditAmortizationID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creditAmortizationID")), typeof(int));

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("nameCustomer") && !reader.IsDBNull(reader.GetOrdinal(@"nameCustomer")))
                                row.NameCustomer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCustomer")), typeof(string));
                            else
                                row.NameCustomer = null;

                            if (fieldNames.Contains("documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                row.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));

                            if (fieldNames.Contains("dateApply") && !reader.IsDBNull(reader.GetOrdinal(@"dateApply")))
                                row.DateApply = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateApply")), typeof(System.DateTime));

                            if (fieldNames.Contains("capitalMoreInteres") && !reader.IsDBNull(reader.GetOrdinal(@"capitalMoreInteres")))
                                row.CapitalMoreInteres = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalMoreInteres")), typeof(decimal));
                            else
                                row.CapitalMoreInteres = null;

                            if (fieldNames.Contains("shareProgramin") && !reader.IsDBNull(reader.GetOrdinal(@"shareProgramin")))
                                row.ShareProgramin = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"shareProgramin")), typeof(decimal));

                            if (fieldNames.Contains("shareReal") && !reader.IsDBNull(reader.GetOrdinal(@"shareReal")))
                                row.ShareReal = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"shareReal")), typeof(int));

                            if (fieldNames.Contains("balanceStart") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStart")))
                                row.BalanceStart = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStart")), typeof(int));

                            if (fieldNames.Contains("balanceEnd") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEnd")))
                                row.BalanceEnd = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEnd")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PrCollectionGetReportSummaryCreditResult> PrCollectionGetReportSummaryCredit (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prDate)
        {

            List<PrCollectionGetReportSummaryCreditResult> result = new List<PrCollectionGetReportSummaryCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_summary_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDateParameter = cmd.CreateParameter();
                    prDateParameter.ParameterName = "prDate";
                    prDateParameter.Direction = ParameterDirection.Input;
                    prDateParameter.DbType = DbType.DateTime;
                    if (prDate.HasValue)
                    {
                        prDateParameter.Value = prDate.Value;
                    }
                    else
                    {
                        prDateParameter.Size = -1;
                        prDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportSummaryCreditResult row = new PrCollectionGetReportSummaryCreditResult();
                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("countCustomer") && !reader.IsDBNull(reader.GetOrdinal(@"countCustomer")))
                                row.CountCustomer = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCustomer")), typeof(int));

                            if (fieldNames.Contains("countCredit") && !reader.IsDBNull(reader.GetOrdinal(@"countCredit")))
                                row.CountCredit = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCredit")), typeof(int));

                            if (fieldNames.Contains("countCustomerAcumulados") && !reader.IsDBNull(reader.GetOrdinal(@"countCustomerAcumulados")))
                                row.CountCustomerAcumulados = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCustomerAcumulados")), typeof(int));

                            if (fieldNames.Contains("countCustomerCancel") && !reader.IsDBNull(reader.GetOrdinal(@"countCustomerCancel")))
                                row.CountCustomerCancel = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCustomerCancel")), typeof(int));

                            if (fieldNames.Contains("countCustomerNew") && !reader.IsDBNull(reader.GetOrdinal(@"countCustomerNew")))
                                row.CountCustomerNew = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCustomerNew")), typeof(int));

                            if (fieldNames.Contains("countCustomerRecuperation") && !reader.IsDBNull(reader.GetOrdinal(@"countCustomerRecuperation")))
                                row.CountCustomerRecuperation = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCustomerRecuperation")), typeof(int));

                            if (fieldNames.Contains("amountCartera") && !reader.IsDBNull(reader.GetOrdinal(@"amountCartera")))
                                row.AmountCartera = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCartera")), typeof(int));

                            if (fieldNames.Contains("amountCapital") && !reader.IsDBNull(reader.GetOrdinal(@"amountCapital")))
                                row.AmountCapital = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCapital")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrCollectionGetReportSummaryCreditResult>> PrCollectionGetReportSummaryCreditAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prDate)
        {

            List<PrCollectionGetReportSummaryCreditResult> result = new List<PrCollectionGetReportSummaryCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_summary_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDateParameter = cmd.CreateParameter();
                    prDateParameter.ParameterName = "prDate";
                    prDateParameter.Direction = ParameterDirection.Input;
                    prDateParameter.DbType = DbType.DateTime;
                    if (prDate.HasValue)
                    {
                        prDateParameter.Value = prDate.Value;
                    }
                    else
                    {
                        prDateParameter.Size = -1;
                        prDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCollectionGetReportSummaryCreditResult row = new PrCollectionGetReportSummaryCreditResult();
                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("countCustomer") && !reader.IsDBNull(reader.GetOrdinal(@"countCustomer")))
                                row.CountCustomer = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCustomer")), typeof(int));

                            if (fieldNames.Contains("countCredit") && !reader.IsDBNull(reader.GetOrdinal(@"countCredit")))
                                row.CountCredit = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCredit")), typeof(int));

                            if (fieldNames.Contains("countCustomerAcumulados") && !reader.IsDBNull(reader.GetOrdinal(@"countCustomerAcumulados")))
                                row.CountCustomerAcumulados = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCustomerAcumulados")), typeof(int));

                            if (fieldNames.Contains("countCustomerCancel") && !reader.IsDBNull(reader.GetOrdinal(@"countCustomerCancel")))
                                row.CountCustomerCancel = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCustomerCancel")), typeof(int));

                            if (fieldNames.Contains("countCustomerNew") && !reader.IsDBNull(reader.GetOrdinal(@"countCustomerNew")))
                                row.CountCustomerNew = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCustomerNew")), typeof(int));

                            if (fieldNames.Contains("countCustomerRecuperation") && !reader.IsDBNull(reader.GetOrdinal(@"countCustomerRecuperation")))
                                row.CountCustomerRecuperation = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"countCustomerRecuperation")), typeof(int));

                            if (fieldNames.Contains("amountCartera") && !reader.IsDBNull(reader.GetOrdinal(@"amountCartera")))
                                row.AmountCartera = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCartera")), typeof(int));

                            if (fieldNames.Contains("amountCapital") && !reader.IsDBNull(reader.GetOrdinal(@"amountCapital")))
                                row.AmountCapital = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCapital")), typeof(int));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procediminento que se utiliza para calcular los conceptos de la transaccion de otras salidas de inventario
        /// </summary>
        public void PrConceptHelperBilling (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_billing";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procediminento que se utiliza para calcular los conceptos de la transaccion de otras salidas de inventario
        /// </summary>
        public async Task PrConceptHelperBillingAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_billing";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrConceptHelperCalendarpay (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_calendarpay";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrConceptHelperCalendarpayAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_calendarpay";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Calcular los conceptos de la cancelacion de factura
        /// </summary>
        public void PrConceptHelperCancelinvoice (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_cancelinvoice";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Calcular los conceptos de la cancelacion de factura
        /// </summary>
        public async Task PrConceptHelperCancelinvoiceAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_cancelinvoice";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Entrada sin postear
        /// </summary>
        public void PrConceptHelperInputUnpost (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_input_unpost";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Entrada sin postear
        /// </summary>
        public async Task PrConceptHelperInputUnpostAsync (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_input_unpost";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para calcular los conceptos de Otras entradas a Inventario
        /// </summary>
        public void PrConceptHelperOtherInput (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_other_input";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para calcular los conceptos de Otras entradas a Inventario
        /// </summary>
        public async Task PrConceptHelperOtherInputAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_other_input";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procediminento que se utiliza para calcular los conceptos de la transaccion de otras salidas de inventario
        /// </summary>
        public void PrConceptHelperOtherOutput (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_other_output";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procediminento que se utiliza para calcular los conceptos de la transaccion de otras salidas de inventario
        /// </summary>
        public async Task PrConceptHelperOtherOutputAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_other_output";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Calculo de concepto de Provisiones
        /// </summary>
        public void PrConceptHelperProvider (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_provider";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Calculo de concepto de Provisiones
        /// </summary>
        public async Task PrConceptHelperProviderAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_provider";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para calcular los conceptos de Devolucion de Compra
        /// </summary>
        public void PrConceptHelperReturnsProvider (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_returns_provider";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para calcular los conceptos de Devolucion de Compra
        /// </summary>
        public async Task PrConceptHelperReturnsProviderAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_returns_provider";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Contabilizar Adelantos de Salario
        /// </summary>
        public void PrConceptHelperSalaryadvance (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_salaryadvance";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Contabilizar Adelantos de Salario
        /// </summary>
        public async Task PrConceptHelperSalaryadvanceAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_salaryadvance";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener los conceptos de los Abonos de Credito
        /// </summary>
        public void PrConceptHelperShare (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_share";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener los conceptos de los Abonos de Credito
        /// </summary>
        public async Task PrConceptHelperShareAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_share";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Crear los conceptos del abono al capital
        /// </summary>
        public void PrConceptHelperSharecapital (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_sharecapital";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Crear los conceptos del abono al capital
        /// </summary>
        public async Task PrConceptHelperSharecapitalAsync (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_sharecapital";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener la tasa de cambio del dia 
        /// </summary>
        public void PrCoreGetExchangeRate (int? prCompanyID, DateTime? prDate, byte[] prCurrencySource, byte[] prCurrencyTarget, out decimal? prExchangeRate)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_exchange_rate";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDateParameter = cmd.CreateParameter();
                    prDateParameter.ParameterName = "prDate";
                    prDateParameter.Direction = ParameterDirection.Input;
                    prDateParameter.DbType = DbType.DateTime;
                    if (prDate.HasValue)
                    {
                        prDateParameter.Value = prDate.Value;
                    }
                    else
                    {
                        prDateParameter.Size = -1;
                        prDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateParameter);

                    DbParameter prCurrencySourceParameter = cmd.CreateParameter();
                    prCurrencySourceParameter.ParameterName = "prCurrencySource";
                    prCurrencySourceParameter.Direction = ParameterDirection.Input;
                    prCurrencySourceParameter.DbType = DbType.Binary;
                    prCurrencySourceParameter.Size = 250;
                    if (prCurrencySource != null)
                    {
                        prCurrencySourceParameter.Value = prCurrencySource;
                    }
                    else
                    {
                        prCurrencySourceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencySourceParameter);

                    DbParameter prCurrencyTargetParameter = cmd.CreateParameter();
                    prCurrencyTargetParameter.ParameterName = "prCurrencyTarget";
                    prCurrencyTargetParameter.Direction = ParameterDirection.Input;
                    prCurrencyTargetParameter.DbType = DbType.Binary;
                    prCurrencyTargetParameter.Size = 250;
                    if (prCurrencyTarget != null)
                    {
                        prCurrencyTargetParameter.Value = prCurrencyTarget;
                    }
                    else
                    {
                        prCurrencyTargetParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyTargetParameter);

                    DbParameter prExchangeRateParameter = cmd.CreateParameter();
                    prExchangeRateParameter.ParameterName = "prExchangeRate";
                    prExchangeRateParameter.Direction = ParameterDirection.Output;
                    prExchangeRateParameter.DbType = DbType.Decimal;
                    prExchangeRateParameter.Precision = 18;
                    prExchangeRateParameter.Scale = 8;
                    prExchangeRateParameter.Size = -1;
                    prExchangeRateParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prExchangeRateParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prExchangeRate"].Value != null && !(cmd.Parameters["prExchangeRate"].Value is System.DBNull))
                        prExchangeRate = (decimal)Convert.ChangeType(cmd.Parameters["prExchangeRate"].Value, typeof(decimal));
                    else
                        prExchangeRate = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener la tasa de cambio del dia 
        /// </summary>
        public async Task<Tuple<decimal?>> PrCoreGetExchangeRateAsync (int? prCompanyID, DateTime? prDate, byte[] prCurrencySource, byte[] prCurrencyTarget)
        {

            decimal? prExchangeRate;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_exchange_rate";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDateParameter = cmd.CreateParameter();
                    prDateParameter.ParameterName = "prDate";
                    prDateParameter.Direction = ParameterDirection.Input;
                    prDateParameter.DbType = DbType.DateTime;
                    if (prDate.HasValue)
                    {
                        prDateParameter.Value = prDate.Value;
                    }
                    else
                    {
                        prDateParameter.Size = -1;
                        prDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateParameter);

                    DbParameter prCurrencySourceParameter = cmd.CreateParameter();
                    prCurrencySourceParameter.ParameterName = "prCurrencySource";
                    prCurrencySourceParameter.Direction = ParameterDirection.Input;
                    prCurrencySourceParameter.DbType = DbType.Binary;
                    prCurrencySourceParameter.Size = 250;
                    if (prCurrencySource != null)
                    {
                        prCurrencySourceParameter.Value = prCurrencySource;
                    }
                    else
                    {
                        prCurrencySourceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencySourceParameter);

                    DbParameter prCurrencyTargetParameter = cmd.CreateParameter();
                    prCurrencyTargetParameter.ParameterName = "prCurrencyTarget";
                    prCurrencyTargetParameter.Direction = ParameterDirection.Input;
                    prCurrencyTargetParameter.DbType = DbType.Binary;
                    prCurrencyTargetParameter.Size = 250;
                    if (prCurrencyTarget != null)
                    {
                        prCurrencyTargetParameter.Value = prCurrencyTarget;
                    }
                    else
                    {
                        prCurrencyTargetParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyTargetParameter);

                    DbParameter prExchangeRateParameter = cmd.CreateParameter();
                    prExchangeRateParameter.ParameterName = "prExchangeRate";
                    prExchangeRateParameter.Direction = ParameterDirection.Output;
                    prExchangeRateParameter.DbType = DbType.Decimal;
                    prExchangeRateParameter.Precision = 18;
                    prExchangeRateParameter.Scale = 8;
                    prExchangeRateParameter.Size = -1;
                    prExchangeRateParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prExchangeRateParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prExchangeRate"].Value != null && !(cmd.Parameters["prExchangeRate"].Value is System.DBNull))
                        prExchangeRate = (decimal)Convert.ChangeType(cmd.Parameters["prExchangeRate"].Value, typeof(decimal));
                    else
                        prExchangeRate = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<decimal?>(prExchangeRate);
        }

        /// <summary>
        /// Obtiene la lista de indicadores
        /// </summary>
        public List<PrCoreGetIndicatorResult> PrCoreGetIndicator (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            List<PrCoreGetIndicatorResult> result = new List<PrCoreGetIndicatorResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_indicators";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCoreGetIndicatorResult row = new PrCoreGetIndicatorResult();
                            if (fieldNames.Contains("name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));

                            if (fieldNames.Contains("order") && !reader.IsDBNull(reader.GetOrdinal(@"order")))
                                row.Order = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal(@"code")))
                                row.Code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));

                            if (fieldNames.Contains("label") && !reader.IsDBNull(reader.GetOrdinal(@"label")))
                                row.Label = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"label")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal(@"description")))
                                row.Description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));

                            if (fieldNames.Contains("posfix") && !reader.IsDBNull(reader.GetOrdinal(@"posfix")))
                                row.Posfix = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"posfix")), typeof(string));

                            if (fieldNames.Contains("prefix") && !reader.IsDBNull(reader.GetOrdinal(@"prefix")))
                                row.Prefix = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prefix")), typeof(string));

                            if (fieldNames.Contains("isGroup") && !reader.IsDBNull(reader.GetOrdinal(@"isGroup")))
                                row.IsGroup = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isGroup")), typeof(string));
                            else
                                row.IsGroup = null;

                            if (fieldNames.Contains("value") && !reader.IsDBNull(reader.GetOrdinal(@"value")))
                                row.Value = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"value")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Obtiene la lista de indicadores
        /// </summary>
        public async Task<List<PrCoreGetIndicatorResult>> PrCoreGetIndicatorAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            List<PrCoreGetIndicatorResult> result = new List<PrCoreGetIndicatorResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_indicators";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCoreGetIndicatorResult row = new PrCoreGetIndicatorResult();
                            if (fieldNames.Contains("name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));

                            if (fieldNames.Contains("order") && !reader.IsDBNull(reader.GetOrdinal(@"order")))
                                row.Order = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"order")), typeof(int));

                            if (fieldNames.Contains("code") && !reader.IsDBNull(reader.GetOrdinal(@"code")))
                                row.Code = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"code")), typeof(string));

                            if (fieldNames.Contains("label") && !reader.IsDBNull(reader.GetOrdinal(@"label")))
                                row.Label = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"label")), typeof(string));

                            if (fieldNames.Contains("description") && !reader.IsDBNull(reader.GetOrdinal(@"description")))
                                row.Description = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"description")), typeof(string));

                            if (fieldNames.Contains("posfix") && !reader.IsDBNull(reader.GetOrdinal(@"posfix")))
                                row.Posfix = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"posfix")), typeof(string));

                            if (fieldNames.Contains("prefix") && !reader.IsDBNull(reader.GetOrdinal(@"prefix")))
                                row.Prefix = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"prefix")), typeof(string));

                            if (fieldNames.Contains("isGroup") && !reader.IsDBNull(reader.GetOrdinal(@"isGroup")))
                                row.IsGroup = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isGroup")), typeof(string));
                            else
                                row.IsGroup = null;

                            if (fieldNames.Contains("value") && !reader.IsDBNull(reader.GetOrdinal(@"value")))
                                row.Value = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"value")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para Obtener el siguiente numero de un Componente
        /// </summary>
        public void PrCoreGetNextNumber (int? prCompanyID, byte[] prComponent, int? prBranchID, int? prComponentItemID, out string prNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_next_number";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prComponentParameter = cmd.CreateParameter();
                    prComponentParameter.ParameterName = "prComponent";
                    prComponentParameter.Direction = ParameterDirection.Input;
                    prComponentParameter.DbType = DbType.Binary;
                    prComponentParameter.Size = 250;
                    if (prComponent != null)
                    {
                        prComponentParameter.Value = prComponent;
                    }
                    else
                    {
                        prComponentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prComponentParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prComponentItemIDParameter = cmd.CreateParameter();
                    prComponentItemIDParameter.ParameterName = "prComponentItemID";
                    prComponentItemIDParameter.Direction = ParameterDirection.Input;
                    prComponentItemIDParameter.DbType = DbType.Int32;
                    prComponentItemIDParameter.Precision = 10;
                    prComponentItemIDParameter.Scale = 0;
                    if (prComponentItemID.HasValue)
                    {
                        prComponentItemIDParameter.Value = prComponentItemID.Value;
                    }
                    else
                    {
                        prComponentItemIDParameter.Size = -1;
                        prComponentItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prComponentItemIDParameter);

                    DbParameter prNumberParameter = cmd.CreateParameter();
                    prNumberParameter.ParameterName = "prNumber";
                    prNumberParameter.Direction = ParameterDirection.Output;
                    prNumberParameter.DbType = DbType.String;
                    prNumberParameter.Size = 250;
                    prNumberParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prNumberParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prNumber"].Value != null && !(cmd.Parameters["prNumber"].Value is System.DBNull))
                        prNumber = (string)Convert.ChangeType(cmd.Parameters["prNumber"].Value, typeof(string));
                    else
                        prNumber = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener el siguiente numero de un Componente
        /// </summary>
        public async Task<Tuple<string>> PrCoreGetNextNumberAsync (int? prCompanyID, byte[] prComponent, int? prBranchID, int? prComponentItemID)
        {

            string prNumber;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_next_number";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prComponentParameter = cmd.CreateParameter();
                    prComponentParameter.ParameterName = "prComponent";
                    prComponentParameter.Direction = ParameterDirection.Input;
                    prComponentParameter.DbType = DbType.Binary;
                    prComponentParameter.Size = 250;
                    if (prComponent != null)
                    {
                        prComponentParameter.Value = prComponent;
                    }
                    else
                    {
                        prComponentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prComponentParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prComponentItemIDParameter = cmd.CreateParameter();
                    prComponentItemIDParameter.ParameterName = "prComponentItemID";
                    prComponentItemIDParameter.Direction = ParameterDirection.Input;
                    prComponentItemIDParameter.DbType = DbType.Int32;
                    prComponentItemIDParameter.Precision = 10;
                    prComponentItemIDParameter.Scale = 0;
                    if (prComponentItemID.HasValue)
                    {
                        prComponentItemIDParameter.Value = prComponentItemID.Value;
                    }
                    else
                    {
                        prComponentItemIDParameter.Size = -1;
                        prComponentItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prComponentItemIDParameter);

                    DbParameter prNumberParameter = cmd.CreateParameter();
                    prNumberParameter.ParameterName = "prNumber";
                    prNumberParameter.Direction = ParameterDirection.Output;
                    prNumberParameter.DbType = DbType.String;
                    prNumberParameter.Size = 250;
                    prNumberParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prNumberParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prNumber"].Value != null && !(cmd.Parameters["prNumber"].Value is System.DBNull))
                        prNumber = (string)Convert.ChangeType(cmd.Parameters["prNumber"].Value, typeof(string));
                    else
                        prNumber = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<string>(prNumber);
        }

        /// <summary>
        /// Procedimiento para obtener el valor de un parametro
        /// </summary>
        public void PrCoreGetParameterValue (int? prCompanyID, byte[] prParameter, out string prValue)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_parameter_value";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prParameterParameter = cmd.CreateParameter();
                    prParameterParameter.ParameterName = "prParameter";
                    prParameterParameter.Direction = ParameterDirection.Input;
                    prParameterParameter.DbType = DbType.Binary;
                    prParameterParameter.Size = 250;
                    if (prParameter != null)
                    {
                        prParameterParameter.Value = prParameter;
                    }
                    else
                    {
                        prParameterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prParameterParameter);

                    DbParameter prValueParameter = cmd.CreateParameter();
                    prValueParameter.ParameterName = "prValue";
                    prValueParameter.Direction = ParameterDirection.Output;
                    prValueParameter.DbType = DbType.String;
                    prValueParameter.Size = 250;
                    prValueParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prValueParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prValue"].Value != null && !(cmd.Parameters["prValue"].Value is System.DBNull))
                        prValue = (string)Convert.ChangeType(cmd.Parameters["prValue"].Value, typeof(string));
                    else
                        prValue = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener el valor de un parametro
        /// </summary>
        public async Task<Tuple<string>> PrCoreGetParameterValueAsync (int? prCompanyID, byte[] prParameter)
        {

            string prValue;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_parameter_value";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prParameterParameter = cmd.CreateParameter();
                    prParameterParameter.ParameterName = "prParameter";
                    prParameterParameter.Direction = ParameterDirection.Input;
                    prParameterParameter.DbType = DbType.Binary;
                    prParameterParameter.Size = 250;
                    if (prParameter != null)
                    {
                        prParameterParameter.Value = prParameter;
                    }
                    else
                    {
                        prParameterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prParameterParameter);

                    DbParameter prValueParameter = cmd.CreateParameter();
                    prValueParameter.ParameterName = "prValue";
                    prValueParameter.Direction = ParameterDirection.Output;
                    prValueParameter.DbType = DbType.String;
                    prValueParameter.Size = 250;
                    prValueParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prValueParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prValue"].Value != null && !(cmd.Parameters["prValue"].Value is System.DBNull))
                        prValue = (string)Convert.ChangeType(cmd.Parameters["prValue"].Value, typeof(string));
                    else
                        prValue = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<string>(prValue);
        }

        /// <summary>
        /// Procedimiento para obtener el estado inicial de un tb_workflow Asociado a una columna de una Tabla
        /// </summary>
        public void PrCoreGetWorkflowStageInit (int? prCompanyID, byte[] prTable, byte[] prField, out int? prWorkflowStageInit)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_workflow_stage_init";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTableParameter = cmd.CreateParameter();
                    prTableParameter.ParameterName = "prTable";
                    prTableParameter.Direction = ParameterDirection.Input;
                    prTableParameter.DbType = DbType.Binary;
                    prTableParameter.Size = 250;
                    if (prTable != null)
                    {
                        prTableParameter.Value = prTable;
                    }
                    else
                    {
                        prTableParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTableParameter);

                    DbParameter prFieldParameter = cmd.CreateParameter();
                    prFieldParameter.ParameterName = "prField";
                    prFieldParameter.Direction = ParameterDirection.Input;
                    prFieldParameter.DbType = DbType.Binary;
                    prFieldParameter.Size = 250;
                    if (prField != null)
                    {
                        prFieldParameter.Value = prField;
                    }
                    else
                    {
                        prFieldParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFieldParameter);

                    DbParameter prWorkflowStageInitParameter = cmd.CreateParameter();
                    prWorkflowStageInitParameter.ParameterName = "prWorkflowStageInit";
                    prWorkflowStageInitParameter.Direction = ParameterDirection.Output;
                    prWorkflowStageInitParameter.DbType = DbType.Int32;
                    prWorkflowStageInitParameter.Precision = 10;
                    prWorkflowStageInitParameter.Scale = 0;
                    prWorkflowStageInitParameter.Size = -1;
                    prWorkflowStageInitParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prWorkflowStageInitParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prWorkflowStageInit"].Value != null && !(cmd.Parameters["prWorkflowStageInit"].Value is System.DBNull))
                        prWorkflowStageInit = (int)Convert.ChangeType(cmd.Parameters["prWorkflowStageInit"].Value, typeof(int));
                    else
                        prWorkflowStageInit = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener el estado inicial de un tb_workflow Asociado a una columna de una Tabla
        /// </summary>
        public async Task<Tuple<int?>> PrCoreGetWorkflowStageInitAsync (int? prCompanyID, byte[] prTable, byte[] prField)
        {

            int? prWorkflowStageInit;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_workflow_stage_init";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTableParameter = cmd.CreateParameter();
                    prTableParameter.ParameterName = "prTable";
                    prTableParameter.Direction = ParameterDirection.Input;
                    prTableParameter.DbType = DbType.Binary;
                    prTableParameter.Size = 250;
                    if (prTable != null)
                    {
                        prTableParameter.Value = prTable;
                    }
                    else
                    {
                        prTableParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTableParameter);

                    DbParameter prFieldParameter = cmd.CreateParameter();
                    prFieldParameter.ParameterName = "prField";
                    prFieldParameter.Direction = ParameterDirection.Input;
                    prFieldParameter.DbType = DbType.Binary;
                    prFieldParameter.Size = 250;
                    if (prField != null)
                    {
                        prFieldParameter.Value = prField;
                    }
                    else
                    {
                        prFieldParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFieldParameter);

                    DbParameter prWorkflowStageInitParameter = cmd.CreateParameter();
                    prWorkflowStageInitParameter.ParameterName = "prWorkflowStageInit";
                    prWorkflowStageInitParameter.Direction = ParameterDirection.Output;
                    prWorkflowStageInitParameter.DbType = DbType.Int32;
                    prWorkflowStageInitParameter.Precision = 10;
                    prWorkflowStageInitParameter.Scale = 0;
                    prWorkflowStageInitParameter.Size = -1;
                    prWorkflowStageInitParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prWorkflowStageInitParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prWorkflowStageInit"].Value != null && !(cmd.Parameters["prWorkflowStageInit"].Value is System.DBNull))
                        prWorkflowStageInit = (int)Convert.ChangeType(cmd.Parameters["prWorkflowStageInit"].Value, typeof(int));
                    else
                        prWorkflowStageInit = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prWorkflowStageInit);
        }

        /// <summary>
        /// Obtener certificado de nota 
        /// </summary>
        public void PrCxcGetReportCertificateOfGrade (int? prCompanyID, string prTokenID, int? prUserID, int? prGrado, int? prYear, int? prCustomerID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_certificate_of_grades";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prGradoParameter = cmd.CreateParameter();
                    prGradoParameter.ParameterName = "prGrado";
                    prGradoParameter.Direction = ParameterDirection.Input;
                    prGradoParameter.DbType = DbType.Int32;
                    prGradoParameter.Precision = 10;
                    prGradoParameter.Scale = 0;
                    if (prGrado.HasValue)
                    {
                        prGradoParameter.Value = prGrado.Value;
                    }
                    else
                    {
                        prGradoParameter.Size = -1;
                        prGradoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prGradoParameter);

                    DbParameter prYearParameter = cmd.CreateParameter();
                    prYearParameter.ParameterName = "prYear";
                    prYearParameter.Direction = ParameterDirection.Input;
                    prYearParameter.DbType = DbType.Int32;
                    prYearParameter.Precision = 10;
                    prYearParameter.Scale = 0;
                    if (prYear.HasValue)
                    {
                        prYearParameter.Value = prYear.Value;
                    }
                    else
                    {
                        prYearParameter.Size = -1;
                        prYearParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prYearParameter);

                    DbParameter prCustomerIDParameter = cmd.CreateParameter();
                    prCustomerIDParameter.ParameterName = "prCustomerID";
                    prCustomerIDParameter.Direction = ParameterDirection.Input;
                    prCustomerIDParameter.DbType = DbType.Int32;
                    prCustomerIDParameter.Precision = 10;
                    prCustomerIDParameter.Scale = 0;
                    if (prCustomerID.HasValue)
                    {
                        prCustomerIDParameter.Value = prCustomerID.Value;
                    }
                    else
                    {
                        prCustomerIDParameter.Size = -1;
                        prCustomerIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Obtener certificado de nota 
        /// </summary>
        public async Task PrCxcGetReportCertificateOfGradeAsync (int? prCompanyID, string prTokenID, int? prUserID, int? prGrado, int? prYear, int? prCustomerID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_certificate_of_grades";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prGradoParameter = cmd.CreateParameter();
                    prGradoParameter.ParameterName = "prGrado";
                    prGradoParameter.Direction = ParameterDirection.Input;
                    prGradoParameter.DbType = DbType.Int32;
                    prGradoParameter.Precision = 10;
                    prGradoParameter.Scale = 0;
                    if (prGrado.HasValue)
                    {
                        prGradoParameter.Value = prGrado.Value;
                    }
                    else
                    {
                        prGradoParameter.Size = -1;
                        prGradoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prGradoParameter);

                    DbParameter prYearParameter = cmd.CreateParameter();
                    prYearParameter.ParameterName = "prYear";
                    prYearParameter.Direction = ParameterDirection.Input;
                    prYearParameter.DbType = DbType.Int32;
                    prYearParameter.Precision = 10;
                    prYearParameter.Scale = 0;
                    if (prYear.HasValue)
                    {
                        prYearParameter.Value = prYear.Value;
                    }
                    else
                    {
                        prYearParameter.Size = -1;
                        prYearParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prYearParameter);

                    DbParameter prCustomerIDParameter = cmd.CreateParameter();
                    prCustomerIDParameter.ParameterName = "prCustomerID";
                    prCustomerIDParameter.Direction = ParameterDirection.Input;
                    prCustomerIDParameter.DbType = DbType.Int32;
                    prCustomerIDParameter.Precision = 10;
                    prCustomerIDParameter.Scale = 0;
                    if (prCustomerID.HasValue)
                    {
                        prCustomerIDParameter.Value = prCustomerID.Value;
                    }
                    else
                    {
                        prCustomerIDParameter.Size = -1;
                        prCustomerIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public List<PrCxcGetReportCollectionManagerResult> PrCxcGetReportCollectionManager (int? prUserID, string prTokenID, int? prCompanyID, string prEmployeeCode, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrCxcGetReportCollectionManagerResult> result = new List<PrCxcGetReportCollectionManagerResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_collection_manager";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prEmployeeCodeParameter = cmd.CreateParameter();
                    prEmployeeCodeParameter.ParameterName = "prEmployeeCode";
                    prEmployeeCodeParameter.Direction = ParameterDirection.Input;
                    prEmployeeCodeParameter.DbType = DbType.String;
                    prEmployeeCodeParameter.Size = 50;
                    if (prEmployeeCode != null)
                    {
                        prEmployeeCodeParameter.Value = prEmployeeCode;
                    }
                    else
                    {
                        prEmployeeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployeeCodeParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCollectionManagerResult row = new PrCxcGetReportCollectionManagerResult();
                            if (fieldNames.Contains("FiltroCode") && !reader.IsDBNull(reader.GetOrdinal(@"FiltroCode")))
                                row.FiltroCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FiltroCode")), typeof(string));
                            else
                                row.FiltroCode = null;

                            if (fieldNames.Contains("FiltroName") && !reader.IsDBNull(reader.GetOrdinal(@"FiltroName")))
                                row.FiltroName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FiltroName")), typeof(string));
                            else
                                row.FiltroName = null;

                            if (fieldNames.Contains("NoGestor") && !reader.IsDBNull(reader.GetOrdinal(@"NoGestor")))
                                row.NoGestor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NoGestor")), typeof(string));
                            else
                                row.NoGestor = null;

                            if (fieldNames.Contains("Gestor") && !reader.IsDBNull(reader.GetOrdinal(@"Gestor")))
                                row.Gestor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Gestor")), typeof(string));
                            else
                                row.Gestor = null;

                            if (fieldNames.Contains("NoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NoCliente")))
                                row.NoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NoCliente")), typeof(string));

                            if (fieldNames.Contains("Cliente") && !reader.IsDBNull(reader.GetOrdinal(@"Cliente")))
                                row.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cliente")), typeof(string));
                            else
                                row.Cliente = null;

                            if (fieldNames.Contains("Telefono") && !reader.IsDBNull(reader.GetOrdinal(@"Telefono")))
                                row.Telefono = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Telefono")), typeof(string));
                            else
                                row.Telefono = null;

                            if (fieldNames.Contains("Direccion") && !reader.IsDBNull(reader.GetOrdinal(@"Direccion")))
                                row.Direccion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Direccion")), typeof(string));
                            else
                                row.Direccion = null;

                            if (fieldNames.Contains("Factura") && !reader.IsDBNull(reader.GetOrdinal(@"Factura")))
                                row.Factura = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Factura")), typeof(string));

                            if (fieldNames.Contains("Estado") && !reader.IsDBNull(reader.GetOrdinal(@"Estado")))
                                row.Estado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Estado")), typeof(string));
                            else
                                row.Estado = null;

                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("CuotaCompleta") && !reader.IsDBNull(reader.GetOrdinal(@"CuotaCompleta")))
                                row.CuotaCompleta = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CuotaCompleta")), typeof(decimal));

                            if (fieldNames.Contains("Cuota") && !reader.IsDBNull(reader.GetOrdinal(@"Cuota")))
                                row.Cuota = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cuota")), typeof(decimal));

                            if (fieldNames.Contains("Abono") && !reader.IsDBNull(reader.GetOrdinal(@"Abono")))
                                row.Abono = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Abono")), typeof(string));

                            if (fieldNames.Contains("Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));

                            if (fieldNames.Contains("Atraso") && !reader.IsDBNull(reader.GetOrdinal(@"Atraso")))
                                row.Atraso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Atraso")), typeof(string));
                            else
                                row.Atraso = null;

                            if (fieldNames.Contains("MontoTotalAtrazo") && !reader.IsDBNull(reader.GetOrdinal(@"MontoTotalAtrazo")))
                                row.MontoTotalAtrazo = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MontoTotalAtrazo")), typeof(decimal));
                            else
                                row.MontoTotalAtrazo = null;

                            if (fieldNames.Contains("MontoTotalCobradoCorriente") && !reader.IsDBNull(reader.GetOrdinal(@"MontoTotalCobradoCorriente")))
                                row.MontoTotalCobradoCorriente = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MontoTotalCobradoCorriente")), typeof(decimal));
                            else
                                row.MontoTotalCobradoCorriente = null;

                            if (fieldNames.Contains("MontoTotalMetaDia") && !reader.IsDBNull(reader.GetOrdinal(@"MontoTotalMetaDia")))
                                row.MontoTotalMetaDia = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MontoTotalMetaDia")), typeof(int));
                            else
                                row.MontoTotalMetaDia = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrCxcGetReportCollectionManagerResult>> PrCxcGetReportCollectionManagerAsync (int? prUserID, string prTokenID, int? prCompanyID, string prEmployeeCode, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrCxcGetReportCollectionManagerResult> result = new List<PrCxcGetReportCollectionManagerResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_collection_manager";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prEmployeeCodeParameter = cmd.CreateParameter();
                    prEmployeeCodeParameter.ParameterName = "prEmployeeCode";
                    prEmployeeCodeParameter.Direction = ParameterDirection.Input;
                    prEmployeeCodeParameter.DbType = DbType.String;
                    prEmployeeCodeParameter.Size = 50;
                    if (prEmployeeCode != null)
                    {
                        prEmployeeCodeParameter.Value = prEmployeeCode;
                    }
                    else
                    {
                        prEmployeeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployeeCodeParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCollectionManagerResult row = new PrCxcGetReportCollectionManagerResult();
                            if (fieldNames.Contains("FiltroCode") && !reader.IsDBNull(reader.GetOrdinal(@"FiltroCode")))
                                row.FiltroCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FiltroCode")), typeof(string));
                            else
                                row.FiltroCode = null;

                            if (fieldNames.Contains("FiltroName") && !reader.IsDBNull(reader.GetOrdinal(@"FiltroName")))
                                row.FiltroName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FiltroName")), typeof(string));
                            else
                                row.FiltroName = null;

                            if (fieldNames.Contains("NoGestor") && !reader.IsDBNull(reader.GetOrdinal(@"NoGestor")))
                                row.NoGestor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NoGestor")), typeof(string));
                            else
                                row.NoGestor = null;

                            if (fieldNames.Contains("Gestor") && !reader.IsDBNull(reader.GetOrdinal(@"Gestor")))
                                row.Gestor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Gestor")), typeof(string));
                            else
                                row.Gestor = null;

                            if (fieldNames.Contains("NoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"NoCliente")))
                                row.NoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NoCliente")), typeof(string));

                            if (fieldNames.Contains("Cliente") && !reader.IsDBNull(reader.GetOrdinal(@"Cliente")))
                                row.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cliente")), typeof(string));
                            else
                                row.Cliente = null;

                            if (fieldNames.Contains("Telefono") && !reader.IsDBNull(reader.GetOrdinal(@"Telefono")))
                                row.Telefono = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Telefono")), typeof(string));
                            else
                                row.Telefono = null;

                            if (fieldNames.Contains("Direccion") && !reader.IsDBNull(reader.GetOrdinal(@"Direccion")))
                                row.Direccion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Direccion")), typeof(string));
                            else
                                row.Direccion = null;

                            if (fieldNames.Contains("Factura") && !reader.IsDBNull(reader.GetOrdinal(@"Factura")))
                                row.Factura = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Factura")), typeof(string));

                            if (fieldNames.Contains("Estado") && !reader.IsDBNull(reader.GetOrdinal(@"Estado")))
                                row.Estado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Estado")), typeof(string));
                            else
                                row.Estado = null;

                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("CuotaCompleta") && !reader.IsDBNull(reader.GetOrdinal(@"CuotaCompleta")))
                                row.CuotaCompleta = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CuotaCompleta")), typeof(decimal));

                            if (fieldNames.Contains("Cuota") && !reader.IsDBNull(reader.GetOrdinal(@"Cuota")))
                                row.Cuota = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cuota")), typeof(decimal));

                            if (fieldNames.Contains("Abono") && !reader.IsDBNull(reader.GetOrdinal(@"Abono")))
                                row.Abono = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Abono")), typeof(string));

                            if (fieldNames.Contains("Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));

                            if (fieldNames.Contains("Atraso") && !reader.IsDBNull(reader.GetOrdinal(@"Atraso")))
                                row.Atraso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Atraso")), typeof(string));
                            else
                                row.Atraso = null;

                            if (fieldNames.Contains("MontoTotalAtrazo") && !reader.IsDBNull(reader.GetOrdinal(@"MontoTotalAtrazo")))
                                row.MontoTotalAtrazo = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MontoTotalAtrazo")), typeof(decimal));
                            else
                                row.MontoTotalAtrazo = null;

                            if (fieldNames.Contains("MontoTotalCobradoCorriente") && !reader.IsDBNull(reader.GetOrdinal(@"MontoTotalCobradoCorriente")))
                                row.MontoTotalCobradoCorriente = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MontoTotalCobradoCorriente")), typeof(decimal));
                            else
                                row.MontoTotalCobradoCorriente = null;

                            if (fieldNames.Contains("MontoTotalMetaDia") && !reader.IsDBNull(reader.GetOrdinal(@"MontoTotalMetaDia")))
                                row.MontoTotalMetaDia = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MontoTotalMetaDia")), typeof(int));
                            else
                                row.MontoTotalMetaDia = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// cartera de credito diferenciada por moneda
        /// </summary>
        public List<PrCxcGetReportCustomerCreditResult> PrCxcGetReportCustomerCredit (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportCustomerCreditResult> result = new List<PrCxcGetReportCustomerCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerCreditResult row = new PrCxcGetReportCustomerCreditResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            else
                                row.CustomerNumber = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("commercialName") && !reader.IsDBNull(reader.GetOrdinal(@"commercialName")))
                                row.CommercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commercialName")), typeof(string));
                            else
                                row.CommercialName = null;

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("lastName") && !reader.IsDBNull(reader.GetOrdinal(@"lastName")))
                                row.LastName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastName")), typeof(string));
                            else
                                row.LastName = null;

                            if (fieldNames.Contains("limitCredit") && !reader.IsDBNull(reader.GetOrdinal(@"limitCredit")))
                                row.LimitCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCredit")), typeof(decimal));
                            else
                                row.LimitCredit = null;

                            if (fieldNames.Contains("balanceCredit") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCredit")))
                                row.BalanceCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCredit")), typeof(decimal));
                            else
                                row.BalanceCredit = null;

                            if (fieldNames.Contains("tipoCambioCompra") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioCompra")))
                                row.TipoCambioCompra = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioCompra")), typeof(decimal));
                            else
                                row.TipoCambioCompra = null;

                            if (fieldNames.Contains("tipoCambioVenta") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioVenta")))
                                row.TipoCambioVenta = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioVenta")), typeof(decimal));
                            else
                                row.TipoCambioVenta = null;

                            if (fieldNames.Contains("factura") && !reader.IsDBNull(reader.GetOrdinal(@"factura")))
                                row.Factura = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"factura")), typeof(string));
                            else
                                row.Factura = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));
                            else
                                row.Moneda = null;

                            if (fieldNames.Contains("capitalPrestado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPrestado")))
                                row.CapitalPrestado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPrestado")), typeof(decimal));
                            else
                                row.CapitalPrestado = null;

                            if (fieldNames.Contains("maxDiasMora") && !reader.IsDBNull(reader.GetOrdinal(@"maxDiasMora")))
                                row.MaxDiasMora = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"maxDiasMora")), typeof(int));
                            else
                                row.MaxDiasMora = null;

                            if (fieldNames.Contains("montoAtrazado") && !reader.IsDBNull(reader.GetOrdinal(@"montoAtrazado")))
                                row.MontoAtrazado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoAtrazado")), typeof(decimal));
                            else
                                row.MontoAtrazado = null;

                            if (fieldNames.Contains("capitalAtrazado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalAtrazado")))
                                row.CapitalAtrazado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalAtrazado")), typeof(decimal));
                            else
                                row.CapitalAtrazado = null;

                            if (fieldNames.Contains("interesAtrazado") && !reader.IsDBNull(reader.GetOrdinal(@"interesAtrazado")))
                                row.InteresAtrazado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesAtrazado")), typeof(decimal));
                            else
                                row.InteresAtrazado = null;

                            if (fieldNames.Contains("capitalPagado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPagado")))
                                row.CapitalPagado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPagado")), typeof(decimal));
                            else
                                row.CapitalPagado = null;

                            if (fieldNames.Contains("interesPagado") && !reader.IsDBNull(reader.GetOrdinal(@"interesPagado")))
                                row.InteresPagado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesPagado")), typeof(decimal));
                            else
                                row.InteresPagado = null;

                            if (fieldNames.Contains("proximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"proximoPago")))
                                row.ProximoPago = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"proximoPago")), typeof(System.DateTime));
                            else
                                row.ProximoPago = null;

                            if (fieldNames.Contains("montoProximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"montoProximoPago")))
                                row.MontoProximoPago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoProximoPago")), typeof(decimal));
                            else
                                row.MontoProximoPago = null;

                            if (fieldNames.Contains("ultimoPagoFecha") && !reader.IsDBNull(reader.GetOrdinal(@"ultimoPagoFecha")))
                                row.UltimoPagoFecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ultimoPagoFecha")), typeof(System.DateTime));
                            else
                                row.UltimoPagoFecha = null;

                            if (fieldNames.Contains("direccion") && !reader.IsDBNull(reader.GetOrdinal(@"direccion")))
                                row.Direccion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"direccion")), typeof(string));
                            else
                                row.Direccion = null;

                            if (fieldNames.Contains("identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                row.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));
                            else
                                row.Identification = null;

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal(@"phone")))
                                row.Phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.Phone = null;

                            if (fieldNames.Contains("lastShareNumber") && !reader.IsDBNull(reader.GetOrdinal(@"lastShareNumber")))
                                row.LastShareNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastShareNumber")), typeof(string));
                            else
                                row.LastShareNumber = null;

                            if (fieldNames.Contains("dateLastShareNumber") && !reader.IsDBNull(reader.GetOrdinal(@"dateLastShareNumber")))
                                row.DateLastShareNumber = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateLastShareNumber")), typeof(System.DateTime));
                            else
                                row.DateLastShareNumber = null;

                            if (fieldNames.Contains("amountLastShareNumber") && !reader.IsDBNull(reader.GetOrdinal(@"amountLastShareNumber")))
                                row.AmountLastShareNumber = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountLastShareNumber")), typeof(decimal));
                            else
                                row.AmountLastShareNumber = null;

                            if (fieldNames.Contains("lastVisit") && !reader.IsDBNull(reader.GetOrdinal(@"lastVisit")))
                                row.LastVisit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastVisit")), typeof(string));
                            else
                                row.LastVisit = null;

                            if (fieldNames.Contains("remainingDocument") && !reader.IsDBNull(reader.GetOrdinal(@"remainingDocument")))
                                row.RemainingDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"remainingDocument")), typeof(decimal));
                            else
                                row.RemainingDocument = null;

                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));
                            else
                                row.EmployerName = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// cartera de credito diferenciada por moneda
        /// </summary>
        public async Task<List<PrCxcGetReportCustomerCreditResult>> PrCxcGetReportCustomerCreditAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportCustomerCreditResult> result = new List<PrCxcGetReportCustomerCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerCreditResult row = new PrCxcGetReportCustomerCreditResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            else
                                row.CustomerNumber = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("commercialName") && !reader.IsDBNull(reader.GetOrdinal(@"commercialName")))
                                row.CommercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commercialName")), typeof(string));
                            else
                                row.CommercialName = null;

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("lastName") && !reader.IsDBNull(reader.GetOrdinal(@"lastName")))
                                row.LastName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastName")), typeof(string));
                            else
                                row.LastName = null;

                            if (fieldNames.Contains("limitCredit") && !reader.IsDBNull(reader.GetOrdinal(@"limitCredit")))
                                row.LimitCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCredit")), typeof(decimal));
                            else
                                row.LimitCredit = null;

                            if (fieldNames.Contains("balanceCredit") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCredit")))
                                row.BalanceCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCredit")), typeof(decimal));
                            else
                                row.BalanceCredit = null;

                            if (fieldNames.Contains("tipoCambioCompra") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioCompra")))
                                row.TipoCambioCompra = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioCompra")), typeof(decimal));
                            else
                                row.TipoCambioCompra = null;

                            if (fieldNames.Contains("tipoCambioVenta") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioVenta")))
                                row.TipoCambioVenta = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioVenta")), typeof(decimal));
                            else
                                row.TipoCambioVenta = null;

                            if (fieldNames.Contains("factura") && !reader.IsDBNull(reader.GetOrdinal(@"factura")))
                                row.Factura = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"factura")), typeof(string));
                            else
                                row.Factura = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));
                            else
                                row.Moneda = null;

                            if (fieldNames.Contains("capitalPrestado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPrestado")))
                                row.CapitalPrestado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPrestado")), typeof(decimal));
                            else
                                row.CapitalPrestado = null;

                            if (fieldNames.Contains("maxDiasMora") && !reader.IsDBNull(reader.GetOrdinal(@"maxDiasMora")))
                                row.MaxDiasMora = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"maxDiasMora")), typeof(int));
                            else
                                row.MaxDiasMora = null;

                            if (fieldNames.Contains("montoAtrazado") && !reader.IsDBNull(reader.GetOrdinal(@"montoAtrazado")))
                                row.MontoAtrazado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoAtrazado")), typeof(decimal));
                            else
                                row.MontoAtrazado = null;

                            if (fieldNames.Contains("capitalAtrazado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalAtrazado")))
                                row.CapitalAtrazado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalAtrazado")), typeof(decimal));
                            else
                                row.CapitalAtrazado = null;

                            if (fieldNames.Contains("interesAtrazado") && !reader.IsDBNull(reader.GetOrdinal(@"interesAtrazado")))
                                row.InteresAtrazado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesAtrazado")), typeof(decimal));
                            else
                                row.InteresAtrazado = null;

                            if (fieldNames.Contains("capitalPagado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPagado")))
                                row.CapitalPagado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPagado")), typeof(decimal));
                            else
                                row.CapitalPagado = null;

                            if (fieldNames.Contains("interesPagado") && !reader.IsDBNull(reader.GetOrdinal(@"interesPagado")))
                                row.InteresPagado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesPagado")), typeof(decimal));
                            else
                                row.InteresPagado = null;

                            if (fieldNames.Contains("proximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"proximoPago")))
                                row.ProximoPago = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"proximoPago")), typeof(System.DateTime));
                            else
                                row.ProximoPago = null;

                            if (fieldNames.Contains("montoProximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"montoProximoPago")))
                                row.MontoProximoPago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoProximoPago")), typeof(decimal));
                            else
                                row.MontoProximoPago = null;

                            if (fieldNames.Contains("ultimoPagoFecha") && !reader.IsDBNull(reader.GetOrdinal(@"ultimoPagoFecha")))
                                row.UltimoPagoFecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ultimoPagoFecha")), typeof(System.DateTime));
                            else
                                row.UltimoPagoFecha = null;

                            if (fieldNames.Contains("direccion") && !reader.IsDBNull(reader.GetOrdinal(@"direccion")))
                                row.Direccion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"direccion")), typeof(string));
                            else
                                row.Direccion = null;

                            if (fieldNames.Contains("identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                row.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));
                            else
                                row.Identification = null;

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal(@"phone")))
                                row.Phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.Phone = null;

                            if (fieldNames.Contains("lastShareNumber") && !reader.IsDBNull(reader.GetOrdinal(@"lastShareNumber")))
                                row.LastShareNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastShareNumber")), typeof(string));
                            else
                                row.LastShareNumber = null;

                            if (fieldNames.Contains("dateLastShareNumber") && !reader.IsDBNull(reader.GetOrdinal(@"dateLastShareNumber")))
                                row.DateLastShareNumber = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateLastShareNumber")), typeof(System.DateTime));
                            else
                                row.DateLastShareNumber = null;

                            if (fieldNames.Contains("amountLastShareNumber") && !reader.IsDBNull(reader.GetOrdinal(@"amountLastShareNumber")))
                                row.AmountLastShareNumber = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountLastShareNumber")), typeof(decimal));
                            else
                                row.AmountLastShareNumber = null;

                            if (fieldNames.Contains("lastVisit") && !reader.IsDBNull(reader.GetOrdinal(@"lastVisit")))
                                row.LastVisit = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastVisit")), typeof(string));
                            else
                                row.LastVisit = null;

                            if (fieldNames.Contains("remainingDocument") && !reader.IsDBNull(reader.GetOrdinal(@"remainingDocument")))
                                row.RemainingDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"remainingDocument")), typeof(decimal));
                            else
                                row.RemainingDocument = null;

                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));
                            else
                                row.EmployerName = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// cartera de credito diferenciada por moneda
        /// </summary>
        public List<PrCxcGetReportCustomerCreditByUserResult> PrCxcGetReportCustomerCreditByUser (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportCustomerCreditByUserResult> result = new List<PrCxcGetReportCustomerCreditByUserResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit_by_user";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerCreditByUserResult row = new PrCxcGetReportCustomerCreditByUserResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            else
                                row.CustomerNumber = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("commercialName") && !reader.IsDBNull(reader.GetOrdinal(@"commercialName")))
                                row.CommercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commercialName")), typeof(string));
                            else
                                row.CommercialName = null;

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("lastName") && !reader.IsDBNull(reader.GetOrdinal(@"lastName")))
                                row.LastName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastName")), typeof(string));
                            else
                                row.LastName = null;

                            if (fieldNames.Contains("limitCredit") && !reader.IsDBNull(reader.GetOrdinal(@"limitCredit")))
                                row.LimitCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCredit")), typeof(decimal));
                            else
                                row.LimitCredit = null;

                            if (fieldNames.Contains("balanceCredit") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCredit")))
                                row.BalanceCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCredit")), typeof(decimal));
                            else
                                row.BalanceCredit = null;

                            if (fieldNames.Contains("tipoCambioCompra") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioCompra")))
                                row.TipoCambioCompra = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioCompra")), typeof(decimal));
                            else
                                row.TipoCambioCompra = null;

                            if (fieldNames.Contains("tipoCambioVenta") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioVenta")))
                                row.TipoCambioVenta = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioVenta")), typeof(decimal));
                            else
                                row.TipoCambioVenta = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));
                            else
                                row.Moneda = null;

                            if (fieldNames.Contains("maxDiasMora") && !reader.IsDBNull(reader.GetOrdinal(@"maxDiasMora")))
                                row.MaxDiasMora = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"maxDiasMora")), typeof(int));
                            else
                                row.MaxDiasMora = null;

                            if (fieldNames.Contains("montoAtrazado") && !reader.IsDBNull(reader.GetOrdinal(@"montoAtrazado")))
                                row.MontoAtrazado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoAtrazado")), typeof(decimal));
                            else
                                row.MontoAtrazado = null;

                            if (fieldNames.Contains("cantidadFactura") && !reader.IsDBNull(reader.GetOrdinal(@"cantidadFactura")))
                                row.CantidadFactura = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cantidadFactura")), typeof(int));
                            else
                                row.CantidadFactura = null;

                            if (fieldNames.Contains("capitalPrestado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPrestado")))
                                row.CapitalPrestado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPrestado")), typeof(decimal));
                            else
                                row.CapitalPrestado = null;

                            if (fieldNames.Contains("capitalPagado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPagado")))
                                row.CapitalPagado = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPagado")), typeof(int));

                            if (fieldNames.Contains("interesPagado") && !reader.IsDBNull(reader.GetOrdinal(@"interesPagado")))
                                row.InteresPagado = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesPagado")), typeof(int));

                            if (fieldNames.Contains("proximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"proximoPago")))
                                row.ProximoPago = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"proximoPago")), typeof(System.DateTime));
                            else
                                row.ProximoPago = null;

                            if (fieldNames.Contains("montoProximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"montoProximoPago")))
                                row.MontoProximoPago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoProximoPago")), typeof(decimal));
                            else
                                row.MontoProximoPago = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// cartera de credito diferenciada por moneda
        /// </summary>
        public async Task<List<PrCxcGetReportCustomerCreditByUserResult>> PrCxcGetReportCustomerCreditByUserAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportCustomerCreditByUserResult> result = new List<PrCxcGetReportCustomerCreditByUserResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit_by_user";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerCreditByUserResult row = new PrCxcGetReportCustomerCreditByUserResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            else
                                row.CustomerNumber = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("commercialName") && !reader.IsDBNull(reader.GetOrdinal(@"commercialName")))
                                row.CommercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commercialName")), typeof(string));
                            else
                                row.CommercialName = null;

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("lastName") && !reader.IsDBNull(reader.GetOrdinal(@"lastName")))
                                row.LastName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastName")), typeof(string));
                            else
                                row.LastName = null;

                            if (fieldNames.Contains("limitCredit") && !reader.IsDBNull(reader.GetOrdinal(@"limitCredit")))
                                row.LimitCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCredit")), typeof(decimal));
                            else
                                row.LimitCredit = null;

                            if (fieldNames.Contains("balanceCredit") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCredit")))
                                row.BalanceCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCredit")), typeof(decimal));
                            else
                                row.BalanceCredit = null;

                            if (fieldNames.Contains("tipoCambioCompra") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioCompra")))
                                row.TipoCambioCompra = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioCompra")), typeof(decimal));
                            else
                                row.TipoCambioCompra = null;

                            if (fieldNames.Contains("tipoCambioVenta") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioVenta")))
                                row.TipoCambioVenta = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioVenta")), typeof(decimal));
                            else
                                row.TipoCambioVenta = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));
                            else
                                row.Moneda = null;

                            if (fieldNames.Contains("maxDiasMora") && !reader.IsDBNull(reader.GetOrdinal(@"maxDiasMora")))
                                row.MaxDiasMora = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"maxDiasMora")), typeof(int));
                            else
                                row.MaxDiasMora = null;

                            if (fieldNames.Contains("montoAtrazado") && !reader.IsDBNull(reader.GetOrdinal(@"montoAtrazado")))
                                row.MontoAtrazado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoAtrazado")), typeof(decimal));
                            else
                                row.MontoAtrazado = null;

                            if (fieldNames.Contains("cantidadFactura") && !reader.IsDBNull(reader.GetOrdinal(@"cantidadFactura")))
                                row.CantidadFactura = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cantidadFactura")), typeof(int));
                            else
                                row.CantidadFactura = null;

                            if (fieldNames.Contains("capitalPrestado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPrestado")))
                                row.CapitalPrestado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPrestado")), typeof(decimal));
                            else
                                row.CapitalPrestado = null;

                            if (fieldNames.Contains("capitalPagado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPagado")))
                                row.CapitalPagado = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPagado")), typeof(int));

                            if (fieldNames.Contains("interesPagado") && !reader.IsDBNull(reader.GetOrdinal(@"interesPagado")))
                                row.InteresPagado = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesPagado")), typeof(int));

                            if (fieldNames.Contains("proximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"proximoPago")))
                                row.ProximoPago = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"proximoPago")), typeof(System.DateTime));
                            else
                                row.ProximoPago = null;

                            if (fieldNames.Contains("montoProximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"montoProximoPago")))
                                row.MontoProximoPago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoProximoPago")), typeof(decimal));
                            else
                                row.MontoProximoPago = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// reporte de lista de clientes de credito
        /// </summary>
        public List<PrCxcGetReportCustomerCreditDolareResult> PrCxcGetReportCustomerCreditDolare (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportCustomerCreditDolareResult> result = new List<PrCxcGetReportCustomerCreditDolareResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit_dolares";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerCreditDolareResult row = new PrCxcGetReportCustomerCreditDolareResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            else
                                row.CustomerNumber = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("commercialName") && !reader.IsDBNull(reader.GetOrdinal(@"commercialName")))
                                row.CommercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commercialName")), typeof(string));
                            else
                                row.CommercialName = null;

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("lastName") && !reader.IsDBNull(reader.GetOrdinal(@"lastName")))
                                row.LastName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastName")), typeof(string));
                            else
                                row.LastName = null;

                            if (fieldNames.Contains("limitCredit") && !reader.IsDBNull(reader.GetOrdinal(@"limitCredit")))
                                row.LimitCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCredit")), typeof(decimal));
                            else
                                row.LimitCredit = null;

                            if (fieldNames.Contains("balanceCredit") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCredit")))
                                row.BalanceCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCredit")), typeof(decimal));
                            else
                                row.BalanceCredit = null;

                            if (fieldNames.Contains("tipoCambioCompra") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioCompra")))
                                row.TipoCambioCompra = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioCompra")), typeof(decimal));
                            else
                                row.TipoCambioCompra = null;

                            if (fieldNames.Contains("tipoCambioVenta") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioVenta")))
                                row.TipoCambioVenta = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioVenta")), typeof(decimal));
                            else
                                row.TipoCambioVenta = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));

                            if (fieldNames.Contains("maxDiasMora") && !reader.IsDBNull(reader.GetOrdinal(@"maxDiasMora")))
                                row.MaxDiasMora = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"maxDiasMora")), typeof(int));
                            else
                                row.MaxDiasMora = null;

                            if (fieldNames.Contains("montoAtrazado") && !reader.IsDBNull(reader.GetOrdinal(@"montoAtrazado")))
                                row.MontoAtrazado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoAtrazado")), typeof(decimal));
                            else
                                row.MontoAtrazado = null;

                            if (fieldNames.Contains("cantidadFactura") && !reader.IsDBNull(reader.GetOrdinal(@"cantidadFactura")))
                                row.CantidadFactura = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cantidadFactura")), typeof(int));
                            else
                                row.CantidadFactura = null;

                            if (fieldNames.Contains("capitalPrestado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPrestado")))
                                row.CapitalPrestado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPrestado")), typeof(decimal));
                            else
                                row.CapitalPrestado = null;

                            if (fieldNames.Contains("capitalPagado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPagado")))
                                row.CapitalPagado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPagado")), typeof(decimal));
                            else
                                row.CapitalPagado = null;

                            if (fieldNames.Contains("interesPagado") && !reader.IsDBNull(reader.GetOrdinal(@"interesPagado")))
                                row.InteresPagado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesPagado")), typeof(decimal));
                            else
                                row.InteresPagado = null;

                            if (fieldNames.Contains("proximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"proximoPago")))
                                row.ProximoPago = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"proximoPago")), typeof(System.DateTime));
                            else
                                row.ProximoPago = null;

                            if (fieldNames.Contains("montoProximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"montoProximoPago")))
                                row.MontoProximoPago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoProximoPago")), typeof(decimal));
                            else
                                row.MontoProximoPago = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// reporte de lista de clientes de credito
        /// </summary>
        public async Task<List<PrCxcGetReportCustomerCreditDolareResult>> PrCxcGetReportCustomerCreditDolareAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportCustomerCreditDolareResult> result = new List<PrCxcGetReportCustomerCreditDolareResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit_dolares";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerCreditDolareResult row = new PrCxcGetReportCustomerCreditDolareResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            else
                                row.CustomerNumber = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("commercialName") && !reader.IsDBNull(reader.GetOrdinal(@"commercialName")))
                                row.CommercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"commercialName")), typeof(string));
                            else
                                row.CommercialName = null;

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("lastName") && !reader.IsDBNull(reader.GetOrdinal(@"lastName")))
                                row.LastName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastName")), typeof(string));
                            else
                                row.LastName = null;

                            if (fieldNames.Contains("limitCredit") && !reader.IsDBNull(reader.GetOrdinal(@"limitCredit")))
                                row.LimitCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCredit")), typeof(decimal));
                            else
                                row.LimitCredit = null;

                            if (fieldNames.Contains("balanceCredit") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCredit")))
                                row.BalanceCredit = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCredit")), typeof(decimal));
                            else
                                row.BalanceCredit = null;

                            if (fieldNames.Contains("tipoCambioCompra") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioCompra")))
                                row.TipoCambioCompra = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioCompra")), typeof(decimal));
                            else
                                row.TipoCambioCompra = null;

                            if (fieldNames.Contains("tipoCambioVenta") && !reader.IsDBNull(reader.GetOrdinal(@"tipoCambioVenta")))
                                row.TipoCambioVenta = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipoCambioVenta")), typeof(decimal));
                            else
                                row.TipoCambioVenta = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));

                            if (fieldNames.Contains("maxDiasMora") && !reader.IsDBNull(reader.GetOrdinal(@"maxDiasMora")))
                                row.MaxDiasMora = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"maxDiasMora")), typeof(int));
                            else
                                row.MaxDiasMora = null;

                            if (fieldNames.Contains("montoAtrazado") && !reader.IsDBNull(reader.GetOrdinal(@"montoAtrazado")))
                                row.MontoAtrazado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoAtrazado")), typeof(decimal));
                            else
                                row.MontoAtrazado = null;

                            if (fieldNames.Contains("cantidadFactura") && !reader.IsDBNull(reader.GetOrdinal(@"cantidadFactura")))
                                row.CantidadFactura = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cantidadFactura")), typeof(int));
                            else
                                row.CantidadFactura = null;

                            if (fieldNames.Contains("capitalPrestado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPrestado")))
                                row.CapitalPrestado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPrestado")), typeof(decimal));
                            else
                                row.CapitalPrestado = null;

                            if (fieldNames.Contains("capitalPagado") && !reader.IsDBNull(reader.GetOrdinal(@"capitalPagado")))
                                row.CapitalPagado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalPagado")), typeof(decimal));
                            else
                                row.CapitalPagado = null;

                            if (fieldNames.Contains("interesPagado") && !reader.IsDBNull(reader.GetOrdinal(@"interesPagado")))
                                row.InteresPagado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesPagado")), typeof(decimal));
                            else
                                row.InteresPagado = null;

                            if (fieldNames.Contains("proximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"proximoPago")))
                                row.ProximoPago = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"proximoPago")), typeof(System.DateTime));
                            else
                                row.ProximoPago = null;

                            if (fieldNames.Contains("montoProximoPago") && !reader.IsDBNull(reader.GetOrdinal(@"montoProximoPago")))
                                row.MontoProximoPago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoProximoPago")), typeof(decimal));
                            else
                                row.MontoProximoPago = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public PrCxcGetReportCustomerExpensaMultipleResult PrCxcGetReportCustomerExpensa (int? prUserID, string prTokenID, int? prCompanyID)
        {

            PrCxcGetReportCustomerExpensaMultipleResult result = new PrCxcGetReportCustomerExpensaMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_expensas";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerExpensaResult resultRow = new PrCxcGetReportCustomerExpensaResult();
                            if (fieldNames.Contains(@"customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                resultRow.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));
                            if (fieldNames.Contains(@"documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                resultRow.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));
                            if (fieldNames.Contains(@"dateOn") && !reader.IsDBNull(reader.GetOrdinal(@"dateOn")))
                                resultRow.DateOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateOn")), typeof(System.DateTime));
                            if (fieldNames.Contains(@"amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                resultRow.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            if (fieldNames.Contains(@"simbol") && !reader.IsDBNull(reader.GetOrdinal(@"simbol")))
                                resultRow.Simbol = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"simbol")), typeof(string));
                            result.PrCxcGetReportCustomerExpensaResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerExpensaResult1 resultRow = new PrCxcGetReportCustomerExpensaResult1();
                            if (fieldNames.Contains(@"customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                resultRow.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));
                            if (fieldNames.Contains(@"documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                resultRow.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));
                            if (fieldNames.Contains(@"dateApply") && !reader.IsDBNull(reader.GetOrdinal(@"dateApply")))
                                resultRow.DateApply = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateApply")), typeof(System.DateTime));
                            if (fieldNames.Contains(@"cuota") && !reader.IsDBNull(reader.GetOrdinal(@"cuota")))
                                resultRow.Cuota = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cuota")), typeof(decimal));
                            if (fieldNames.Contains(@"remaining") && !reader.IsDBNull(reader.GetOrdinal(@"remaining")))
                                resultRow.Remaining = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"remaining")), typeof(decimal));
                            if (fieldNames.Contains(@"simbol") && !reader.IsDBNull(reader.GetOrdinal(@"simbol")))
                                resultRow.Simbol = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"simbol")), typeof(string));
                            result.PrCxcGetReportCustomerExpensaResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerExpensaResult2 resultRow = new PrCxcGetReportCustomerExpensaResult2();
                            if (fieldNames.Contains(@"customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                resultRow.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));
                            if (fieldNames.Contains(@"transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                resultRow.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            if (fieldNames.Contains(@"createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                resultRow.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                resultRow.CreatedOn = null;
                            if (fieldNames.Contains(@"amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                resultRow.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                resultRow.Amount = null;
                            if (fieldNames.Contains(@"simbol") && !reader.IsDBNull(reader.GetOrdinal(@"simbol")))
                                resultRow.Simbol = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"simbol")), typeof(string));
                            result.PrCxcGetReportCustomerExpensaResult2s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<PrCxcGetReportCustomerExpensaMultipleResult> PrCxcGetReportCustomerExpensaAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            PrCxcGetReportCustomerExpensaMultipleResult result = new PrCxcGetReportCustomerExpensaMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_expensas";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerExpensaResult resultRow = new PrCxcGetReportCustomerExpensaResult();
                            if (fieldNames.Contains(@"customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                resultRow.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));
                            if (fieldNames.Contains(@"documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                resultRow.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));
                            if (fieldNames.Contains(@"dateOn") && !reader.IsDBNull(reader.GetOrdinal(@"dateOn")))
                                resultRow.DateOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateOn")), typeof(System.DateTime));
                            if (fieldNames.Contains(@"amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                resultRow.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            if (fieldNames.Contains(@"simbol") && !reader.IsDBNull(reader.GetOrdinal(@"simbol")))
                                resultRow.Simbol = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"simbol")), typeof(string));
                            result.PrCxcGetReportCustomerExpensaResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerExpensaResult1 resultRow = new PrCxcGetReportCustomerExpensaResult1();
                            if (fieldNames.Contains(@"customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                resultRow.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));
                            if (fieldNames.Contains(@"documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                resultRow.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));
                            if (fieldNames.Contains(@"dateApply") && !reader.IsDBNull(reader.GetOrdinal(@"dateApply")))
                                resultRow.DateApply = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateApply")), typeof(System.DateTime));
                            if (fieldNames.Contains(@"cuota") && !reader.IsDBNull(reader.GetOrdinal(@"cuota")))
                                resultRow.Cuota = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cuota")), typeof(decimal));
                            if (fieldNames.Contains(@"remaining") && !reader.IsDBNull(reader.GetOrdinal(@"remaining")))
                                resultRow.Remaining = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"remaining")), typeof(decimal));
                            if (fieldNames.Contains(@"simbol") && !reader.IsDBNull(reader.GetOrdinal(@"simbol")))
                                resultRow.Simbol = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"simbol")), typeof(string));
                            result.PrCxcGetReportCustomerExpensaResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerExpensaResult2 resultRow = new PrCxcGetReportCustomerExpensaResult2();
                            if (fieldNames.Contains(@"customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                resultRow.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));
                            if (fieldNames.Contains(@"transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                resultRow.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            if (fieldNames.Contains(@"createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                resultRow.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                resultRow.CreatedOn = null;
                            if (fieldNames.Contains(@"amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                resultRow.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                resultRow.Amount = null;
                            if (fieldNames.Contains(@"simbol") && !reader.IsDBNull(reader.GetOrdinal(@"simbol")))
                                resultRow.Simbol = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"simbol")), typeof(string));
                            result.PrCxcGetReportCustomerExpensaResult2s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de clientes
        /// </summary>
        public List<PrCxcGetReportCustomerListResult> PrCxcGetReportCustomerList (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportCustomerListResult> result = new List<PrCxcGetReportCustomerListResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_list";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerListResult row = new PrCxcGetReportCustomerListResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("customerName") && !reader.IsDBNull(reader.GetOrdinal(@"customerName")))
                                row.CustomerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerName")), typeof(string));
                            else
                                row.CustomerName = null;

                            if (fieldNames.Contains("identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                row.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal(@"phone")))
                                row.Phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.Phone = null;

                            if (fieldNames.Contains("email") && !reader.IsDBNull(reader.GetOrdinal(@"email")))
                                row.Email = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"email")), typeof(string));
                            else
                                row.Email = null;

                            if (fieldNames.Contains("Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));

                            if (fieldNames.Contains("balanceTotal") && !reader.IsDBNull(reader.GetOrdinal(@"balanceTotal")))
                                row.BalanceTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceTotal")), typeof(decimal));
                            else
                                row.BalanceTotal = null;

                            if (fieldNames.Contains("balanceTotalCapital") && !reader.IsDBNull(reader.GetOrdinal(@"balanceTotalCapital")))
                                row.BalanceTotalCapital = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceTotalCapital")), typeof(decimal));
                            else
                                row.BalanceTotalCapital = null;

                            if (fieldNames.Contains("balanceTotalInteres") && !reader.IsDBNull(reader.GetOrdinal(@"balanceTotalInteres")))
                                row.BalanceTotalInteres = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceTotalInteres")), typeof(decimal));
                            else
                                row.BalanceTotalInteres = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// lista de clientes
        /// </summary>
        public async Task<List<PrCxcGetReportCustomerListResult>> PrCxcGetReportCustomerListAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportCustomerListResult> result = new List<PrCxcGetReportCustomerListResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_list";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerListResult row = new PrCxcGetReportCustomerListResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("customerName") && !reader.IsDBNull(reader.GetOrdinal(@"customerName")))
                                row.CustomerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerName")), typeof(string));
                            else
                                row.CustomerName = null;

                            if (fieldNames.Contains("identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                row.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));

                            if (fieldNames.Contains("phone") && !reader.IsDBNull(reader.GetOrdinal(@"phone")))
                                row.Phone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phone")), typeof(string));
                            else
                                row.Phone = null;

                            if (fieldNames.Contains("email") && !reader.IsDBNull(reader.GetOrdinal(@"email")))
                                row.Email = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"email")), typeof(string));
                            else
                                row.Email = null;

                            if (fieldNames.Contains("Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));

                            if (fieldNames.Contains("balanceTotal") && !reader.IsDBNull(reader.GetOrdinal(@"balanceTotal")))
                                row.BalanceTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceTotal")), typeof(decimal));
                            else
                                row.BalanceTotal = null;

                            if (fieldNames.Contains("balanceTotalCapital") && !reader.IsDBNull(reader.GetOrdinal(@"balanceTotalCapital")))
                                row.BalanceTotalCapital = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceTotalCapital")), typeof(decimal));
                            else
                                row.BalanceTotalCapital = null;

                            if (fieldNames.Contains("balanceTotalInteres") && !reader.IsDBNull(reader.GetOrdinal(@"balanceTotalInteres")))
                                row.BalanceTotalInteres = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceTotalInteres")), typeof(decimal));
                            else
                                row.BalanceTotalInteres = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Lista de Pagos del Cliente
        /// </summary>
        public List<PrCxcGetReportCustomerPayResult> PrCxcGetReportCustomerPay (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber, string prReference)
        {

            List<PrCxcGetReportCustomerPayResult> result = new List<PrCxcGetReportCustomerPayResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_pay";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);

                    DbParameter prReferenceParameter = cmd.CreateParameter();
                    prReferenceParameter.ParameterName = "prReference";
                    prReferenceParameter.Direction = ParameterDirection.Input;
                    prReferenceParameter.DbType = DbType.String;
                    prReferenceParameter.Size = 50;
                    if (prReference != null)
                    {
                        prReferenceParameter.Value = prReference;
                    }
                    else
                    {
                        prReferenceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prReferenceParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerPayResult row = new PrCxcGetReportCustomerPayResult();
                            if (fieldNames.Contains("contador") && !reader.IsDBNull(reader.GetOrdinal(@"contador")))
                                row.Contador = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"contador")), typeof(long));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("userName") && !reader.IsDBNull(reader.GetOrdinal(@"userName")))
                                row.UserName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userName")), typeof(string));
                            else
                                row.UserName = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("Pago") && !reader.IsDBNull(reader.GetOrdinal(@"Pago")))
                                row.Pago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pago")), typeof(decimal));
                            else
                                row.Pago = null;

                            if (fieldNames.Contains("reference1") && !reader.IsDBNull(reader.GetOrdinal(@"reference1")))
                                row.Reference1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference1")), typeof(string));
                            else
                                row.Reference1 = null;

                            if (fieldNames.Contains("MontoDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"MontoDesembolso")))
                                row.MontoDesembolso = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MontoDesembolso")), typeof(decimal));

                            if (fieldNames.Contains("Balance") && !reader.IsDBNull(reader.GetOrdinal(@"Balance")))
                                row.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Balance")), typeof(decimal));

                            if (fieldNames.Contains("MonedaDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaDesembolso")))
                                row.MonedaDesembolso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaDesembolso")), typeof(string));

                            if (fieldNames.Contains("SaldoAterior") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoAterior")))
                                row.SaldoAterior = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoAterior")), typeof(string));
                            else
                                row.SaldoAterior = null;

                            if (fieldNames.Contains("SaldoNuevo") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoNuevo")))
                                row.SaldoNuevo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoNuevo")), typeof(string));
                            else
                                row.SaldoNuevo = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Lista de Pagos del Cliente
        /// </summary>
        public async Task<List<PrCxcGetReportCustomerPayResult>> PrCxcGetReportCustomerPayAsync (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber, string prReference)
        {

            List<PrCxcGetReportCustomerPayResult> result = new List<PrCxcGetReportCustomerPayResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_pay";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);

                    DbParameter prReferenceParameter = cmd.CreateParameter();
                    prReferenceParameter.ParameterName = "prReference";
                    prReferenceParameter.Direction = ParameterDirection.Input;
                    prReferenceParameter.DbType = DbType.String;
                    prReferenceParameter.Size = 50;
                    if (prReference != null)
                    {
                        prReferenceParameter.Value = prReference;
                    }
                    else
                    {
                        prReferenceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prReferenceParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerPayResult row = new PrCxcGetReportCustomerPayResult();
                            if (fieldNames.Contains("contador") && !reader.IsDBNull(reader.GetOrdinal(@"contador")))
                                row.Contador = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"contador")), typeof(long));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("userName") && !reader.IsDBNull(reader.GetOrdinal(@"userName")))
                                row.UserName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userName")), typeof(string));
                            else
                                row.UserName = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("Pago") && !reader.IsDBNull(reader.GetOrdinal(@"Pago")))
                                row.Pago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pago")), typeof(decimal));
                            else
                                row.Pago = null;

                            if (fieldNames.Contains("reference1") && !reader.IsDBNull(reader.GetOrdinal(@"reference1")))
                                row.Reference1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference1")), typeof(string));
                            else
                                row.Reference1 = null;

                            if (fieldNames.Contains("MontoDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"MontoDesembolso")))
                                row.MontoDesembolso = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MontoDesembolso")), typeof(decimal));

                            if (fieldNames.Contains("Balance") && !reader.IsDBNull(reader.GetOrdinal(@"Balance")))
                                row.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Balance")), typeof(decimal));

                            if (fieldNames.Contains("MonedaDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaDesembolso")))
                                row.MonedaDesembolso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaDesembolso")), typeof(string));

                            if (fieldNames.Contains("SaldoAterior") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoAterior")))
                                row.SaldoAterior = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoAterior")), typeof(string));
                            else
                                row.SaldoAterior = null;

                            if (fieldNames.Contains("SaldoNuevo") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoNuevo")))
                                row.SaldoNuevo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoNuevo")), typeof(string));
                            else
                                row.SaldoNuevo = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Lista de Pagos del Cliente
        /// </summary>
        public PrCxcGetReportCustomerPayByInvoiceMultipleResult PrCxcGetReportCustomerPayByInvoice (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber, string prInvoiceNumber)
        {

            PrCxcGetReportCustomerPayByInvoiceMultipleResult result = new PrCxcGetReportCustomerPayByInvoiceMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_pay_by_invoice";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);

                    DbParameter prInvoiceNumberParameter = cmd.CreateParameter();
                    prInvoiceNumberParameter.ParameterName = "prInvoiceNumber";
                    prInvoiceNumberParameter.Direction = ParameterDirection.Input;
                    prInvoiceNumberParameter.DbType = DbType.String;
                    prInvoiceNumberParameter.Size = 50;
                    if (prInvoiceNumber != null)
                    {
                        prInvoiceNumberParameter.Value = prInvoiceNumber;
                    }
                    else
                    {
                        prInvoiceNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInvoiceNumberParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerPayByInvoiceResult resultRow = new PrCxcGetReportCustomerPayByInvoiceResult();
                            if (fieldNames.Contains(@"customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                resultRow.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            if (fieldNames.Contains(@"customerName") && !reader.IsDBNull(reader.GetOrdinal(@"customerName")))
                                resultRow.CustomerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerName")), typeof(string));
                            else
                                resultRow.CustomerName = null;
                            if (fieldNames.Contains(@"phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                resultRow.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                resultRow.PhoneNumber = null;
                            if (fieldNames.Contains(@"location") && !reader.IsDBNull(reader.GetOrdinal(@"location")))
                                resultRow.Location = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"location")), typeof(string));
                            else
                                resultRow.Location = null;
                            if (fieldNames.Contains(@"identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                resultRow.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));
                            if (fieldNames.Contains(@"fechaDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"fechaDesembolso")))
                                resultRow.FechaDesembolso = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fechaDesembolso")), typeof(System.DateTime));
                            if (fieldNames.Contains(@"montoDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"montoDesembolso")))
                                resultRow.MontoDesembolso = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoDesembolso")), typeof(decimal));
                            if (fieldNames.Contains(@"interesDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"interesDesembolso")))
                                resultRow.InteresDesembolso = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesDesembolso")), typeof(decimal));
                            if (fieldNames.Contains(@"plazo") && !reader.IsDBNull(reader.GetOrdinal(@"plazo")))
                                resultRow.Plazo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"plazo")), typeof(int));
                            if (fieldNames.Contains(@"statusDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"statusDesembolso")))
                                resultRow.StatusDesembolso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusDesembolso")), typeof(string));
                            else
                                resultRow.StatusDesembolso = null;
                            if (fieldNames.Contains(@"frecuenciaDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"frecuenciaDesembolso")))
                                resultRow.FrecuenciaDesembolso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"frecuenciaDesembolso")), typeof(string));
                            else
                                resultRow.FrecuenciaDesembolso = null;
                            result.PrCxcGetReportCustomerPayByInvoiceResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerPayByInvoiceResult1 resultRow = new PrCxcGetReportCustomerPayByInvoiceResult1();
                            if (fieldNames.Contains(@"contador") && !reader.IsDBNull(reader.GetOrdinal(@"contador")))
                                resultRow.Contador = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"contador")), typeof(long));
                            if (fieldNames.Contains(@"createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                resultRow.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                resultRow.CreatedOn = null;
                            if (fieldNames.Contains(@"createdOnDate") && !reader.IsDBNull(reader.GetOrdinal(@"createdOnDate")))
                                resultRow.CreatedOnDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOnDate")), typeof(System.DateTime));
                            else
                                resultRow.CreatedOnDate = null;
                            if (fieldNames.Contains(@"transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                resultRow.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            if (fieldNames.Contains(@"userName") && !reader.IsDBNull(reader.GetOrdinal(@"userName")))
                                resultRow.UserName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userName")), typeof(string));
                            else
                                resultRow.UserName = null;
                            if (fieldNames.Contains(@"note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                resultRow.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                resultRow.Note = null;
                            if (fieldNames.Contains(@"Pago") && !reader.IsDBNull(reader.GetOrdinal(@"Pago")))
                                resultRow.Pago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pago")), typeof(decimal));
                            else
                                resultRow.Pago = null;
                            if (fieldNames.Contains(@"reference1") && !reader.IsDBNull(reader.GetOrdinal(@"reference1")))
                                resultRow.Reference1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference1")), typeof(string));
                            else
                                resultRow.Reference1 = null;
                            if (fieldNames.Contains(@"MontoDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"MontoDesembolso")))
                                resultRow.MontoDesembolso = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MontoDesembolso")), typeof(decimal));
                            if (fieldNames.Contains(@"Balance") && !reader.IsDBNull(reader.GetOrdinal(@"Balance")))
                                resultRow.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Balance")), typeof(decimal));
                            if (fieldNames.Contains(@"MonedaDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaDesembolso")))
                                resultRow.MonedaDesembolso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaDesembolso")), typeof(string));
                            if (fieldNames.Contains(@"SaldoAterior") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoAterior")))
                                resultRow.SaldoAterior = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoAterior")), typeof(string));
                            else
                                resultRow.SaldoAterior = null;
                            if (fieldNames.Contains(@"SaldoNuevo") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoNuevo")))
                                resultRow.SaldoNuevo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoNuevo")), typeof(string));
                            else
                                resultRow.SaldoNuevo = null;
                            result.PrCxcGetReportCustomerPayByInvoiceResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Lista de Pagos del Cliente
        /// </summary>
        public async Task<PrCxcGetReportCustomerPayByInvoiceMultipleResult> PrCxcGetReportCustomerPayByInvoiceAsync (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber, string prInvoiceNumber)
        {

            PrCxcGetReportCustomerPayByInvoiceMultipleResult result = new PrCxcGetReportCustomerPayByInvoiceMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_pay_by_invoice";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);

                    DbParameter prInvoiceNumberParameter = cmd.CreateParameter();
                    prInvoiceNumberParameter.ParameterName = "prInvoiceNumber";
                    prInvoiceNumberParameter.Direction = ParameterDirection.Input;
                    prInvoiceNumberParameter.DbType = DbType.String;
                    prInvoiceNumberParameter.Size = 50;
                    if (prInvoiceNumber != null)
                    {
                        prInvoiceNumberParameter.Value = prInvoiceNumber;
                    }
                    else
                    {
                        prInvoiceNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInvoiceNumberParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerPayByInvoiceResult resultRow = new PrCxcGetReportCustomerPayByInvoiceResult();
                            if (fieldNames.Contains(@"customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                resultRow.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            if (fieldNames.Contains(@"customerName") && !reader.IsDBNull(reader.GetOrdinal(@"customerName")))
                                resultRow.CustomerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerName")), typeof(string));
                            else
                                resultRow.CustomerName = null;
                            if (fieldNames.Contains(@"phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                resultRow.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                resultRow.PhoneNumber = null;
                            if (fieldNames.Contains(@"location") && !reader.IsDBNull(reader.GetOrdinal(@"location")))
                                resultRow.Location = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"location")), typeof(string));
                            else
                                resultRow.Location = null;
                            if (fieldNames.Contains(@"identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                resultRow.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));
                            if (fieldNames.Contains(@"fechaDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"fechaDesembolso")))
                                resultRow.FechaDesembolso = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fechaDesembolso")), typeof(System.DateTime));
                            if (fieldNames.Contains(@"montoDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"montoDesembolso")))
                                resultRow.MontoDesembolso = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoDesembolso")), typeof(decimal));
                            if (fieldNames.Contains(@"interesDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"interesDesembolso")))
                                resultRow.InteresDesembolso = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesDesembolso")), typeof(decimal));
                            if (fieldNames.Contains(@"plazo") && !reader.IsDBNull(reader.GetOrdinal(@"plazo")))
                                resultRow.Plazo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"plazo")), typeof(int));
                            if (fieldNames.Contains(@"statusDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"statusDesembolso")))
                                resultRow.StatusDesembolso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusDesembolso")), typeof(string));
                            else
                                resultRow.StatusDesembolso = null;
                            if (fieldNames.Contains(@"frecuenciaDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"frecuenciaDesembolso")))
                                resultRow.FrecuenciaDesembolso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"frecuenciaDesembolso")), typeof(string));
                            else
                                resultRow.FrecuenciaDesembolso = null;
                            result.PrCxcGetReportCustomerPayByInvoiceResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerPayByInvoiceResult1 resultRow = new PrCxcGetReportCustomerPayByInvoiceResult1();
                            if (fieldNames.Contains(@"contador") && !reader.IsDBNull(reader.GetOrdinal(@"contador")))
                                resultRow.Contador = (long)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"contador")), typeof(long));
                            if (fieldNames.Contains(@"createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                resultRow.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                resultRow.CreatedOn = null;
                            if (fieldNames.Contains(@"createdOnDate") && !reader.IsDBNull(reader.GetOrdinal(@"createdOnDate")))
                                resultRow.CreatedOnDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOnDate")), typeof(System.DateTime));
                            else
                                resultRow.CreatedOnDate = null;
                            if (fieldNames.Contains(@"transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                resultRow.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            if (fieldNames.Contains(@"userName") && !reader.IsDBNull(reader.GetOrdinal(@"userName")))
                                resultRow.UserName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userName")), typeof(string));
                            else
                                resultRow.UserName = null;
                            if (fieldNames.Contains(@"note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                resultRow.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                resultRow.Note = null;
                            if (fieldNames.Contains(@"Pago") && !reader.IsDBNull(reader.GetOrdinal(@"Pago")))
                                resultRow.Pago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Pago")), typeof(decimal));
                            else
                                resultRow.Pago = null;
                            if (fieldNames.Contains(@"reference1") && !reader.IsDBNull(reader.GetOrdinal(@"reference1")))
                                resultRow.Reference1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference1")), typeof(string));
                            else
                                resultRow.Reference1 = null;
                            if (fieldNames.Contains(@"MontoDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"MontoDesembolso")))
                                resultRow.MontoDesembolso = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MontoDesembolso")), typeof(decimal));
                            if (fieldNames.Contains(@"Balance") && !reader.IsDBNull(reader.GetOrdinal(@"Balance")))
                                resultRow.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Balance")), typeof(decimal));
                            if (fieldNames.Contains(@"MonedaDesembolso") && !reader.IsDBNull(reader.GetOrdinal(@"MonedaDesembolso")))
                                resultRow.MonedaDesembolso = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MonedaDesembolso")), typeof(string));
                            if (fieldNames.Contains(@"SaldoAterior") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoAterior")))
                                resultRow.SaldoAterior = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoAterior")), typeof(string));
                            else
                                resultRow.SaldoAterior = null;
                            if (fieldNames.Contains(@"SaldoNuevo") && !reader.IsDBNull(reader.GetOrdinal(@"SaldoNuevo")))
                                resultRow.SaldoNuevo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SaldoNuevo")), typeof(string));
                            else
                                resultRow.SaldoNuevo = null;
                            result.PrCxcGetReportCustomerPayByInvoiceResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// muestra la lista de consultas elaboradas a sin riesgo
        /// </summary>
        public List<PrCxcGetReportCustomerSrListResult> PrCxcGetReportCustomerSrList (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrCxcGetReportCustomerSrListResult> result = new List<PrCxcGetReportCustomerSrListResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_sr_list";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerSrListResult row = new PrCxcGetReportCustomerSrListResult();
                            if (fieldNames.Contains("requestID") && !reader.IsDBNull(reader.GetOrdinal(@"requestID")))
                                row.RequestID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"requestID")), typeof(int));

                            if (fieldNames.Contains("cliente") && !reader.IsDBNull(reader.GetOrdinal(@"cliente")))
                                row.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cliente")), typeof(string));

                            if (fieldNames.Contains("cedulaCliente") && !reader.IsDBNull(reader.GetOrdinal(@"cedulaCliente")))
                                row.CedulaCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cedulaCliente")), typeof(string));

                            if (fieldNames.Contains("file_") && !reader.IsDBNull(reader.GetOrdinal(@"file_")))
                                row.File = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"file_")), typeof(string));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));

                            if (fieldNames.Contains("Usuario") && !reader.IsDBNull(reader.GetOrdinal(@"Usuario")))
                                row.Usuario = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Usuario")), typeof(string));
                            else
                                row.Usuario = null;

                            if (fieldNames.Contains("Estado") && !reader.IsDBNull(reader.GetOrdinal(@"Estado")))
                                row.Estado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Estado")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// muestra la lista de consultas elaboradas a sin riesgo
        /// </summary>
        public async Task<List<PrCxcGetReportCustomerSrListResult>> PrCxcGetReportCustomerSrListAsync (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrCxcGetReportCustomerSrListResult> result = new List<PrCxcGetReportCustomerSrListResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_sr_list";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportCustomerSrListResult row = new PrCxcGetReportCustomerSrListResult();
                            if (fieldNames.Contains("requestID") && !reader.IsDBNull(reader.GetOrdinal(@"requestID")))
                                row.RequestID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"requestID")), typeof(int));

                            if (fieldNames.Contains("cliente") && !reader.IsDBNull(reader.GetOrdinal(@"cliente")))
                                row.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cliente")), typeof(string));

                            if (fieldNames.Contains("cedulaCliente") && !reader.IsDBNull(reader.GetOrdinal(@"cedulaCliente")))
                                row.CedulaCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cedulaCliente")), typeof(string));

                            if (fieldNames.Contains("file_") && !reader.IsDBNull(reader.GetOrdinal(@"file_")))
                                row.File = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"file_")), typeof(string));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));

                            if (fieldNames.Contains("Usuario") && !reader.IsDBNull(reader.GetOrdinal(@"Usuario")))
                                row.Usuario = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Usuario")), typeof(string));
                            else
                                row.Usuario = null;

                            if (fieldNames.Contains("Estado") && !reader.IsDBNull(reader.GetOrdinal(@"Estado")))
                                row.Estado = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Estado")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Estado de cuenta del cliente
        /// </summary>
        public PrCxcGetReportCustomerStatusMultipleResult PrCxcGetReportCustomerStatus (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            PrCxcGetReportCustomerStatusMultipleResult result = new PrCxcGetReportCustomerStatusMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_status";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerStatusResult resultRow = new PrCxcGetReportCustomerStatusResult();
                            if (fieldNames.Contains(@"INFORMACION_DEL_CLIENTE") && !reader.IsDBNull(reader.GetOrdinal(@"INFORMACION_DEL_CLIENTE")))
                                resultRow.INFORMACIONDELCLIENTE = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"INFORMACION_DEL_CLIENTE")), typeof(string));
                            if (fieldNames.Contains(@"customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                resultRow.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            else
                                resultRow.CustomerNumber = null;
                            if (fieldNames.Contains(@"identificationType") && !reader.IsDBNull(reader.GetOrdinal(@"identificationType")))
                                resultRow.IdentificationType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identificationType")), typeof(string));
                            else
                                resultRow.IdentificationType = null;
                            if (fieldNames.Contains(@"firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                resultRow.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                resultRow.FirstName = null;
                            if (fieldNames.Contains(@"lastName") && !reader.IsDBNull(reader.GetOrdinal(@"lastName")))
                                resultRow.LastName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastName")), typeof(string));
                            else
                                resultRow.LastName = null;
                            if (fieldNames.Contains(@"comercialName") && !reader.IsDBNull(reader.GetOrdinal(@"comercialName")))
                                resultRow.ComercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comercialName")), typeof(string));
                            else
                                resultRow.ComercialName = null;
                            if (fieldNames.Contains(@"legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                resultRow.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                resultRow.LegalName = null;
                            if (fieldNames.Contains(@"address") && !reader.IsDBNull(reader.GetOrdinal(@"address")))
                                resultRow.Address = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"address")), typeof(string));
                            else
                                resultRow.Address = null;
                            if (fieldNames.Contains(@"identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                resultRow.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));
                            else
                                resultRow.Identification = null;
                            if (fieldNames.Contains(@"country") && !reader.IsDBNull(reader.GetOrdinal(@"country")))
                                resultRow.Country = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"country")), typeof(string));
                            else
                                resultRow.Country = null;
                            if (fieldNames.Contains(@"state") && !reader.IsDBNull(reader.GetOrdinal(@"state")))
                                resultRow.State = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"state")), typeof(string));
                            else
                                resultRow.State = null;
                            if (fieldNames.Contains(@"city") && !reader.IsDBNull(reader.GetOrdinal(@"city")))
                                resultRow.City = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"city")), typeof(string));
                            else
                                resultRow.City = null;
                            if (fieldNames.Contains(@"birth") && !reader.IsDBNull(reader.GetOrdinal(@"birth")))
                                resultRow.Birth = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"birth")), typeof(System.DateTime));
                            else
                                resultRow.Birth = null;
                            if (fieldNames.Contains(@"statusClient") && !reader.IsDBNull(reader.GetOrdinal(@"statusClient")))
                                resultRow.StatusClient = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusClient")), typeof(string));
                            else
                                resultRow.StatusClient = null;
                            if (fieldNames.Contains(@"limitCreditCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"limitCreditCordoba")))
                                resultRow.LimitCreditCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCreditCordoba")), typeof(decimal));
                            else
                                resultRow.LimitCreditCordoba = null;
                            if (fieldNames.Contains(@"balanceCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCordoba")))
                                resultRow.BalanceCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCordoba")), typeof(decimal));
                            else
                                resultRow.BalanceCordoba = null;
                            if (fieldNames.Contains(@"deudaCordobas") && !reader.IsDBNull(reader.GetOrdinal(@"deudaCordobas")))
                                resultRow.DeudaCordobas = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deudaCordobas")), typeof(decimal));
                            else
                                resultRow.DeudaCordobas = null;
                            if (fieldNames.Contains(@"deudaDolares") && !reader.IsDBNull(reader.GetOrdinal(@"deudaDolares")))
                                resultRow.DeudaDolares = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deudaDolares")), typeof(decimal));
                            else
                                resultRow.DeudaDolares = null;
                            if (fieldNames.Contains(@"incomeCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"incomeCordoba")))
                                resultRow.IncomeCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"incomeCordoba")), typeof(decimal));
                            else
                                resultRow.IncomeCordoba = null;
                            result.PrCxcGetReportCustomerStatusResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerStatusResult1 resultRow = new PrCxcGetReportCustomerStatusResult1();
                            if (fieldNames.Contains(@"INFORMACION_DE_LINEA_CREDITO") && !reader.IsDBNull(reader.GetOrdinal(@"INFORMACION_DE_LINEA_CREDITO")))
                                resultRow.INFORMACIONDELINEACREDITO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"INFORMACION_DE_LINEA_CREDITO")), typeof(string));
                            if (fieldNames.Contains(@"lineName") && !reader.IsDBNull(reader.GetOrdinal(@"lineName")))
                                resultRow.LineName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lineName")), typeof(string));
                            else
                                resultRow.LineName = null;
                            if (fieldNames.Contains(@"lineNumber") && !reader.IsDBNull(reader.GetOrdinal(@"lineNumber")))
                                resultRow.LineNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lineNumber")), typeof(string));
                            else
                                resultRow.LineNumber = null;
                            if (fieldNames.Contains(@"limitCreditCordobaLinea") && !reader.IsDBNull(reader.GetOrdinal(@"limitCreditCordobaLinea")))
                                resultRow.LimitCreditCordobaLinea = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCreditCordobaLinea")), typeof(decimal));
                            else
                                resultRow.LimitCreditCordobaLinea = null;
                            if (fieldNames.Contains(@"balanceCordobaLinea") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCordobaLinea")))
                                resultRow.BalanceCordobaLinea = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCordobaLinea")), typeof(decimal));
                            else
                                resultRow.BalanceCordobaLinea = null;
                            if (fieldNames.Contains(@"interestYearLine") && !reader.IsDBNull(reader.GetOrdinal(@"interestYearLine")))
                                resultRow.InterestYearLine = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interestYearLine")), typeof(decimal));
                            else
                                resultRow.InterestYearLine = null;
                            if (fieldNames.Contains(@"termLine") && !reader.IsDBNull(reader.GetOrdinal(@"termLine")))
                                resultRow.TermLine = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"termLine")), typeof(decimal));
                            else
                                resultRow.TermLine = null;
                            if (fieldNames.Contains(@"periodPayLine") && !reader.IsDBNull(reader.GetOrdinal(@"periodPayLine")))
                                resultRow.PeriodPayLine = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"periodPayLine")), typeof(string));
                            else
                                resultRow.PeriodPayLine = null;
                            if (fieldNames.Contains(@"statusLine") && !reader.IsDBNull(reader.GetOrdinal(@"statusLine")))
                                resultRow.StatusLine = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusLine")), typeof(string));
                            else
                                resultRow.StatusLine = null;
                            result.PrCxcGetReportCustomerStatusResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerStatusResult2 resultRow = new PrCxcGetReportCustomerStatusResult2();
                            if (fieldNames.Contains(@"INFORMACION_DOCUMENTO_CREDITO") && !reader.IsDBNull(reader.GetOrdinal(@"INFORMACION_DOCUMENTO_CREDITO")))
                                resultRow.INFORMACIONDOCUMENTOCREDITO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"INFORMACION_DOCUMENTO_CREDITO")), typeof(string));
                            if (fieldNames.Contains(@"lineNumber") && !reader.IsDBNull(reader.GetOrdinal(@"lineNumber")))
                                resultRow.LineNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lineNumber")), typeof(string));
                            else
                                resultRow.LineNumber = null;
                            if (fieldNames.Contains(@"documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                resultRow.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));
                            else
                                resultRow.DocumentNumber = null;
                            if (fieldNames.Contains(@"documentOn") && !reader.IsDBNull(reader.GetOrdinal(@"documentOn")))
                                resultRow.DocumentOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentOn")), typeof(System.DateTime));
                            else
                                resultRow.DocumentOn = null;
                            if (fieldNames.Contains(@"amountDocument") && !reader.IsDBNull(reader.GetOrdinal(@"amountDocument")))
                                resultRow.AmountDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountDocument")), typeof(decimal));
                            else
                                resultRow.AmountDocument = null;
                            if (fieldNames.Contains(@"interesDocument") && !reader.IsDBNull(reader.GetOrdinal(@"interesDocument")))
                                resultRow.InteresDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesDocument")), typeof(decimal));
                            else
                                resultRow.InteresDocument = null;
                            if (fieldNames.Contains(@"interesDocumentMultiploDe120") && !reader.IsDBNull(reader.GetOrdinal(@"interesDocumentMultiploDe120")))
                                resultRow.InteresDocumentMultiploDe120 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesDocumentMultiploDe120")), typeof(decimal));
                            else
                                resultRow.InteresDocumentMultiploDe120 = null;
                            if (fieldNames.Contains(@"termDocument") && !reader.IsDBNull(reader.GetOrdinal(@"termDocument")))
                                resultRow.TermDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"termDocument")), typeof(decimal));
                            else
                                resultRow.TermDocument = null;
                            if (fieldNames.Contains(@"periodPayDocument") && !reader.IsDBNull(reader.GetOrdinal(@"periodPayDocument")))
                                resultRow.PeriodPayDocument = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"periodPayDocument")), typeof(string));
                            else
                                resultRow.PeriodPayDocument = null;
                            if (fieldNames.Contains(@"statusDocument") && !reader.IsDBNull(reader.GetOrdinal(@"statusDocument")))
                                resultRow.StatusDocument = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusDocument")), typeof(string));
                            else
                                resultRow.StatusDocument = null;
                            if (fieldNames.Contains(@"moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                resultRow.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));
                            else
                                resultRow.Moneda = null;
                            if (fieldNames.Contains(@"balanceDocument") && !reader.IsDBNull(reader.GetOrdinal(@"balanceDocument")))
                                resultRow.BalanceDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceDocument")), typeof(decimal));
                            else
                                resultRow.BalanceDocument = null;
                            if (fieldNames.Contains(@"dayAtrazo") && !reader.IsDBNull(reader.GetOrdinal(@"dayAtrazo")))
                                resultRow.DayAtrazo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayAtrazo")), typeof(int));
                            if (fieldNames.Contains(@"amountAtrazo") && !reader.IsDBNull(reader.GetOrdinal(@"amountAtrazo")))
                                resultRow.AmountAtrazo = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountAtrazo")), typeof(decimal));
                            if (fieldNames.Contains(@"interestTotalMontoDocument") && !reader.IsDBNull(reader.GetOrdinal(@"interestTotalMontoDocument")))
                                resultRow.InterestTotalMontoDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interestTotalMontoDocument")), typeof(decimal));
                            else
                                resultRow.InterestTotalMontoDocument = null;
                            if (fieldNames.Contains(@"vencimientoUltimaCuota") && !reader.IsDBNull(reader.GetOrdinal(@"vencimientoUltimaCuota")))
                                resultRow.VencimientoUltimaCuota = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"vencimientoUltimaCuota")), typeof(System.DateTime));
                            else
                                resultRow.VencimientoUltimaCuota = null;
                            if (fieldNames.Contains(@"promedioDiaPago") && !reader.IsDBNull(reader.GetOrdinal(@"promedioDiaPago")))
                                resultRow.PromedioDiaPago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"promedioDiaPago")), typeof(decimal));
                            if (fieldNames.Contains(@"atrasoCancelacionDia") && !reader.IsDBNull(reader.GetOrdinal(@"atrasoCancelacionDia")))
                                resultRow.AtrasoCancelacionDia = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"atrasoCancelacionDia")), typeof(int));
                            if (fieldNames.Contains(@"nota") && !reader.IsDBNull(reader.GetOrdinal(@"nota")))
                                resultRow.Nota = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nota")), typeof(string));
                            else
                                resultRow.Nota = null;
                            result.PrCxcGetReportCustomerStatusResult2s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerStatusResult3 resultRow = new PrCxcGetReportCustomerStatusResult3();
                            if (fieldNames.Contains(@"INFORMACION_TABLA_AMORITIZACION") && !reader.IsDBNull(reader.GetOrdinal(@"INFORMACION_TABLA_AMORITIZACION")))
                                resultRow.INFORMACIONTABLAAMORITIZACION = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"INFORMACION_TABLA_AMORITIZACION")), typeof(string));
                            if (fieldNames.Contains(@"documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                resultRow.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));
                            else
                                resultRow.DocumentNumber = null;
                            if (fieldNames.Contains(@"dateApplyAmori") && !reader.IsDBNull(reader.GetOrdinal(@"dateApplyAmori")))
                                resultRow.DateApplyAmori = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateApplyAmori")), typeof(System.DateTime));
                            else
                                resultRow.DateApplyAmori = null;
                            if (fieldNames.Contains(@"balanceStartAmori") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStartAmori")))
                                resultRow.BalanceStartAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStartAmori")), typeof(decimal));
                            else
                                resultRow.BalanceStartAmori = null;
                            if (fieldNames.Contains(@"interestAmori") && !reader.IsDBNull(reader.GetOrdinal(@"interestAmori")))
                                resultRow.InterestAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interestAmori")), typeof(decimal));
                            else
                                resultRow.InterestAmori = null;
                            if (fieldNames.Contains(@"capitalAmori") && !reader.IsDBNull(reader.GetOrdinal(@"capitalAmori")))
                                resultRow.CapitalAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalAmori")), typeof(decimal));
                            else
                                resultRow.CapitalAmori = null;
                            if (fieldNames.Contains(@"shareAmori") && !reader.IsDBNull(reader.GetOrdinal(@"shareAmori")))
                                resultRow.ShareAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"shareAmori")), typeof(decimal));
                            else
                                resultRow.ShareAmori = null;
                            if (fieldNames.Contains(@"balanceEndAmori") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEndAmori")))
                                resultRow.BalanceEndAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEndAmori")), typeof(decimal));
                            else
                                resultRow.BalanceEndAmori = null;
                            if (fieldNames.Contains(@"remainingAmori") && !reader.IsDBNull(reader.GetOrdinal(@"remainingAmori")))
                                resultRow.RemainingAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"remainingAmori")), typeof(decimal));
                            else
                                resultRow.RemainingAmori = null;
                            if (fieldNames.Contains(@"dayDelayAmori") && !reader.IsDBNull(reader.GetOrdinal(@"dayDelayAmori")))
                                resultRow.DayDelayAmori = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayDelayAmori")), typeof(int));
                            else
                                resultRow.DayDelayAmori = null;
                            if (fieldNames.Contains(@"statusShare") && !reader.IsDBNull(reader.GetOrdinal(@"statusShare")))
                                resultRow.StatusShare = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusShare")), typeof(string));
                            else
                                resultRow.StatusShare = null;
                            result.PrCxcGetReportCustomerStatusResult3s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Estado de cuenta del cliente
        /// </summary>
        public async Task<PrCxcGetReportCustomerStatusMultipleResult> PrCxcGetReportCustomerStatusAsync (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            PrCxcGetReportCustomerStatusMultipleResult result = new PrCxcGetReportCustomerStatusMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_status";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerStatusResult resultRow = new PrCxcGetReportCustomerStatusResult();
                            if (fieldNames.Contains(@"INFORMACION_DEL_CLIENTE") && !reader.IsDBNull(reader.GetOrdinal(@"INFORMACION_DEL_CLIENTE")))
                                resultRow.INFORMACIONDELCLIENTE = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"INFORMACION_DEL_CLIENTE")), typeof(string));
                            if (fieldNames.Contains(@"customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                resultRow.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            else
                                resultRow.CustomerNumber = null;
                            if (fieldNames.Contains(@"identificationType") && !reader.IsDBNull(reader.GetOrdinal(@"identificationType")))
                                resultRow.IdentificationType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identificationType")), typeof(string));
                            else
                                resultRow.IdentificationType = null;
                            if (fieldNames.Contains(@"firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                resultRow.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                resultRow.FirstName = null;
                            if (fieldNames.Contains(@"lastName") && !reader.IsDBNull(reader.GetOrdinal(@"lastName")))
                                resultRow.LastName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastName")), typeof(string));
                            else
                                resultRow.LastName = null;
                            if (fieldNames.Contains(@"comercialName") && !reader.IsDBNull(reader.GetOrdinal(@"comercialName")))
                                resultRow.ComercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comercialName")), typeof(string));
                            else
                                resultRow.ComercialName = null;
                            if (fieldNames.Contains(@"legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                resultRow.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                resultRow.LegalName = null;
                            if (fieldNames.Contains(@"address") && !reader.IsDBNull(reader.GetOrdinal(@"address")))
                                resultRow.Address = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"address")), typeof(string));
                            else
                                resultRow.Address = null;
                            if (fieldNames.Contains(@"identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                resultRow.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));
                            else
                                resultRow.Identification = null;
                            if (fieldNames.Contains(@"country") && !reader.IsDBNull(reader.GetOrdinal(@"country")))
                                resultRow.Country = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"country")), typeof(string));
                            else
                                resultRow.Country = null;
                            if (fieldNames.Contains(@"state") && !reader.IsDBNull(reader.GetOrdinal(@"state")))
                                resultRow.State = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"state")), typeof(string));
                            else
                                resultRow.State = null;
                            if (fieldNames.Contains(@"city") && !reader.IsDBNull(reader.GetOrdinal(@"city")))
                                resultRow.City = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"city")), typeof(string));
                            else
                                resultRow.City = null;
                            if (fieldNames.Contains(@"birth") && !reader.IsDBNull(reader.GetOrdinal(@"birth")))
                                resultRow.Birth = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"birth")), typeof(System.DateTime));
                            else
                                resultRow.Birth = null;
                            if (fieldNames.Contains(@"statusClient") && !reader.IsDBNull(reader.GetOrdinal(@"statusClient")))
                                resultRow.StatusClient = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusClient")), typeof(string));
                            else
                                resultRow.StatusClient = null;
                            if (fieldNames.Contains(@"limitCreditCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"limitCreditCordoba")))
                                resultRow.LimitCreditCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCreditCordoba")), typeof(decimal));
                            else
                                resultRow.LimitCreditCordoba = null;
                            if (fieldNames.Contains(@"balanceCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCordoba")))
                                resultRow.BalanceCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCordoba")), typeof(decimal));
                            else
                                resultRow.BalanceCordoba = null;
                            if (fieldNames.Contains(@"deudaCordobas") && !reader.IsDBNull(reader.GetOrdinal(@"deudaCordobas")))
                                resultRow.DeudaCordobas = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deudaCordobas")), typeof(decimal));
                            else
                                resultRow.DeudaCordobas = null;
                            if (fieldNames.Contains(@"deudaDolares") && !reader.IsDBNull(reader.GetOrdinal(@"deudaDolares")))
                                resultRow.DeudaDolares = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"deudaDolares")), typeof(decimal));
                            else
                                resultRow.DeudaDolares = null;
                            if (fieldNames.Contains(@"incomeCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"incomeCordoba")))
                                resultRow.IncomeCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"incomeCordoba")), typeof(decimal));
                            else
                                resultRow.IncomeCordoba = null;
                            result.PrCxcGetReportCustomerStatusResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerStatusResult1 resultRow = new PrCxcGetReportCustomerStatusResult1();
                            if (fieldNames.Contains(@"INFORMACION_DE_LINEA_CREDITO") && !reader.IsDBNull(reader.GetOrdinal(@"INFORMACION_DE_LINEA_CREDITO")))
                                resultRow.INFORMACIONDELINEACREDITO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"INFORMACION_DE_LINEA_CREDITO")), typeof(string));
                            if (fieldNames.Contains(@"lineName") && !reader.IsDBNull(reader.GetOrdinal(@"lineName")))
                                resultRow.LineName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lineName")), typeof(string));
                            else
                                resultRow.LineName = null;
                            if (fieldNames.Contains(@"lineNumber") && !reader.IsDBNull(reader.GetOrdinal(@"lineNumber")))
                                resultRow.LineNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lineNumber")), typeof(string));
                            else
                                resultRow.LineNumber = null;
                            if (fieldNames.Contains(@"limitCreditCordobaLinea") && !reader.IsDBNull(reader.GetOrdinal(@"limitCreditCordobaLinea")))
                                resultRow.LimitCreditCordobaLinea = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCreditCordobaLinea")), typeof(decimal));
                            else
                                resultRow.LimitCreditCordobaLinea = null;
                            if (fieldNames.Contains(@"balanceCordobaLinea") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCordobaLinea")))
                                resultRow.BalanceCordobaLinea = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCordobaLinea")), typeof(decimal));
                            else
                                resultRow.BalanceCordobaLinea = null;
                            if (fieldNames.Contains(@"interestYearLine") && !reader.IsDBNull(reader.GetOrdinal(@"interestYearLine")))
                                resultRow.InterestYearLine = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interestYearLine")), typeof(decimal));
                            else
                                resultRow.InterestYearLine = null;
                            if (fieldNames.Contains(@"termLine") && !reader.IsDBNull(reader.GetOrdinal(@"termLine")))
                                resultRow.TermLine = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"termLine")), typeof(decimal));
                            else
                                resultRow.TermLine = null;
                            if (fieldNames.Contains(@"periodPayLine") && !reader.IsDBNull(reader.GetOrdinal(@"periodPayLine")))
                                resultRow.PeriodPayLine = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"periodPayLine")), typeof(string));
                            else
                                resultRow.PeriodPayLine = null;
                            if (fieldNames.Contains(@"statusLine") && !reader.IsDBNull(reader.GetOrdinal(@"statusLine")))
                                resultRow.StatusLine = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusLine")), typeof(string));
                            else
                                resultRow.StatusLine = null;
                            result.PrCxcGetReportCustomerStatusResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerStatusResult2 resultRow = new PrCxcGetReportCustomerStatusResult2();
                            if (fieldNames.Contains(@"INFORMACION_DOCUMENTO_CREDITO") && !reader.IsDBNull(reader.GetOrdinal(@"INFORMACION_DOCUMENTO_CREDITO")))
                                resultRow.INFORMACIONDOCUMENTOCREDITO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"INFORMACION_DOCUMENTO_CREDITO")), typeof(string));
                            if (fieldNames.Contains(@"lineNumber") && !reader.IsDBNull(reader.GetOrdinal(@"lineNumber")))
                                resultRow.LineNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lineNumber")), typeof(string));
                            else
                                resultRow.LineNumber = null;
                            if (fieldNames.Contains(@"documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                resultRow.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));
                            else
                                resultRow.DocumentNumber = null;
                            if (fieldNames.Contains(@"documentOn") && !reader.IsDBNull(reader.GetOrdinal(@"documentOn")))
                                resultRow.DocumentOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentOn")), typeof(System.DateTime));
                            else
                                resultRow.DocumentOn = null;
                            if (fieldNames.Contains(@"amountDocument") && !reader.IsDBNull(reader.GetOrdinal(@"amountDocument")))
                                resultRow.AmountDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountDocument")), typeof(decimal));
                            else
                                resultRow.AmountDocument = null;
                            if (fieldNames.Contains(@"interesDocument") && !reader.IsDBNull(reader.GetOrdinal(@"interesDocument")))
                                resultRow.InteresDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesDocument")), typeof(decimal));
                            else
                                resultRow.InteresDocument = null;
                            if (fieldNames.Contains(@"interesDocumentMultiploDe120") && !reader.IsDBNull(reader.GetOrdinal(@"interesDocumentMultiploDe120")))
                                resultRow.InteresDocumentMultiploDe120 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesDocumentMultiploDe120")), typeof(decimal));
                            else
                                resultRow.InteresDocumentMultiploDe120 = null;
                            if (fieldNames.Contains(@"termDocument") && !reader.IsDBNull(reader.GetOrdinal(@"termDocument")))
                                resultRow.TermDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"termDocument")), typeof(decimal));
                            else
                                resultRow.TermDocument = null;
                            if (fieldNames.Contains(@"periodPayDocument") && !reader.IsDBNull(reader.GetOrdinal(@"periodPayDocument")))
                                resultRow.PeriodPayDocument = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"periodPayDocument")), typeof(string));
                            else
                                resultRow.PeriodPayDocument = null;
                            if (fieldNames.Contains(@"statusDocument") && !reader.IsDBNull(reader.GetOrdinal(@"statusDocument")))
                                resultRow.StatusDocument = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusDocument")), typeof(string));
                            else
                                resultRow.StatusDocument = null;
                            if (fieldNames.Contains(@"moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                resultRow.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));
                            else
                                resultRow.Moneda = null;
                            if (fieldNames.Contains(@"balanceDocument") && !reader.IsDBNull(reader.GetOrdinal(@"balanceDocument")))
                                resultRow.BalanceDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceDocument")), typeof(decimal));
                            else
                                resultRow.BalanceDocument = null;
                            if (fieldNames.Contains(@"dayAtrazo") && !reader.IsDBNull(reader.GetOrdinal(@"dayAtrazo")))
                                resultRow.DayAtrazo = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayAtrazo")), typeof(int));
                            if (fieldNames.Contains(@"amountAtrazo") && !reader.IsDBNull(reader.GetOrdinal(@"amountAtrazo")))
                                resultRow.AmountAtrazo = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountAtrazo")), typeof(decimal));
                            if (fieldNames.Contains(@"interestTotalMontoDocument") && !reader.IsDBNull(reader.GetOrdinal(@"interestTotalMontoDocument")))
                                resultRow.InterestTotalMontoDocument = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interestTotalMontoDocument")), typeof(decimal));
                            else
                                resultRow.InterestTotalMontoDocument = null;
                            if (fieldNames.Contains(@"vencimientoUltimaCuota") && !reader.IsDBNull(reader.GetOrdinal(@"vencimientoUltimaCuota")))
                                resultRow.VencimientoUltimaCuota = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"vencimientoUltimaCuota")), typeof(System.DateTime));
                            else
                                resultRow.VencimientoUltimaCuota = null;
                            if (fieldNames.Contains(@"promedioDiaPago") && !reader.IsDBNull(reader.GetOrdinal(@"promedioDiaPago")))
                                resultRow.PromedioDiaPago = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"promedioDiaPago")), typeof(decimal));
                            if (fieldNames.Contains(@"atrasoCancelacionDia") && !reader.IsDBNull(reader.GetOrdinal(@"atrasoCancelacionDia")))
                                resultRow.AtrasoCancelacionDia = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"atrasoCancelacionDia")), typeof(int));
                            if (fieldNames.Contains(@"nota") && !reader.IsDBNull(reader.GetOrdinal(@"nota")))
                                resultRow.Nota = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nota")), typeof(string));
                            else
                                resultRow.Nota = null;
                            result.PrCxcGetReportCustomerStatusResult2s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportCustomerStatusResult3 resultRow = new PrCxcGetReportCustomerStatusResult3();
                            if (fieldNames.Contains(@"INFORMACION_TABLA_AMORITIZACION") && !reader.IsDBNull(reader.GetOrdinal(@"INFORMACION_TABLA_AMORITIZACION")))
                                resultRow.INFORMACIONTABLAAMORITIZACION = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"INFORMACION_TABLA_AMORITIZACION")), typeof(string));
                            if (fieldNames.Contains(@"documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                resultRow.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));
                            else
                                resultRow.DocumentNumber = null;
                            if (fieldNames.Contains(@"dateApplyAmori") && !reader.IsDBNull(reader.GetOrdinal(@"dateApplyAmori")))
                                resultRow.DateApplyAmori = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateApplyAmori")), typeof(System.DateTime));
                            else
                                resultRow.DateApplyAmori = null;
                            if (fieldNames.Contains(@"balanceStartAmori") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStartAmori")))
                                resultRow.BalanceStartAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStartAmori")), typeof(decimal));
                            else
                                resultRow.BalanceStartAmori = null;
                            if (fieldNames.Contains(@"interestAmori") && !reader.IsDBNull(reader.GetOrdinal(@"interestAmori")))
                                resultRow.InterestAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interestAmori")), typeof(decimal));
                            else
                                resultRow.InterestAmori = null;
                            if (fieldNames.Contains(@"capitalAmori") && !reader.IsDBNull(reader.GetOrdinal(@"capitalAmori")))
                                resultRow.CapitalAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalAmori")), typeof(decimal));
                            else
                                resultRow.CapitalAmori = null;
                            if (fieldNames.Contains(@"shareAmori") && !reader.IsDBNull(reader.GetOrdinal(@"shareAmori")))
                                resultRow.ShareAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"shareAmori")), typeof(decimal));
                            else
                                resultRow.ShareAmori = null;
                            if (fieldNames.Contains(@"balanceEndAmori") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEndAmori")))
                                resultRow.BalanceEndAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEndAmori")), typeof(decimal));
                            else
                                resultRow.BalanceEndAmori = null;
                            if (fieldNames.Contains(@"remainingAmori") && !reader.IsDBNull(reader.GetOrdinal(@"remainingAmori")))
                                resultRow.RemainingAmori = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"remainingAmori")), typeof(decimal));
                            else
                                resultRow.RemainingAmori = null;
                            if (fieldNames.Contains(@"dayDelayAmori") && !reader.IsDBNull(reader.GetOrdinal(@"dayDelayAmori")))
                                resultRow.DayDelayAmori = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayDelayAmori")), typeof(int));
                            else
                                resultRow.DayDelayAmori = null;
                            if (fieldNames.Contains(@"statusShare") && !reader.IsDBNull(reader.GetOrdinal(@"statusShare")))
                                resultRow.StatusShare = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusShare")), typeof(string));
                            else
                                resultRow.StatusShare = null;
                            result.PrCxcGetReportCustomerStatusResult3s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener el contrato de credito
        /// </summary>
        public List<PrCxcGetReportDocumentContractResult> PrCxcGetReportDocumentContract (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            List<PrCxcGetReportDocumentContractResult> result = new List<PrCxcGetReportDocumentContractResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_document_contract";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportDocumentContractResult row = new PrCxcGetReportDocumentContractResult();
                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                row.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));

                            if (fieldNames.Contains("address") && !reader.IsDBNull(reader.GetOrdinal(@"address")))
                                row.Address = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"address")), typeof(string));
                            else
                                row.Address = null;

                            if (fieldNames.Contains("fechInicial") && !reader.IsDBNull(reader.GetOrdinal(@"fechInicial")))
                                row.FechInicial = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fechInicial")), typeof(System.DateTime));
                            else
                                row.FechInicial = null;

                            if (fieldNames.Contains("fechActual") && !reader.IsDBNull(reader.GetOrdinal(@"fechActual")))
                                row.FechActual = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fechActual")), typeof(System.DateTime));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("sexo") && !reader.IsDBNull(reader.GetOrdinal(@"sexo")))
                                row.Sexo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sexo")), typeof(string));
                            else
                                row.Sexo = null;

                            if (fieldNames.Contains("term") && !reader.IsDBNull(reader.GetOrdinal(@"term")))
                                row.Term = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"term")), typeof(int));

                            if (fieldNames.Contains("period") && !reader.IsDBNull(reader.GetOrdinal(@"period")))
                                row.Period = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"period")), typeof(string));
                            else
                                row.Period = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("NombreProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"NombreProveedor")))
                                row.NombreProveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreProveedor")), typeof(string));
                            else
                                row.NombreProveedor = null;

                            if (fieldNames.Contains("CedulaProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"CedulaProveedor")))
                                row.CedulaProveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CedulaProveedor")), typeof(string));
                            else
                                row.CedulaProveedor = null;

                            if (fieldNames.Contains("DireccionProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"DireccionProveedor")))
                                row.DireccionProveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DireccionProveedor")), typeof(string));
                            else
                                row.DireccionProveedor = null;

                            if (fieldNames.Contains("estadoCivil") && !reader.IsDBNull(reader.GetOrdinal(@"estadoCivil")))
                                row.EstadoCivil = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estadoCivil")), typeof(string));
                            else
                                row.EstadoCivil = null;

                            if (fieldNames.Contains("profesion") && !reader.IsDBNull(reader.GetOrdinal(@"profesion")))
                                row.Profesion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"profesion")), typeof(string));
                            else
                                row.Profesion = null;

                            if (fieldNames.Contains("Domicilio") && !reader.IsDBNull(reader.GetOrdinal(@"Domicilio")))
                                row.Domicilio = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Domicilio")), typeof(string));
                            else
                                row.Domicilio = null;

                            if (fieldNames.Contains("typeFirmaCustomer") && !reader.IsDBNull(reader.GetOrdinal(@"typeFirmaCustomer")))
                                row.TypeFirmaCustomer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"typeFirmaCustomer")), typeof(string));
                            else
                                row.TypeFirmaCustomer = null;

                            if (fieldNames.Contains("typeFirmaProvider") && !reader.IsDBNull(reader.GetOrdinal(@"typeFirmaProvider")))
                                row.TypeFirmaProvider = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"typeFirmaProvider")), typeof(string));

                            if (fieldNames.Contains("TipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"TipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TipoCambio")), typeof(decimal));
                            else
                                row.TipoCambio = null;

                            if (fieldNames.Contains("cuota") && !reader.IsDBNull(reader.GetOrdinal(@"cuota")))
                                row.Cuota = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cuota")), typeof(decimal));
                            else
                                row.Cuota = null;

                            if (fieldNames.Contains("cuotaDolares") && !reader.IsDBNull(reader.GetOrdinal(@"cuotaDolares")))
                                row.CuotaDolares = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cuotaDolares")), typeof(decimal));
                            else
                                row.CuotaDolares = null;

                            if (fieldNames.Contains("montoCuota") && !reader.IsDBNull(reader.GetOrdinal(@"montoCuota")))
                                row.MontoCuota = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoCuota")), typeof(decimal));
                            else
                                row.MontoCuota = null;

                            if (fieldNames.Contains("amountTotal") && !reader.IsDBNull(reader.GetOrdinal(@"amountTotal")))
                                row.AmountTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountTotal")), typeof(decimal));
                            else
                                row.AmountTotal = null;

                            if (fieldNames.Contains("receiptAmount") && !reader.IsDBNull(reader.GetOrdinal(@"receiptAmount")))
                                row.ReceiptAmount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"receiptAmount")), typeof(decimal));
                            else
                                row.ReceiptAmount = null;

                            if (fieldNames.Contains("fechFinal") && !reader.IsDBNull(reader.GetOrdinal(@"fechFinal")))
                                row.FechFinal = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fechFinal")), typeof(System.DateTime));
                            else
                                row.FechFinal = null;

                            if (fieldNames.Contains("DuracionDelCredito") && !reader.IsDBNull(reader.GetOrdinal(@"DuracionDelCredito")))
                                row.DuracionDelCredito = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DuracionDelCredito")), typeof(int));
                            else
                                row.DuracionDelCredito = null;

                            if (fieldNames.Contains("nameLayEmployee") && !reader.IsDBNull(reader.GetOrdinal(@"nameLayEmployee")))
                                row.NameLayEmployee = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameLayEmployee")), typeof(string));
                            else
                                row.NameLayEmployee = null;

                            if (fieldNames.Contains("nameLayEmployeeEstadoCivil") && !reader.IsDBNull(reader.GetOrdinal(@"nameLayEmployeeEstadoCivil")))
                                row.NameLayEmployeeEstadoCivil = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameLayEmployeeEstadoCivil")), typeof(string));
                            else
                                row.NameLayEmployeeEstadoCivil = null;

                            if (fieldNames.Contains("nameLayEmployeeQuinquenio") && !reader.IsDBNull(reader.GetOrdinal(@"nameLayEmployeeQuinquenio")))
                                row.NameLayEmployeeQuinquenio = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameLayEmployeeQuinquenio")), typeof(string));
                            else
                                row.NameLayEmployeeQuinquenio = null;

                            if (fieldNames.Contains("documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                row.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));

                            if (fieldNames.Contains("Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                row.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                row.Concepto = null;

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("lugarTrabajo") && !reader.IsDBNull(reader.GetOrdinal(@"lugarTrabajo")))
                                row.LugarTrabajo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lugarTrabajo")), typeof(string));
                            else
                                row.LugarTrabajo = null;

                            if (fieldNames.Contains("birthDate") && !reader.IsDBNull(reader.GetOrdinal(@"birthDate")))
                                row.BirthDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"birthDate")), typeof(System.DateTime));
                            else
                                row.BirthDate = null;

                            if (fieldNames.Contains("CantidadProductos") && !reader.IsDBNull(reader.GetOrdinal(@"CantidadProductos")))
                                row.CantidadProductos = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CantidadProductos")), typeof(decimal));
                            else
                                row.CantidadProductos = null;

                            if (fieldNames.Contains("phoneNumberTransactionMaster") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumberTransactionMaster")))
                                row.PhoneNumberTransactionMaster = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumberTransactionMaster")), typeof(string));
                            else
                                row.PhoneNumberTransactionMaster = null;

                            if (fieldNames.Contains("referenceClientIdentifier") && !reader.IsDBNull(reader.GetOrdinal(@"referenceClientIdentifier")))
                                row.ReferenceClientIdentifier = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"referenceClientIdentifier")), typeof(string));
                            else
                                row.ReferenceClientIdentifier = null;

                            if (fieldNames.Contains("referenceClientName") && !reader.IsDBNull(reader.GetOrdinal(@"referenceClientName")))
                                row.ReferenceClientName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"referenceClientName")), typeof(string));
                            else
                                row.ReferenceClientName = null;

                            if (fieldNames.Contains("Zona") && !reader.IsDBNull(reader.GetOrdinal(@"Zona")))
                                row.Zona = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Zona")), typeof(string));
                            else
                                row.Zona = null;

                            if (fieldNames.Contains("LayWritePublicNumber") && !reader.IsDBNull(reader.GetOrdinal(@"LayWritePublicNumber")))
                                row.LayWritePublicNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"LayWritePublicNumber")), typeof(string));

                            if (fieldNames.Contains("LayPasoAnteMi") && !reader.IsDBNull(reader.GetOrdinal(@"LayPasoAnteMi")))
                                row.LayPasoAnteMi = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"LayPasoAnteMi")), typeof(string));

                            if (fieldNames.Contains("LayPrimerLineaProtocolo") && !reader.IsDBNull(reader.GetOrdinal(@"LayPrimerLineaProtocolo")))
                                row.LayPrimerLineaProtocolo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"LayPrimerLineaProtocolo")), typeof(string));

                            if (fieldNames.Contains("productNameLog") && !reader.IsDBNull(reader.GetOrdinal(@"productNameLog")))
                                row.ProductNameLog = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"productNameLog")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener el contrato de credito
        /// </summary>
        public async Task<List<PrCxcGetReportDocumentContractResult>> PrCxcGetReportDocumentContractAsync (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            List<PrCxcGetReportDocumentContractResult> result = new List<PrCxcGetReportDocumentContractResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_document_contract";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportDocumentContractResult row = new PrCxcGetReportDocumentContractResult();
                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("identification") && !reader.IsDBNull(reader.GetOrdinal(@"identification")))
                                row.Identification = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"identification")), typeof(string));

                            if (fieldNames.Contains("address") && !reader.IsDBNull(reader.GetOrdinal(@"address")))
                                row.Address = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"address")), typeof(string));
                            else
                                row.Address = null;

                            if (fieldNames.Contains("fechInicial") && !reader.IsDBNull(reader.GetOrdinal(@"fechInicial")))
                                row.FechInicial = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fechInicial")), typeof(System.DateTime));
                            else
                                row.FechInicial = null;

                            if (fieldNames.Contains("fechActual") && !reader.IsDBNull(reader.GetOrdinal(@"fechActual")))
                                row.FechActual = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fechActual")), typeof(System.DateTime));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("sexo") && !reader.IsDBNull(reader.GetOrdinal(@"sexo")))
                                row.Sexo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sexo")), typeof(string));
                            else
                                row.Sexo = null;

                            if (fieldNames.Contains("term") && !reader.IsDBNull(reader.GetOrdinal(@"term")))
                                row.Term = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"term")), typeof(int));

                            if (fieldNames.Contains("period") && !reader.IsDBNull(reader.GetOrdinal(@"period")))
                                row.Period = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"period")), typeof(string));
                            else
                                row.Period = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("NombreProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"NombreProveedor")))
                                row.NombreProveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NombreProveedor")), typeof(string));
                            else
                                row.NombreProveedor = null;

                            if (fieldNames.Contains("CedulaProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"CedulaProveedor")))
                                row.CedulaProveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CedulaProveedor")), typeof(string));
                            else
                                row.CedulaProveedor = null;

                            if (fieldNames.Contains("DireccionProveedor") && !reader.IsDBNull(reader.GetOrdinal(@"DireccionProveedor")))
                                row.DireccionProveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DireccionProveedor")), typeof(string));
                            else
                                row.DireccionProveedor = null;

                            if (fieldNames.Contains("estadoCivil") && !reader.IsDBNull(reader.GetOrdinal(@"estadoCivil")))
                                row.EstadoCivil = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"estadoCivil")), typeof(string));
                            else
                                row.EstadoCivil = null;

                            if (fieldNames.Contains("profesion") && !reader.IsDBNull(reader.GetOrdinal(@"profesion")))
                                row.Profesion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"profesion")), typeof(string));
                            else
                                row.Profesion = null;

                            if (fieldNames.Contains("Domicilio") && !reader.IsDBNull(reader.GetOrdinal(@"Domicilio")))
                                row.Domicilio = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Domicilio")), typeof(string));
                            else
                                row.Domicilio = null;

                            if (fieldNames.Contains("typeFirmaCustomer") && !reader.IsDBNull(reader.GetOrdinal(@"typeFirmaCustomer")))
                                row.TypeFirmaCustomer = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"typeFirmaCustomer")), typeof(string));
                            else
                                row.TypeFirmaCustomer = null;

                            if (fieldNames.Contains("typeFirmaProvider") && !reader.IsDBNull(reader.GetOrdinal(@"typeFirmaProvider")))
                                row.TypeFirmaProvider = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"typeFirmaProvider")), typeof(string));

                            if (fieldNames.Contains("TipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"TipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TipoCambio")), typeof(decimal));
                            else
                                row.TipoCambio = null;

                            if (fieldNames.Contains("cuota") && !reader.IsDBNull(reader.GetOrdinal(@"cuota")))
                                row.Cuota = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cuota")), typeof(decimal));
                            else
                                row.Cuota = null;

                            if (fieldNames.Contains("cuotaDolares") && !reader.IsDBNull(reader.GetOrdinal(@"cuotaDolares")))
                                row.CuotaDolares = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cuotaDolares")), typeof(decimal));
                            else
                                row.CuotaDolares = null;

                            if (fieldNames.Contains("montoCuota") && !reader.IsDBNull(reader.GetOrdinal(@"montoCuota")))
                                row.MontoCuota = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"montoCuota")), typeof(decimal));
                            else
                                row.MontoCuota = null;

                            if (fieldNames.Contains("amountTotal") && !reader.IsDBNull(reader.GetOrdinal(@"amountTotal")))
                                row.AmountTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountTotal")), typeof(decimal));
                            else
                                row.AmountTotal = null;

                            if (fieldNames.Contains("receiptAmount") && !reader.IsDBNull(reader.GetOrdinal(@"receiptAmount")))
                                row.ReceiptAmount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"receiptAmount")), typeof(decimal));
                            else
                                row.ReceiptAmount = null;

                            if (fieldNames.Contains("fechFinal") && !reader.IsDBNull(reader.GetOrdinal(@"fechFinal")))
                                row.FechFinal = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"fechFinal")), typeof(System.DateTime));
                            else
                                row.FechFinal = null;

                            if (fieldNames.Contains("DuracionDelCredito") && !reader.IsDBNull(reader.GetOrdinal(@"DuracionDelCredito")))
                                row.DuracionDelCredito = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DuracionDelCredito")), typeof(int));
                            else
                                row.DuracionDelCredito = null;

                            if (fieldNames.Contains("nameLayEmployee") && !reader.IsDBNull(reader.GetOrdinal(@"nameLayEmployee")))
                                row.NameLayEmployee = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameLayEmployee")), typeof(string));
                            else
                                row.NameLayEmployee = null;

                            if (fieldNames.Contains("nameLayEmployeeEstadoCivil") && !reader.IsDBNull(reader.GetOrdinal(@"nameLayEmployeeEstadoCivil")))
                                row.NameLayEmployeeEstadoCivil = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameLayEmployeeEstadoCivil")), typeof(string));
                            else
                                row.NameLayEmployeeEstadoCivil = null;

                            if (fieldNames.Contains("nameLayEmployeeQuinquenio") && !reader.IsDBNull(reader.GetOrdinal(@"nameLayEmployeeQuinquenio")))
                                row.NameLayEmployeeQuinquenio = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameLayEmployeeQuinquenio")), typeof(string));
                            else
                                row.NameLayEmployeeQuinquenio = null;

                            if (fieldNames.Contains("documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                row.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));

                            if (fieldNames.Contains("Concepto") && !reader.IsDBNull(reader.GetOrdinal(@"Concepto")))
                                row.Concepto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Concepto")), typeof(string));
                            else
                                row.Concepto = null;

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("lugarTrabajo") && !reader.IsDBNull(reader.GetOrdinal(@"lugarTrabajo")))
                                row.LugarTrabajo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lugarTrabajo")), typeof(string));
                            else
                                row.LugarTrabajo = null;

                            if (fieldNames.Contains("birthDate") && !reader.IsDBNull(reader.GetOrdinal(@"birthDate")))
                                row.BirthDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"birthDate")), typeof(System.DateTime));
                            else
                                row.BirthDate = null;

                            if (fieldNames.Contains("CantidadProductos") && !reader.IsDBNull(reader.GetOrdinal(@"CantidadProductos")))
                                row.CantidadProductos = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CantidadProductos")), typeof(decimal));
                            else
                                row.CantidadProductos = null;

                            if (fieldNames.Contains("phoneNumberTransactionMaster") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumberTransactionMaster")))
                                row.PhoneNumberTransactionMaster = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumberTransactionMaster")), typeof(string));
                            else
                                row.PhoneNumberTransactionMaster = null;

                            if (fieldNames.Contains("referenceClientIdentifier") && !reader.IsDBNull(reader.GetOrdinal(@"referenceClientIdentifier")))
                                row.ReferenceClientIdentifier = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"referenceClientIdentifier")), typeof(string));
                            else
                                row.ReferenceClientIdentifier = null;

                            if (fieldNames.Contains("referenceClientName") && !reader.IsDBNull(reader.GetOrdinal(@"referenceClientName")))
                                row.ReferenceClientName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"referenceClientName")), typeof(string));
                            else
                                row.ReferenceClientName = null;

                            if (fieldNames.Contains("Zona") && !reader.IsDBNull(reader.GetOrdinal(@"Zona")))
                                row.Zona = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Zona")), typeof(string));
                            else
                                row.Zona = null;

                            if (fieldNames.Contains("LayWritePublicNumber") && !reader.IsDBNull(reader.GetOrdinal(@"LayWritePublicNumber")))
                                row.LayWritePublicNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"LayWritePublicNumber")), typeof(string));

                            if (fieldNames.Contains("LayPasoAnteMi") && !reader.IsDBNull(reader.GetOrdinal(@"LayPasoAnteMi")))
                                row.LayPasoAnteMi = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"LayPasoAnteMi")), typeof(string));

                            if (fieldNames.Contains("LayPrimerLineaProtocolo") && !reader.IsDBNull(reader.GetOrdinal(@"LayPrimerLineaProtocolo")))
                                row.LayPrimerLineaProtocolo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"LayPrimerLineaProtocolo")), typeof(string));

                            if (fieldNames.Contains("productNameLog") && !reader.IsDBNull(reader.GetOrdinal(@"productNameLog")))
                                row.ProductNameLog = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"productNameLog")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PrCxcGetReportDocumentCreditResult> PrCxcGetReportDocumentCredit (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            List<PrCxcGetReportDocumentCreditResult> result = new List<PrCxcGetReportDocumentCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_document_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportDocumentCreditResult row = new PrCxcGetReportDocumentCreditResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("comercialName") && !reader.IsDBNull(reader.GetOrdinal(@"comercialName")))
                                row.ComercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comercialName")), typeof(string));
                            else
                                row.ComercialName = null;

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("lastName") && !reader.IsDBNull(reader.GetOrdinal(@"lastName")))
                                row.LastName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastName")), typeof(string));
                            else
                                row.LastName = null;

                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));

                            if (fieldNames.Contains("limitCreditCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"limitCreditCordoba")))
                                row.LimitCreditCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCreditCordoba")), typeof(decimal));
                            else
                                row.LimitCreditCordoba = null;

                            if (fieldNames.Contains("balanceCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCordoba")))
                                row.BalanceCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCordoba")), typeof(decimal));
                            else
                                row.BalanceCordoba = null;

                            if (fieldNames.Contains("interestYear") && !reader.IsDBNull(reader.GetOrdinal(@"interestYear")))
                                row.InterestYear = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interestYear")), typeof(decimal));

                            if (fieldNames.Contains("periodPay") && !reader.IsDBNull(reader.GetOrdinal(@"periodPay")))
                                row.PeriodPay = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"periodPay")), typeof(string));
                            else
                                row.PeriodPay = null;

                            if (fieldNames.Contains("term") && !reader.IsDBNull(reader.GetOrdinal(@"term")))
                                row.Term = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"term")), typeof(int));
                            else
                                row.Term = null;

                            if (fieldNames.Contains("statusLine") && !reader.IsDBNull(reader.GetOrdinal(@"statusLine")))
                                row.StatusLine = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusLine")), typeof(string));
                            else
                                row.StatusLine = null;

                            if (fieldNames.Contains("documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                row.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));

                            if (fieldNames.Contains("dateOn") && !reader.IsDBNull(reader.GetOrdinal(@"dateOn")))
                                row.DateOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateOn")), typeof(System.DateTime));

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));

                            if (fieldNames.Contains("interes") && !reader.IsDBNull(reader.GetOrdinal(@"interes")))
                                row.Interes = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interes")), typeof(decimal));

                            if (fieldNames.Contains("term") && !reader.IsDBNull(reader.GetOrdinal(@"term")))
                                row.Term1 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"term")), typeof(int));

                            if (fieldNames.Contains("statusDocument") && !reader.IsDBNull(reader.GetOrdinal(@"statusDocument")))
                                row.StatusDocument = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusDocument")), typeof(string));
                            else
                                row.StatusDocument = null;

                            if (fieldNames.Contains("dateApply") && !reader.IsDBNull(reader.GetOrdinal(@"dateApply")))
                                row.DateApply = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateApply")), typeof(System.DateTime));

                            if (fieldNames.Contains("balanceStart") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStart")))
                                row.BalanceStart = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStart")), typeof(decimal));

                            if (fieldNames.Contains("interest") && !reader.IsDBNull(reader.GetOrdinal(@"interest")))
                                row.Interest = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interest")), typeof(decimal));

                            if (fieldNames.Contains("capital") && !reader.IsDBNull(reader.GetOrdinal(@"capital")))
                                row.Capital = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capital")), typeof(decimal));

                            if (fieldNames.Contains("share") && !reader.IsDBNull(reader.GetOrdinal(@"share")))
                                row.Share = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"share")), typeof(decimal));

                            if (fieldNames.Contains("balanceEnd") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEnd")))
                                row.BalanceEnd = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEnd")), typeof(decimal));

                            if (fieldNames.Contains("remaining") && !reader.IsDBNull(reader.GetOrdinal(@"remaining")))
                                row.Remaining = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"remaining")), typeof(decimal));

                            if (fieldNames.Contains("dayDelay") && !reader.IsDBNull(reader.GetOrdinal(@"dayDelay")))
                                row.DayDelay = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayDelay")), typeof(int));

                            if (fieldNames.Contains("statusShare") && !reader.IsDBNull(reader.GetOrdinal(@"statusShare")))
                                row.StatusShare = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusShare")), typeof(string));
                            else
                                row.StatusShare = null;

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrCxcGetReportDocumentCreditResult>> PrCxcGetReportDocumentCreditAsync (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            List<PrCxcGetReportDocumentCreditResult> result = new List<PrCxcGetReportDocumentCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_document_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportDocumentCreditResult row = new PrCxcGetReportDocumentCreditResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("comercialName") && !reader.IsDBNull(reader.GetOrdinal(@"comercialName")))
                                row.ComercialName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"comercialName")), typeof(string));
                            else
                                row.ComercialName = null;

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("lastName") && !reader.IsDBNull(reader.GetOrdinal(@"lastName")))
                                row.LastName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lastName")), typeof(string));
                            else
                                row.LastName = null;

                            if (fieldNames.Contains("accountNumber") && !reader.IsDBNull(reader.GetOrdinal(@"accountNumber")))
                                row.AccountNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"accountNumber")), typeof(string));

                            if (fieldNames.Contains("limitCreditCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"limitCreditCordoba")))
                                row.LimitCreditCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"limitCreditCordoba")), typeof(decimal));
                            else
                                row.LimitCreditCordoba = null;

                            if (fieldNames.Contains("balanceCordoba") && !reader.IsDBNull(reader.GetOrdinal(@"balanceCordoba")))
                                row.BalanceCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceCordoba")), typeof(decimal));
                            else
                                row.BalanceCordoba = null;

                            if (fieldNames.Contains("interestYear") && !reader.IsDBNull(reader.GetOrdinal(@"interestYear")))
                                row.InterestYear = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interestYear")), typeof(decimal));

                            if (fieldNames.Contains("periodPay") && !reader.IsDBNull(reader.GetOrdinal(@"periodPay")))
                                row.PeriodPay = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"periodPay")), typeof(string));
                            else
                                row.PeriodPay = null;

                            if (fieldNames.Contains("term") && !reader.IsDBNull(reader.GetOrdinal(@"term")))
                                row.Term = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"term")), typeof(int));
                            else
                                row.Term = null;

                            if (fieldNames.Contains("statusLine") && !reader.IsDBNull(reader.GetOrdinal(@"statusLine")))
                                row.StatusLine = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusLine")), typeof(string));
                            else
                                row.StatusLine = null;

                            if (fieldNames.Contains("documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                row.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));

                            if (fieldNames.Contains("dateOn") && !reader.IsDBNull(reader.GetOrdinal(@"dateOn")))
                                row.DateOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateOn")), typeof(System.DateTime));

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));

                            if (fieldNames.Contains("interes") && !reader.IsDBNull(reader.GetOrdinal(@"interes")))
                                row.Interes = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interes")), typeof(decimal));

                            if (fieldNames.Contains("term") && !reader.IsDBNull(reader.GetOrdinal(@"term")))
                                row.Term1 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"term")), typeof(int));

                            if (fieldNames.Contains("statusDocument") && !reader.IsDBNull(reader.GetOrdinal(@"statusDocument")))
                                row.StatusDocument = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusDocument")), typeof(string));
                            else
                                row.StatusDocument = null;

                            if (fieldNames.Contains("dateApply") && !reader.IsDBNull(reader.GetOrdinal(@"dateApply")))
                                row.DateApply = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateApply")), typeof(System.DateTime));

                            if (fieldNames.Contains("balanceStart") && !reader.IsDBNull(reader.GetOrdinal(@"balanceStart")))
                                row.BalanceStart = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceStart")), typeof(decimal));

                            if (fieldNames.Contains("interest") && !reader.IsDBNull(reader.GetOrdinal(@"interest")))
                                row.Interest = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interest")), typeof(decimal));

                            if (fieldNames.Contains("capital") && !reader.IsDBNull(reader.GetOrdinal(@"capital")))
                                row.Capital = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capital")), typeof(decimal));

                            if (fieldNames.Contains("share") && !reader.IsDBNull(reader.GetOrdinal(@"share")))
                                row.Share = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"share")), typeof(decimal));

                            if (fieldNames.Contains("balanceEnd") && !reader.IsDBNull(reader.GetOrdinal(@"balanceEnd")))
                                row.BalanceEnd = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balanceEnd")), typeof(decimal));

                            if (fieldNames.Contains("remaining") && !reader.IsDBNull(reader.GetOrdinal(@"remaining")))
                                row.Remaining = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"remaining")), typeof(decimal));

                            if (fieldNames.Contains("dayDelay") && !reader.IsDBNull(reader.GetOrdinal(@"dayDelay")))
                                row.DayDelay = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayDelay")), typeof(int));

                            if (fieldNames.Contains("statusShare") && !reader.IsDBNull(reader.GetOrdinal(@"statusShare")))
                                row.StatusShare = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusShare")), typeof(string));
                            else
                                row.StatusShare = null;

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PrCxcGetReportExchangeRateResult> PrCxcGetReportExchangeRate (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportExchangeRateResult> result = new List<PrCxcGetReportExchangeRateResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_exchange_rate";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportExchangeRateResult row = new PrCxcGetReportExchangeRateResult();
                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("Cordoba") && !reader.IsDBNull(reader.GetOrdinal(@"Cordoba")))
                                row.Cordoba = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cordoba")), typeof(string));

                            if (fieldNames.Contains("Compra") && !reader.IsDBNull(reader.GetOrdinal(@"Compra")))
                                row.Compra = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Compra")), typeof(double));
                            else
                                row.Compra = null;

                            if (fieldNames.Contains("Venta") && !reader.IsDBNull(reader.GetOrdinal(@"Venta")))
                                row.Venta = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Venta")), typeof(double));
                            else
                                row.Venta = null;

                            if (fieldNames.Contains("Oficial") && !reader.IsDBNull(reader.GetOrdinal(@"Oficial")))
                                row.Oficial = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Oficial")), typeof(double));
                            else
                                row.Oficial = null;

                            if (fieldNames.Contains("Dolar") && !reader.IsDBNull(reader.GetOrdinal(@"Dolar")))
                                row.Dolar = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Dolar")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrCxcGetReportExchangeRateResult>> PrCxcGetReportExchangeRateAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportExchangeRateResult> result = new List<PrCxcGetReportExchangeRateResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_exchange_rate";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportExchangeRateResult row = new PrCxcGetReportExchangeRateResult();
                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("Cordoba") && !reader.IsDBNull(reader.GetOrdinal(@"Cordoba")))
                                row.Cordoba = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cordoba")), typeof(string));

                            if (fieldNames.Contains("Compra") && !reader.IsDBNull(reader.GetOrdinal(@"Compra")))
                                row.Compra = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Compra")), typeof(double));
                            else
                                row.Compra = null;

                            if (fieldNames.Contains("Venta") && !reader.IsDBNull(reader.GetOrdinal(@"Venta")))
                                row.Venta = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Venta")), typeof(double));
                            else
                                row.Venta = null;

                            if (fieldNames.Contains("Oficial") && !reader.IsDBNull(reader.GetOrdinal(@"Oficial")))
                                row.Oficial = (double)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Oficial")), typeof(double));
                            else
                                row.Oficial = null;

                            if (fieldNames.Contains("Dolar") && !reader.IsDBNull(reader.GetOrdinal(@"Dolar")))
                                row.Dolar = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Dolar")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PrCxcGetReportInfoProyectResult> PrCxcGetReportInfoProyect (int? prCompanyID, string prTokenID, int? prUserID)
        {

            List<PrCxcGetReportInfoProyectResult> result = new List<PrCxcGetReportInfoProyectResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_info_proyect";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportInfoProyectResult row = new PrCxcGetReportInfoProyectResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("FechaPeriodo") && !reader.IsDBNull(reader.GetOrdinal(@"FechaPeriodo")))
                                row.FechaPeriodo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FechaPeriodo")), typeof(string));
                            else
                                row.FechaPeriodo = null;

                            if (fieldNames.Contains("capital") && !reader.IsDBNull(reader.GetOrdinal(@"capital")))
                                row.Capital = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capital")), typeof(decimal));
                            else
                                row.Capital = null;

                            if (fieldNames.Contains("interest") && !reader.IsDBNull(reader.GetOrdinal(@"interest")))
                                row.Interest = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interest")), typeof(decimal));
                            else
                                row.Interest = null;

                            if (fieldNames.Contains("cuota") && !reader.IsDBNull(reader.GetOrdinal(@"cuota")))
                                row.Cuota = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cuota")), typeof(decimal));
                            else
                                row.Cuota = null;

                            if (fieldNames.Contains("remaining") && !reader.IsDBNull(reader.GetOrdinal(@"remaining")))
                                row.Remaining = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"remaining")), typeof(decimal));
                            else
                                row.Remaining = null;

                            if (fieldNames.Contains("Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrCxcGetReportInfoProyectResult>> PrCxcGetReportInfoProyectAsync (int? prCompanyID, string prTokenID, int? prUserID)
        {

            List<PrCxcGetReportInfoProyectResult> result = new List<PrCxcGetReportInfoProyectResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_info_proyect";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportInfoProyectResult row = new PrCxcGetReportInfoProyectResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                row.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("FechaPeriodo") && !reader.IsDBNull(reader.GetOrdinal(@"FechaPeriodo")))
                                row.FechaPeriodo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FechaPeriodo")), typeof(string));
                            else
                                row.FechaPeriodo = null;

                            if (fieldNames.Contains("capital") && !reader.IsDBNull(reader.GetOrdinal(@"capital")))
                                row.Capital = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capital")), typeof(decimal));
                            else
                                row.Capital = null;

                            if (fieldNames.Contains("interest") && !reader.IsDBNull(reader.GetOrdinal(@"interest")))
                                row.Interest = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interest")), typeof(decimal));
                            else
                                row.Interest = null;

                            if (fieldNames.Contains("cuota") && !reader.IsDBNull(reader.GetOrdinal(@"cuota")))
                                row.Cuota = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cuota")), typeof(decimal));
                            else
                                row.Cuota = null;

                            if (fieldNames.Contains("remaining") && !reader.IsDBNull(reader.GetOrdinal(@"remaining")))
                                row.Remaining = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"remaining")), typeof(decimal));
                            else
                                row.Remaining = null;

                            if (fieldNames.Contains("Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// reporte para ver los intereses pagado y capital pagado en un intervalo de fecha
        /// </summary>
        public List<PrCxcGetReportInteresPeriodoResult> PrCxcGetReportInteresPeriodo (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrCxcGetReportInteresPeriodoResult> result = new List<PrCxcGetReportInteresPeriodoResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_interes_periodo";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportInteresPeriodoResult row = new PrCxcGetReportInteresPeriodoResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("documentFecha") && !reader.IsDBNull(reader.GetOrdinal(@"documentFecha")))
                                row.DocumentFecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentFecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                row.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));

                            if (fieldNames.Contains("transactionFecha") && !reader.IsDBNull(reader.GetOrdinal(@"transactionFecha")))
                                row.TransactionFecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionFecha")), typeof(System.DateTime));
                            else
                                row.TransactionFecha = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("transactionName") && !reader.IsDBNull(reader.GetOrdinal(@"transactionName")))
                                row.TransactionName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionName")), typeof(string));

                            if (fieldNames.Contains("balance") && !reader.IsDBNull(reader.GetOrdinal(@"balance")))
                                row.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balance")), typeof(decimal));
                            else
                                row.Balance = null;

                            if (fieldNames.Contains("capital") && !reader.IsDBNull(reader.GetOrdinal(@"capital")))
                                row.Capital = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capital")), typeof(decimal));
                            else
                                row.Capital = null;

                            if (fieldNames.Contains("interest") && !reader.IsDBNull(reader.GetOrdinal(@"interest")))
                                row.Interest = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interest")), typeof(decimal));
                            else
                                row.Interest = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("sale") && !reader.IsDBNull(reader.GetOrdinal(@"sale")))
                                row.Sale = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sale")), typeof(decimal));
                            else
                                row.Sale = null;

                            if (fieldNames.Contains("purchase") && !reader.IsDBNull(reader.GetOrdinal(@"purchase")))
                                row.Purchase = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"purchase")), typeof(decimal));
                            else
                                row.Purchase = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// reporte para ver los intereses pagado y capital pagado en un intervalo de fecha
        /// </summary>
        public async Task<List<PrCxcGetReportInteresPeriodoResult>> PrCxcGetReportInteresPeriodoAsync (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrCxcGetReportInteresPeriodoResult> result = new List<PrCxcGetReportInteresPeriodoResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_interes_periodo";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportInteresPeriodoResult row = new PrCxcGetReportInteresPeriodoResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("documentFecha") && !reader.IsDBNull(reader.GetOrdinal(@"documentFecha")))
                                row.DocumentFecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentFecha")), typeof(System.DateTime));

                            if (fieldNames.Contains("documentNumber") && !reader.IsDBNull(reader.GetOrdinal(@"documentNumber")))
                                row.DocumentNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"documentNumber")), typeof(string));

                            if (fieldNames.Contains("transactionFecha") && !reader.IsDBNull(reader.GetOrdinal(@"transactionFecha")))
                                row.TransactionFecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionFecha")), typeof(System.DateTime));
                            else
                                row.TransactionFecha = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("transactionName") && !reader.IsDBNull(reader.GetOrdinal(@"transactionName")))
                                row.TransactionName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionName")), typeof(string));

                            if (fieldNames.Contains("balance") && !reader.IsDBNull(reader.GetOrdinal(@"balance")))
                                row.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balance")), typeof(decimal));
                            else
                                row.Balance = null;

                            if (fieldNames.Contains("capital") && !reader.IsDBNull(reader.GetOrdinal(@"capital")))
                                row.Capital = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capital")), typeof(decimal));
                            else
                                row.Capital = null;

                            if (fieldNames.Contains("interest") && !reader.IsDBNull(reader.GetOrdinal(@"interest")))
                                row.Interest = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interest")), typeof(decimal));
                            else
                                row.Interest = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("sale") && !reader.IsDBNull(reader.GetOrdinal(@"sale")))
                                row.Sale = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sale")), typeof(decimal));
                            else
                                row.Sale = null;

                            if (fieldNames.Contains("purchase") && !reader.IsDBNull(reader.GetOrdinal(@"purchase")))
                                row.Purchase = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"purchase")), typeof(decimal));
                            else
                                row.Purchase = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Estado de cuenta del cliente
        /// </summary>
        public List<PrCxcGetReportMovementCustomerResult> PrCxcGetReportMovementCustomer (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            List<PrCxcGetReportMovementCustomerResult> result = new List<PrCxcGetReportMovementCustomerResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_movement_customer";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportMovementCustomerResult row = new PrCxcGetReportMovementCustomerResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("ID") && !reader.IsDBNull(reader.GetOrdinal(@"ID")))
                                row.ID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ID")), typeof(int));

                            if (fieldNames.Contains("entityID") && !reader.IsDBNull(reader.GetOrdinal(@"entityID")))
                                row.EntityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"entityID")), typeof(int));
                            else
                                row.EntityID = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            else
                                row.TransactionNumber = null;

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));
                            else
                                row.ItemNumber = null;

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));
                            else
                                row.ItemName = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("balance") && !reader.IsDBNull(reader.GetOrdinal(@"balance")))
                                row.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balance")), typeof(decimal));
                            else
                                row.Balance = null;

                            if (fieldNames.Contains("nota") && !reader.IsDBNull(reader.GetOrdinal(@"nota")))
                                row.Nota = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nota")), typeof(string));
                            else
                                row.Nota = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Estado de cuenta del cliente
        /// </summary>
        public async Task<List<PrCxcGetReportMovementCustomerResult>> PrCxcGetReportMovementCustomerAsync (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            List<PrCxcGetReportMovementCustomerResult> result = new List<PrCxcGetReportMovementCustomerResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_movement_customer";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportMovementCustomerResult row = new PrCxcGetReportMovementCustomerResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("firstName") && !reader.IsDBNull(reader.GetOrdinal(@"firstName")))
                                row.FirstName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"firstName")), typeof(string));
                            else
                                row.FirstName = null;

                            if (fieldNames.Contains("ID") && !reader.IsDBNull(reader.GetOrdinal(@"ID")))
                                row.ID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ID")), typeof(int));

                            if (fieldNames.Contains("entityID") && !reader.IsDBNull(reader.GetOrdinal(@"entityID")))
                                row.EntityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"entityID")), typeof(int));
                            else
                                row.EntityID = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            else
                                row.TransactionNumber = null;

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));
                            else
                                row.ItemNumber = null;

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));
                            else
                                row.ItemName = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("balance") && !reader.IsDBNull(reader.GetOrdinal(@"balance")))
                                row.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balance")), typeof(decimal));
                            else
                                row.Balance = null;

                            if (fieldNames.Contains("nota") && !reader.IsDBNull(reader.GetOrdinal(@"nota")))
                                row.Nota = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nota")), typeof(string));
                            else
                                row.Nota = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PrCxcGetReportSummaryCreditResult> PrCxcGetReportSummaryCredit (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportSummaryCreditResult> result = new List<PrCxcGetReportSummaryCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_summary_credit";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 250;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportSummaryCreditResult row = new PrCxcGetReportSummaryCreditResult();
                            if (fieldNames.Contains("codigoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"codigoCliente")))
                                row.CodigoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"codigoCliente")), typeof(string));

                            if (fieldNames.Contains("cliente") && !reader.IsDBNull(reader.GetOrdinal(@"cliente")))
                                row.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cliente")), typeof(string));
                            else
                                row.Cliente = null;

                            if (fieldNames.Contains("capitalInicial") && !reader.IsDBNull(reader.GetOrdinal(@"capitalInicial")))
                                row.CapitalInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalInicial")), typeof(decimal));

                            if (fieldNames.Contains("capitalActual") && !reader.IsDBNull(reader.GetOrdinal(@"capitalActual")))
                                row.CapitalActual = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalActual")), typeof(decimal));

                            if (fieldNames.Contains("cuotaPromedio") && !reader.IsDBNull(reader.GetOrdinal(@"cuotaPromedio")))
                                row.CuotaPromedio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cuotaPromedio")), typeof(decimal));
                            else
                                row.CuotaPromedio = null;

                            if (fieldNames.Contains("interesMensual") && !reader.IsDBNull(reader.GetOrdinal(@"interesMensual")))
                                row.InteresMensual = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesMensual")), typeof(decimal));
                            else
                                row.InteresMensual = null;

                            if (fieldNames.Contains("interesAnual") && !reader.IsDBNull(reader.GetOrdinal(@"interesAnual")))
                                row.InteresAnual = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesAnual")), typeof(decimal));
                            else
                                row.InteresAnual = null;

                            if (fieldNames.Contains("numeroCuotas") && !reader.IsDBNull(reader.GetOrdinal(@"numeroCuotas")))
                                row.NumeroCuotas = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"numeroCuotas")), typeof(int));

                            if (fieldNames.Contains("numeroDeMeses") && !reader.IsDBNull(reader.GetOrdinal(@"numeroDeMeses")))
                                row.NumeroDeMeses = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"numeroDeMeses")), typeof(decimal));
                            else
                                row.NumeroDeMeses = null;

                            if (fieldNames.Contains("frecuenciaPagoEnDia") && !reader.IsDBNull(reader.GetOrdinal(@"frecuenciaPagoEnDia")))
                                row.FrecuenciaPagoEnDia = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"frecuenciaPagoEnDia")), typeof(int));
                            else
                                row.FrecuenciaPagoEnDia = null;

                            if (fieldNames.Contains("amortizacion") && !reader.IsDBNull(reader.GetOrdinal(@"amortizacion")))
                                row.Amortizacion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amortizacion")), typeof(string));
                            else
                                row.Amortizacion = null;

                            if (fieldNames.Contains("frecuenciaPago") && !reader.IsDBNull(reader.GetOrdinal(@"frecuenciaPago")))
                                row.FrecuenciaPago = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"frecuenciaPago")), typeof(string));
                            else
                                row.FrecuenciaPago = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));

                            if (fieldNames.Contains("simbolo") && !reader.IsDBNull(reader.GetOrdinal(@"simbolo")))
                                row.Simbolo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"simbolo")), typeof(string));

                            if (fieldNames.Contains("ultimaFecha") && !reader.IsDBNull(reader.GetOrdinal(@"ultimaFecha")))
                                row.UltimaFecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ultimaFecha")), typeof(System.DateTime));
                            else
                                row.UltimaFecha = null;

                            if (fieldNames.Contains("diasParaCancelar") && !reader.IsDBNull(reader.GetOrdinal(@"diasParaCancelar")))
                                row.DiasParaCancelar = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"diasParaCancelar")), typeof(int));
                            else
                                row.DiasParaCancelar = null;

                            if (fieldNames.Contains("mesParaCancelar") && !reader.IsDBNull(reader.GetOrdinal(@"mesParaCancelar")))
                                row.MesParaCancelar = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mesParaCancelar")), typeof(decimal));
                            else
                                row.MesParaCancelar = null;

                            if (fieldNames.Contains("mesParaCancelar%") && !reader.IsDBNull(reader.GetOrdinal(@"mesParaCancelar%")))
                                row.MesParaCancelar1 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mesParaCancelar%")), typeof(decimal));
                            else
                                row.MesParaCancelar1 = null;

                            if (fieldNames.Contains("TipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"TipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TipoCambio")), typeof(decimal));

                            if (fieldNames.Contains("Factura") && !reader.IsDBNull(reader.GetOrdinal(@"Factura")))
                                row.Factura = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Factura")), typeof(string));

                            if (fieldNames.Contains("Provisionado") && !reader.IsDBNull(reader.GetOrdinal(@"Provisionado")))
                                row.Provisionado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Provisionado")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrCxcGetReportSummaryCreditResult>> PrCxcGetReportSummaryCreditAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportSummaryCreditResult> result = new List<PrCxcGetReportSummaryCreditResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_summary_credit";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 250;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportSummaryCreditResult row = new PrCxcGetReportSummaryCreditResult();
                            if (fieldNames.Contains("codigoCliente") && !reader.IsDBNull(reader.GetOrdinal(@"codigoCliente")))
                                row.CodigoCliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"codigoCliente")), typeof(string));

                            if (fieldNames.Contains("cliente") && !reader.IsDBNull(reader.GetOrdinal(@"cliente")))
                                row.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cliente")), typeof(string));
                            else
                                row.Cliente = null;

                            if (fieldNames.Contains("capitalInicial") && !reader.IsDBNull(reader.GetOrdinal(@"capitalInicial")))
                                row.CapitalInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalInicial")), typeof(decimal));

                            if (fieldNames.Contains("capitalActual") && !reader.IsDBNull(reader.GetOrdinal(@"capitalActual")))
                                row.CapitalActual = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"capitalActual")), typeof(decimal));

                            if (fieldNames.Contains("cuotaPromedio") && !reader.IsDBNull(reader.GetOrdinal(@"cuotaPromedio")))
                                row.CuotaPromedio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cuotaPromedio")), typeof(decimal));
                            else
                                row.CuotaPromedio = null;

                            if (fieldNames.Contains("interesMensual") && !reader.IsDBNull(reader.GetOrdinal(@"interesMensual")))
                                row.InteresMensual = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesMensual")), typeof(decimal));
                            else
                                row.InteresMensual = null;

                            if (fieldNames.Contains("interesAnual") && !reader.IsDBNull(reader.GetOrdinal(@"interesAnual")))
                                row.InteresAnual = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"interesAnual")), typeof(decimal));
                            else
                                row.InteresAnual = null;

                            if (fieldNames.Contains("numeroCuotas") && !reader.IsDBNull(reader.GetOrdinal(@"numeroCuotas")))
                                row.NumeroCuotas = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"numeroCuotas")), typeof(int));

                            if (fieldNames.Contains("numeroDeMeses") && !reader.IsDBNull(reader.GetOrdinal(@"numeroDeMeses")))
                                row.NumeroDeMeses = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"numeroDeMeses")), typeof(decimal));
                            else
                                row.NumeroDeMeses = null;

                            if (fieldNames.Contains("frecuenciaPagoEnDia") && !reader.IsDBNull(reader.GetOrdinal(@"frecuenciaPagoEnDia")))
                                row.FrecuenciaPagoEnDia = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"frecuenciaPagoEnDia")), typeof(int));
                            else
                                row.FrecuenciaPagoEnDia = null;

                            if (fieldNames.Contains("amortizacion") && !reader.IsDBNull(reader.GetOrdinal(@"amortizacion")))
                                row.Amortizacion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amortizacion")), typeof(string));
                            else
                                row.Amortizacion = null;

                            if (fieldNames.Contains("frecuenciaPago") && !reader.IsDBNull(reader.GetOrdinal(@"frecuenciaPago")))
                                row.FrecuenciaPago = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"frecuenciaPago")), typeof(string));
                            else
                                row.FrecuenciaPago = null;

                            if (fieldNames.Contains("moneda") && !reader.IsDBNull(reader.GetOrdinal(@"moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"moneda")), typeof(string));

                            if (fieldNames.Contains("simbolo") && !reader.IsDBNull(reader.GetOrdinal(@"simbolo")))
                                row.Simbolo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"simbolo")), typeof(string));

                            if (fieldNames.Contains("ultimaFecha") && !reader.IsDBNull(reader.GetOrdinal(@"ultimaFecha")))
                                row.UltimaFecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ultimaFecha")), typeof(System.DateTime));
                            else
                                row.UltimaFecha = null;

                            if (fieldNames.Contains("diasParaCancelar") && !reader.IsDBNull(reader.GetOrdinal(@"diasParaCancelar")))
                                row.DiasParaCancelar = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"diasParaCancelar")), typeof(int));
                            else
                                row.DiasParaCancelar = null;

                            if (fieldNames.Contains("mesParaCancelar") && !reader.IsDBNull(reader.GetOrdinal(@"mesParaCancelar")))
                                row.MesParaCancelar = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mesParaCancelar")), typeof(decimal));
                            else
                                row.MesParaCancelar = null;

                            if (fieldNames.Contains("mesParaCancelar%") && !reader.IsDBNull(reader.GetOrdinal(@"mesParaCancelar%")))
                                row.MesParaCancelar1 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mesParaCancelar%")), typeof(decimal));
                            else
                                row.MesParaCancelar1 = null;

                            if (fieldNames.Contains("TipoCambio") && !reader.IsDBNull(reader.GetOrdinal(@"TipoCambio")))
                                row.TipoCambio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TipoCambio")), typeof(decimal));

                            if (fieldNames.Contains("Factura") && !reader.IsDBNull(reader.GetOrdinal(@"Factura")))
                                row.Factura = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Factura")), typeof(string));

                            if (fieldNames.Contains("Provisionado") && !reader.IsDBNull(reader.GetOrdinal(@"Provisionado")))
                                row.Provisionado = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Provisionado")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Reporte para reportal al buro de credito
        /// </summary>
        public List<PrCxcGetReportUploadBuroResult> PrCxcGetReportUploadBuro (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportUploadBuroResult> result = new List<PrCxcGetReportUploadBuroResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_upload_buro";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 250;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportUploadBuroResult row = new PrCxcGetReportUploadBuroResult();
                            if (fieldNames.Contains("TIPO_DE_ENTIDAD") && !reader.IsDBNull(reader.GetOrdinal(@"TIPO_DE_ENTIDAD")))
                                row.TIPODEENTIDAD = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TIPO_DE_ENTIDAD")), typeof(string));
                            else
                                row.TIPODEENTIDAD = null;

                            if (fieldNames.Contains("NUMERO_CORRELATIVO") && !reader.IsDBNull(reader.GetOrdinal(@"NUMERO_CORRELATIVO")))
                                row.NUMEROCORRELATIVO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NUMERO_CORRELATIVO")), typeof(string));
                            else
                                row.NUMEROCORRELATIVO = null;

                            if (fieldNames.Contains("FECHA_DE_REPORTE") && !reader.IsDBNull(reader.GetOrdinal(@"FECHA_DE_REPORTE")))
                                row.FECHADEREPORTE = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FECHA_DE_REPORTE")), typeof(string));
                            else
                                row.FECHADEREPORTE = null;

                            if (fieldNames.Contains("DEPARTAMENTO") && !reader.IsDBNull(reader.GetOrdinal(@"DEPARTAMENTO")))
                                row.DEPARTAMENTO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DEPARTAMENTO")), typeof(string));
                            else
                                row.DEPARTAMENTO = null;

                            if (fieldNames.Contains("NUMERO_DE_CEDULA_O_RUC") && !reader.IsDBNull(reader.GetOrdinal(@"NUMERO_DE_CEDULA_O_RUC")))
                                row.NUMERODECEDULAORUC = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NUMERO_DE_CEDULA_O_RUC")), typeof(string));
                            else
                                row.NUMERODECEDULAORUC = null;

                            if (fieldNames.Contains("NOMBRE_DE_PERSONA") && !reader.IsDBNull(reader.GetOrdinal(@"NOMBRE_DE_PERSONA")))
                                row.NOMBREDEPERSONA = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NOMBRE_DE_PERSONA")), typeof(string));
                            else
                                row.NOMBREDEPERSONA = null;

                            if (fieldNames.Contains("TIPO_DE_CREDITO") && !reader.IsDBNull(reader.GetOrdinal(@"TIPO_DE_CREDITO")))
                                row.TIPODECREDITO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TIPO_DE_CREDITO")), typeof(string));
                            else
                                row.TIPODECREDITO = null;

                            if (fieldNames.Contains("FECHA_DE_DESEMBOLSO") && !reader.IsDBNull(reader.GetOrdinal(@"FECHA_DE_DESEMBOLSO")))
                                row.FECHADEDESEMBOLSO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FECHA_DE_DESEMBOLSO")), typeof(string));
                            else
                                row.FECHADEDESEMBOLSO = null;

                            if (fieldNames.Contains("TIPO_DE_OBLIGACION") && !reader.IsDBNull(reader.GetOrdinal(@"TIPO_DE_OBLIGACION")))
                                row.TIPODEOBLIGACION = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TIPO_DE_OBLIGACION")), typeof(string));
                            else
                                row.TIPODEOBLIGACION = null;

                            if (fieldNames.Contains("MONTO_AUTORIZADO") && !reader.IsDBNull(reader.GetOrdinal(@"MONTO_AUTORIZADO")))
                                row.MONTOAUTORIZADO = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MONTO_AUTORIZADO")), typeof(decimal));
                            else
                                row.MONTOAUTORIZADO = null;

                            if (fieldNames.Contains("PLAZO") && !reader.IsDBNull(reader.GetOrdinal(@"PLAZO")))
                                row.PLAZO = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"PLAZO")), typeof(int));
                            else
                                row.PLAZO = null;

                            if (fieldNames.Contains("FRECUENCIA_DE_PAGO") && !reader.IsDBNull(reader.GetOrdinal(@"FRECUENCIA_DE_PAGO")))
                                row.FRECUENCIADEPAGO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FRECUENCIA_DE_PAGO")), typeof(string));
                            else
                                row.FRECUENCIADEPAGO = null;

                            if (fieldNames.Contains("SALDO_DEUDA") && !reader.IsDBNull(reader.GetOrdinal(@"SALDO_DEUDA")))
                                row.SALDODEUDA = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SALDO_DEUDA")), typeof(decimal));
                            else
                                row.SALDODEUDA = null;

                            if (fieldNames.Contains("ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                row.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            else
                                row.ESTADO = null;

                            if (fieldNames.Contains("MONTO_VENCIDO") && !reader.IsDBNull(reader.GetOrdinal(@"MONTO_VENCIDO")))
                                row.MONTOVENCIDO = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MONTO_VENCIDO")), typeof(decimal));
                            else
                                row.MONTOVENCIDO = null;

                            if (fieldNames.Contains("ANTIGUEDAD_DE_MORA") && !reader.IsDBNull(reader.GetOrdinal(@"ANTIGUEDAD_DE_MORA")))
                                row.ANTIGUEDADDEMORA = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ANTIGUEDAD_DE_MORA")), typeof(int));
                            else
                                row.ANTIGUEDADDEMORA = null;

                            if (fieldNames.Contains("TIPO_DE_GARANTIA") && !reader.IsDBNull(reader.GetOrdinal(@"TIPO_DE_GARANTIA")))
                                row.TIPODEGARANTIA = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TIPO_DE_GARANTIA")), typeof(string));
                            else
                                row.TIPODEGARANTIA = null;

                            if (fieldNames.Contains("FORMA_DE_RECUPERACION") && !reader.IsDBNull(reader.GetOrdinal(@"FORMA_DE_RECUPERACION")))
                                row.FORMADERECUPERACION = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FORMA_DE_RECUPERACION")), typeof(string));
                            else
                                row.FORMADERECUPERACION = null;

                            if (fieldNames.Contains("NUMERO_DE_CREDITO") && !reader.IsDBNull(reader.GetOrdinal(@"NUMERO_DE_CREDITO")))
                                row.NUMERODECREDITO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NUMERO_DE_CREDITO")), typeof(string));
                            else
                                row.NUMERODECREDITO = null;

                            if (fieldNames.Contains("VALOR_DE_LA_CUOTA") && !reader.IsDBNull(reader.GetOrdinal(@"VALOR_DE_LA_CUOTA")))
                                row.VALORDELACUOTA = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"VALOR_DE_LA_CUOTA")), typeof(decimal));
                            else
                                row.VALORDELACUOTA = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Reporte para reportal al buro de credito
        /// </summary>
        public async Task<List<PrCxcGetReportUploadBuroResult>> PrCxcGetReportUploadBuroAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrCxcGetReportUploadBuroResult> result = new List<PrCxcGetReportUploadBuroResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_upload_buro";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 250;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcGetReportUploadBuroResult row = new PrCxcGetReportUploadBuroResult();
                            if (fieldNames.Contains("TIPO_DE_ENTIDAD") && !reader.IsDBNull(reader.GetOrdinal(@"TIPO_DE_ENTIDAD")))
                                row.TIPODEENTIDAD = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TIPO_DE_ENTIDAD")), typeof(string));
                            else
                                row.TIPODEENTIDAD = null;

                            if (fieldNames.Contains("NUMERO_CORRELATIVO") && !reader.IsDBNull(reader.GetOrdinal(@"NUMERO_CORRELATIVO")))
                                row.NUMEROCORRELATIVO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NUMERO_CORRELATIVO")), typeof(string));
                            else
                                row.NUMEROCORRELATIVO = null;

                            if (fieldNames.Contains("FECHA_DE_REPORTE") && !reader.IsDBNull(reader.GetOrdinal(@"FECHA_DE_REPORTE")))
                                row.FECHADEREPORTE = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FECHA_DE_REPORTE")), typeof(string));
                            else
                                row.FECHADEREPORTE = null;

                            if (fieldNames.Contains("DEPARTAMENTO") && !reader.IsDBNull(reader.GetOrdinal(@"DEPARTAMENTO")))
                                row.DEPARTAMENTO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"DEPARTAMENTO")), typeof(string));
                            else
                                row.DEPARTAMENTO = null;

                            if (fieldNames.Contains("NUMERO_DE_CEDULA_O_RUC") && !reader.IsDBNull(reader.GetOrdinal(@"NUMERO_DE_CEDULA_O_RUC")))
                                row.NUMERODECEDULAORUC = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NUMERO_DE_CEDULA_O_RUC")), typeof(string));
                            else
                                row.NUMERODECEDULAORUC = null;

                            if (fieldNames.Contains("NOMBRE_DE_PERSONA") && !reader.IsDBNull(reader.GetOrdinal(@"NOMBRE_DE_PERSONA")))
                                row.NOMBREDEPERSONA = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NOMBRE_DE_PERSONA")), typeof(string));
                            else
                                row.NOMBREDEPERSONA = null;

                            if (fieldNames.Contains("TIPO_DE_CREDITO") && !reader.IsDBNull(reader.GetOrdinal(@"TIPO_DE_CREDITO")))
                                row.TIPODECREDITO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TIPO_DE_CREDITO")), typeof(string));
                            else
                                row.TIPODECREDITO = null;

                            if (fieldNames.Contains("FECHA_DE_DESEMBOLSO") && !reader.IsDBNull(reader.GetOrdinal(@"FECHA_DE_DESEMBOLSO")))
                                row.FECHADEDESEMBOLSO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FECHA_DE_DESEMBOLSO")), typeof(string));
                            else
                                row.FECHADEDESEMBOLSO = null;

                            if (fieldNames.Contains("TIPO_DE_OBLIGACION") && !reader.IsDBNull(reader.GetOrdinal(@"TIPO_DE_OBLIGACION")))
                                row.TIPODEOBLIGACION = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TIPO_DE_OBLIGACION")), typeof(string));
                            else
                                row.TIPODEOBLIGACION = null;

                            if (fieldNames.Contains("MONTO_AUTORIZADO") && !reader.IsDBNull(reader.GetOrdinal(@"MONTO_AUTORIZADO")))
                                row.MONTOAUTORIZADO = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MONTO_AUTORIZADO")), typeof(decimal));
                            else
                                row.MONTOAUTORIZADO = null;

                            if (fieldNames.Contains("PLAZO") && !reader.IsDBNull(reader.GetOrdinal(@"PLAZO")))
                                row.PLAZO = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"PLAZO")), typeof(int));
                            else
                                row.PLAZO = null;

                            if (fieldNames.Contains("FRECUENCIA_DE_PAGO") && !reader.IsDBNull(reader.GetOrdinal(@"FRECUENCIA_DE_PAGO")))
                                row.FRECUENCIADEPAGO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FRECUENCIA_DE_PAGO")), typeof(string));
                            else
                                row.FRECUENCIADEPAGO = null;

                            if (fieldNames.Contains("SALDO_DEUDA") && !reader.IsDBNull(reader.GetOrdinal(@"SALDO_DEUDA")))
                                row.SALDODEUDA = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"SALDO_DEUDA")), typeof(decimal));
                            else
                                row.SALDODEUDA = null;

                            if (fieldNames.Contains("ESTADO") && !reader.IsDBNull(reader.GetOrdinal(@"ESTADO")))
                                row.ESTADO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ESTADO")), typeof(string));
                            else
                                row.ESTADO = null;

                            if (fieldNames.Contains("MONTO_VENCIDO") && !reader.IsDBNull(reader.GetOrdinal(@"MONTO_VENCIDO")))
                                row.MONTOVENCIDO = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"MONTO_VENCIDO")), typeof(decimal));
                            else
                                row.MONTOVENCIDO = null;

                            if (fieldNames.Contains("ANTIGUEDAD_DE_MORA") && !reader.IsDBNull(reader.GetOrdinal(@"ANTIGUEDAD_DE_MORA")))
                                row.ANTIGUEDADDEMORA = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ANTIGUEDAD_DE_MORA")), typeof(int));
                            else
                                row.ANTIGUEDADDEMORA = null;

                            if (fieldNames.Contains("TIPO_DE_GARANTIA") && !reader.IsDBNull(reader.GetOrdinal(@"TIPO_DE_GARANTIA")))
                                row.TIPODEGARANTIA = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"TIPO_DE_GARANTIA")), typeof(string));
                            else
                                row.TIPODEGARANTIA = null;

                            if (fieldNames.Contains("FORMA_DE_RECUPERACION") && !reader.IsDBNull(reader.GetOrdinal(@"FORMA_DE_RECUPERACION")))
                                row.FORMADERECUPERACION = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"FORMA_DE_RECUPERACION")), typeof(string));
                            else
                                row.FORMADERECUPERACION = null;

                            if (fieldNames.Contains("NUMERO_DE_CREDITO") && !reader.IsDBNull(reader.GetOrdinal(@"NUMERO_DE_CREDITO")))
                                row.NUMERODECREDITO = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"NUMERO_DE_CREDITO")), typeof(string));
                            else
                                row.NUMERODECREDITO = null;

                            if (fieldNames.Contains("VALOR_DE_LA_CUOTA") && !reader.IsDBNull(reader.GetOrdinal(@"VALOR_DE_LA_CUOTA")))
                                row.VALORDELACUOTA = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"VALOR_DE_LA_CUOTA")), typeof(decimal));
                            else
                                row.VALORDELACUOTA = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para aumentar de plazo los creditos que son tipo americano y estan proximo a vencer
        /// </summary>
        public List<PrCxcProcExpandinvoiceResult> PrCxcProcExpandinvoice (int? prCompanyID, string prDocumentNumber)
        {

            List<PrCxcProcExpandinvoiceResult> result = new List<PrCxcProcExpandinvoiceResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_proc_expandinvoice";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcProcExpandinvoiceResult row = new PrCxcProcExpandinvoiceResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.Mensaje = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("mensaje") && !reader.IsDBNull(reader.GetOrdinal(@"mensaje")))
                                row.Mensaje = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mensaje")), typeof(string));
                            else
                                row.Mensaje = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para aumentar de plazo los creditos que son tipo americano y estan proximo a vencer
        /// </summary>
        public async Task<List<PrCxcProcExpandinvoiceResult>> PrCxcProcExpandinvoiceAsync (int? prCompanyID, string prDocumentNumber)
        {

            List<PrCxcProcExpandinvoiceResult> result = new List<PrCxcProcExpandinvoiceResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_proc_expandinvoice";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcProcExpandinvoiceResult row = new PrCxcProcExpandinvoiceResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.Mensaje = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("mensaje") && !reader.IsDBNull(reader.GetOrdinal(@"mensaje")))
                                row.Mensaje = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mensaje")), typeof(string));
                            else
                                row.Mensaje = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Anula una cuota
        /// </summary>
        public void PrCxcProcSuprimeShare (int? prCompanyID, string prDocumentNumber, DateTime? prCuotaModificada, bool? prAumentaMesDeGracia, decimal? prCambioInteresDelMes)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_proc_suprime_share";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);

                    DbParameter prCuotaModificadaParameter = cmd.CreateParameter();
                    prCuotaModificadaParameter.ParameterName = "prCuotaModificada";
                    prCuotaModificadaParameter.Direction = ParameterDirection.Input;
                    prCuotaModificadaParameter.DbType = DbType.DateTime;
                    if (prCuotaModificada.HasValue)
                    {
                        prCuotaModificadaParameter.Value = prCuotaModificada.Value;
                    }
                    else
                    {
                        prCuotaModificadaParameter.Size = -1;
                        prCuotaModificadaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCuotaModificadaParameter);

                    DbParameter prAumentaMesDeGraciaParameter = cmd.CreateParameter();
                    prAumentaMesDeGraciaParameter.ParameterName = "prAumentaMesDeGracia";
                    prAumentaMesDeGraciaParameter.Direction = ParameterDirection.Input;
                    prAumentaMesDeGraciaParameter.DbType = DbType.Boolean;
                    prAumentaMesDeGraciaParameter.Precision = 1;
                    if (prAumentaMesDeGracia.HasValue)
                    {
                        prAumentaMesDeGraciaParameter.Value = prAumentaMesDeGracia.Value;
                    }
                    else
                    {
                        prAumentaMesDeGraciaParameter.Size = -1;
                        prAumentaMesDeGraciaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAumentaMesDeGraciaParameter);

                    DbParameter prCambioInteresDelMesParameter = cmd.CreateParameter();
                    prCambioInteresDelMesParameter.ParameterName = "prCambioInteresDelMes";
                    prCambioInteresDelMesParameter.Direction = ParameterDirection.Input;
                    prCambioInteresDelMesParameter.DbType = DbType.Decimal;
                    prCambioInteresDelMesParameter.Precision = 19;
                    prCambioInteresDelMesParameter.Scale = 5;
                    if (prCambioInteresDelMes.HasValue)
                    {
                        prCambioInteresDelMesParameter.Value = prCambioInteresDelMes.Value;
                    }
                    else
                    {
                        prCambioInteresDelMesParameter.Size = -1;
                        prCambioInteresDelMesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCambioInteresDelMesParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Anula una cuota
        /// </summary>
        public async Task PrCxcProcSuprimeShareAsync (int? prCompanyID, string prDocumentNumber, DateTime? prCuotaModificada, bool? prAumentaMesDeGracia, decimal? prCambioInteresDelMes)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_proc_suprime_share";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);

                    DbParameter prCuotaModificadaParameter = cmd.CreateParameter();
                    prCuotaModificadaParameter.ParameterName = "prCuotaModificada";
                    prCuotaModificadaParameter.Direction = ParameterDirection.Input;
                    prCuotaModificadaParameter.DbType = DbType.DateTime;
                    if (prCuotaModificada.HasValue)
                    {
                        prCuotaModificadaParameter.Value = prCuotaModificada.Value;
                    }
                    else
                    {
                        prCuotaModificadaParameter.Size = -1;
                        prCuotaModificadaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCuotaModificadaParameter);

                    DbParameter prAumentaMesDeGraciaParameter = cmd.CreateParameter();
                    prAumentaMesDeGraciaParameter.ParameterName = "prAumentaMesDeGracia";
                    prAumentaMesDeGraciaParameter.Direction = ParameterDirection.Input;
                    prAumentaMesDeGraciaParameter.DbType = DbType.Boolean;
                    prAumentaMesDeGraciaParameter.Precision = 1;
                    if (prAumentaMesDeGracia.HasValue)
                    {
                        prAumentaMesDeGraciaParameter.Value = prAumentaMesDeGracia.Value;
                    }
                    else
                    {
                        prAumentaMesDeGraciaParameter.Size = -1;
                        prAumentaMesDeGraciaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAumentaMesDeGraciaParameter);

                    DbParameter prCambioInteresDelMesParameter = cmd.CreateParameter();
                    prCambioInteresDelMesParameter.ParameterName = "prCambioInteresDelMes";
                    prCambioInteresDelMesParameter.Direction = ParameterDirection.Input;
                    prCambioInteresDelMesParameter.DbType = DbType.Decimal;
                    prCambioInteresDelMesParameter.Precision = 19;
                    prCambioInteresDelMesParameter.Scale = 5;
                    if (prCambioInteresDelMes.HasValue)
                    {
                        prCambioInteresDelMesParameter.Value = prCambioInteresDelMes.Value;
                    }
                    else
                    {
                        prCambioInteresDelMesParameter.Size = -1;
                        prCambioInteresDelMesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCambioInteresDelMesParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrCxcProAddSolidarioToCreditSinRiesgo (int? prCompanyID, string prInvoiceNumber, string prCustomerNumber, decimal? prRatioDesembolso, decimal? prRatioBalance, decimal? prRatioBalanceExpired, decimal? prRatioShare, int? prTipoCredito, int? prTipoObligacion, int? prFrecuenciaPago, int? prEstadoCredito, int? prRecuperacion, int? prGarantia)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_pro_add_solidario_to_credit_sin_riesgo";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prInvoiceNumberParameter = cmd.CreateParameter();
                    prInvoiceNumberParameter.ParameterName = "prInvoiceNumber";
                    prInvoiceNumberParameter.Direction = ParameterDirection.Input;
                    prInvoiceNumberParameter.DbType = DbType.String;
                    prInvoiceNumberParameter.Size = 50;
                    if (prInvoiceNumber != null)
                    {
                        prInvoiceNumberParameter.Value = prInvoiceNumber;
                    }
                    else
                    {
                        prInvoiceNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInvoiceNumberParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);

                    DbParameter prRatioDesembolsoParameter = cmd.CreateParameter();
                    prRatioDesembolsoParameter.ParameterName = "prRatioDesembolso";
                    prRatioDesembolsoParameter.Direction = ParameterDirection.Input;
                    prRatioDesembolsoParameter.DbType = DbType.Decimal;
                    prRatioDesembolsoParameter.Precision = 10;
                    prRatioDesembolsoParameter.Scale = 4;
                    if (prRatioDesembolso.HasValue)
                    {
                        prRatioDesembolsoParameter.Value = prRatioDesembolso.Value;
                    }
                    else
                    {
                        prRatioDesembolsoParameter.Size = -1;
                        prRatioDesembolsoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioDesembolsoParameter);

                    DbParameter prRatioBalanceParameter = cmd.CreateParameter();
                    prRatioBalanceParameter.ParameterName = "prRatioBalance";
                    prRatioBalanceParameter.Direction = ParameterDirection.Input;
                    prRatioBalanceParameter.DbType = DbType.Decimal;
                    prRatioBalanceParameter.Precision = 10;
                    prRatioBalanceParameter.Scale = 4;
                    if (prRatioBalance.HasValue)
                    {
                        prRatioBalanceParameter.Value = prRatioBalance.Value;
                    }
                    else
                    {
                        prRatioBalanceParameter.Size = -1;
                        prRatioBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioBalanceParameter);

                    DbParameter prRatioBalanceExpiredParameter = cmd.CreateParameter();
                    prRatioBalanceExpiredParameter.ParameterName = "prRatioBalanceExpired";
                    prRatioBalanceExpiredParameter.Direction = ParameterDirection.Input;
                    prRatioBalanceExpiredParameter.DbType = DbType.Decimal;
                    prRatioBalanceExpiredParameter.Precision = 10;
                    prRatioBalanceExpiredParameter.Scale = 4;
                    if (prRatioBalanceExpired.HasValue)
                    {
                        prRatioBalanceExpiredParameter.Value = prRatioBalanceExpired.Value;
                    }
                    else
                    {
                        prRatioBalanceExpiredParameter.Size = -1;
                        prRatioBalanceExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioBalanceExpiredParameter);

                    DbParameter prRatioShareParameter = cmd.CreateParameter();
                    prRatioShareParameter.ParameterName = "prRatioShare";
                    prRatioShareParameter.Direction = ParameterDirection.Input;
                    prRatioShareParameter.DbType = DbType.Decimal;
                    prRatioShareParameter.Precision = 10;
                    prRatioShareParameter.Scale = 4;
                    if (prRatioShare.HasValue)
                    {
                        prRatioShareParameter.Value = prRatioShare.Value;
                    }
                    else
                    {
                        prRatioShareParameter.Size = -1;
                        prRatioShareParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioShareParameter);

                    DbParameter prTipoCreditoParameter = cmd.CreateParameter();
                    prTipoCreditoParameter.ParameterName = "prTipoCredito";
                    prTipoCreditoParameter.Direction = ParameterDirection.Input;
                    prTipoCreditoParameter.DbType = DbType.Int32;
                    prTipoCreditoParameter.Precision = 10;
                    prTipoCreditoParameter.Scale = 0;
                    if (prTipoCredito.HasValue)
                    {
                        prTipoCreditoParameter.Value = prTipoCredito.Value;
                    }
                    else
                    {
                        prTipoCreditoParameter.Size = -1;
                        prTipoCreditoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoCreditoParameter);

                    DbParameter prTipoObligacionParameter = cmd.CreateParameter();
                    prTipoObligacionParameter.ParameterName = "prTipoObligacion";
                    prTipoObligacionParameter.Direction = ParameterDirection.Input;
                    prTipoObligacionParameter.DbType = DbType.Int32;
                    prTipoObligacionParameter.Precision = 10;
                    prTipoObligacionParameter.Scale = 0;
                    if (prTipoObligacion.HasValue)
                    {
                        prTipoObligacionParameter.Value = prTipoObligacion.Value;
                    }
                    else
                    {
                        prTipoObligacionParameter.Size = -1;
                        prTipoObligacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoObligacionParameter);

                    DbParameter prFrecuenciaPagoParameter = cmd.CreateParameter();
                    prFrecuenciaPagoParameter.ParameterName = "prFrecuenciaPago";
                    prFrecuenciaPagoParameter.Direction = ParameterDirection.Input;
                    prFrecuenciaPagoParameter.DbType = DbType.Int32;
                    prFrecuenciaPagoParameter.Precision = 10;
                    prFrecuenciaPagoParameter.Scale = 0;
                    if (prFrecuenciaPago.HasValue)
                    {
                        prFrecuenciaPagoParameter.Value = prFrecuenciaPago.Value;
                    }
                    else
                    {
                        prFrecuenciaPagoParameter.Size = -1;
                        prFrecuenciaPagoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFrecuenciaPagoParameter);

                    DbParameter prEstadoCreditoParameter = cmd.CreateParameter();
                    prEstadoCreditoParameter.ParameterName = "prEstadoCredito";
                    prEstadoCreditoParameter.Direction = ParameterDirection.Input;
                    prEstadoCreditoParameter.DbType = DbType.Int32;
                    prEstadoCreditoParameter.Precision = 10;
                    prEstadoCreditoParameter.Scale = 0;
                    if (prEstadoCredito.HasValue)
                    {
                        prEstadoCreditoParameter.Value = prEstadoCredito.Value;
                    }
                    else
                    {
                        prEstadoCreditoParameter.Size = -1;
                        prEstadoCreditoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEstadoCreditoParameter);

                    DbParameter prRecuperacionParameter = cmd.CreateParameter();
                    prRecuperacionParameter.ParameterName = "prRecuperacion";
                    prRecuperacionParameter.Direction = ParameterDirection.Input;
                    prRecuperacionParameter.DbType = DbType.Int32;
                    prRecuperacionParameter.Precision = 10;
                    prRecuperacionParameter.Scale = 0;
                    if (prRecuperacion.HasValue)
                    {
                        prRecuperacionParameter.Value = prRecuperacion.Value;
                    }
                    else
                    {
                        prRecuperacionParameter.Size = -1;
                        prRecuperacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRecuperacionParameter);

                    DbParameter prGarantiaParameter = cmd.CreateParameter();
                    prGarantiaParameter.ParameterName = "prGarantia";
                    prGarantiaParameter.Direction = ParameterDirection.Input;
                    prGarantiaParameter.DbType = DbType.Int32;
                    prGarantiaParameter.Precision = 10;
                    prGarantiaParameter.Scale = 0;
                    if (prGarantia.HasValue)
                    {
                        prGarantiaParameter.Value = prGarantia.Value;
                    }
                    else
                    {
                        prGarantiaParameter.Size = -1;
                        prGarantiaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prGarantiaParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrCxcProAddSolidarioToCreditSinRiesgoAsync (int? prCompanyID, string prInvoiceNumber, string prCustomerNumber, decimal? prRatioDesembolso, decimal? prRatioBalance, decimal? prRatioBalanceExpired, decimal? prRatioShare, int? prTipoCredito, int? prTipoObligacion, int? prFrecuenciaPago, int? prEstadoCredito, int? prRecuperacion, int? prGarantia)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_pro_add_solidario_to_credit_sin_riesgo";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prInvoiceNumberParameter = cmd.CreateParameter();
                    prInvoiceNumberParameter.ParameterName = "prInvoiceNumber";
                    prInvoiceNumberParameter.Direction = ParameterDirection.Input;
                    prInvoiceNumberParameter.DbType = DbType.String;
                    prInvoiceNumberParameter.Size = 50;
                    if (prInvoiceNumber != null)
                    {
                        prInvoiceNumberParameter.Value = prInvoiceNumber;
                    }
                    else
                    {
                        prInvoiceNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInvoiceNumberParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);

                    DbParameter prRatioDesembolsoParameter = cmd.CreateParameter();
                    prRatioDesembolsoParameter.ParameterName = "prRatioDesembolso";
                    prRatioDesembolsoParameter.Direction = ParameterDirection.Input;
                    prRatioDesembolsoParameter.DbType = DbType.Decimal;
                    prRatioDesembolsoParameter.Precision = 10;
                    prRatioDesembolsoParameter.Scale = 4;
                    if (prRatioDesembolso.HasValue)
                    {
                        prRatioDesembolsoParameter.Value = prRatioDesembolso.Value;
                    }
                    else
                    {
                        prRatioDesembolsoParameter.Size = -1;
                        prRatioDesembolsoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioDesembolsoParameter);

                    DbParameter prRatioBalanceParameter = cmd.CreateParameter();
                    prRatioBalanceParameter.ParameterName = "prRatioBalance";
                    prRatioBalanceParameter.Direction = ParameterDirection.Input;
                    prRatioBalanceParameter.DbType = DbType.Decimal;
                    prRatioBalanceParameter.Precision = 10;
                    prRatioBalanceParameter.Scale = 4;
                    if (prRatioBalance.HasValue)
                    {
                        prRatioBalanceParameter.Value = prRatioBalance.Value;
                    }
                    else
                    {
                        prRatioBalanceParameter.Size = -1;
                        prRatioBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioBalanceParameter);

                    DbParameter prRatioBalanceExpiredParameter = cmd.CreateParameter();
                    prRatioBalanceExpiredParameter.ParameterName = "prRatioBalanceExpired";
                    prRatioBalanceExpiredParameter.Direction = ParameterDirection.Input;
                    prRatioBalanceExpiredParameter.DbType = DbType.Decimal;
                    prRatioBalanceExpiredParameter.Precision = 10;
                    prRatioBalanceExpiredParameter.Scale = 4;
                    if (prRatioBalanceExpired.HasValue)
                    {
                        prRatioBalanceExpiredParameter.Value = prRatioBalanceExpired.Value;
                    }
                    else
                    {
                        prRatioBalanceExpiredParameter.Size = -1;
                        prRatioBalanceExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioBalanceExpiredParameter);

                    DbParameter prRatioShareParameter = cmd.CreateParameter();
                    prRatioShareParameter.ParameterName = "prRatioShare";
                    prRatioShareParameter.Direction = ParameterDirection.Input;
                    prRatioShareParameter.DbType = DbType.Decimal;
                    prRatioShareParameter.Precision = 10;
                    prRatioShareParameter.Scale = 4;
                    if (prRatioShare.HasValue)
                    {
                        prRatioShareParameter.Value = prRatioShare.Value;
                    }
                    else
                    {
                        prRatioShareParameter.Size = -1;
                        prRatioShareParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioShareParameter);

                    DbParameter prTipoCreditoParameter = cmd.CreateParameter();
                    prTipoCreditoParameter.ParameterName = "prTipoCredito";
                    prTipoCreditoParameter.Direction = ParameterDirection.Input;
                    prTipoCreditoParameter.DbType = DbType.Int32;
                    prTipoCreditoParameter.Precision = 10;
                    prTipoCreditoParameter.Scale = 0;
                    if (prTipoCredito.HasValue)
                    {
                        prTipoCreditoParameter.Value = prTipoCredito.Value;
                    }
                    else
                    {
                        prTipoCreditoParameter.Size = -1;
                        prTipoCreditoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoCreditoParameter);

                    DbParameter prTipoObligacionParameter = cmd.CreateParameter();
                    prTipoObligacionParameter.ParameterName = "prTipoObligacion";
                    prTipoObligacionParameter.Direction = ParameterDirection.Input;
                    prTipoObligacionParameter.DbType = DbType.Int32;
                    prTipoObligacionParameter.Precision = 10;
                    prTipoObligacionParameter.Scale = 0;
                    if (prTipoObligacion.HasValue)
                    {
                        prTipoObligacionParameter.Value = prTipoObligacion.Value;
                    }
                    else
                    {
                        prTipoObligacionParameter.Size = -1;
                        prTipoObligacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoObligacionParameter);

                    DbParameter prFrecuenciaPagoParameter = cmd.CreateParameter();
                    prFrecuenciaPagoParameter.ParameterName = "prFrecuenciaPago";
                    prFrecuenciaPagoParameter.Direction = ParameterDirection.Input;
                    prFrecuenciaPagoParameter.DbType = DbType.Int32;
                    prFrecuenciaPagoParameter.Precision = 10;
                    prFrecuenciaPagoParameter.Scale = 0;
                    if (prFrecuenciaPago.HasValue)
                    {
                        prFrecuenciaPagoParameter.Value = prFrecuenciaPago.Value;
                    }
                    else
                    {
                        prFrecuenciaPagoParameter.Size = -1;
                        prFrecuenciaPagoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFrecuenciaPagoParameter);

                    DbParameter prEstadoCreditoParameter = cmd.CreateParameter();
                    prEstadoCreditoParameter.ParameterName = "prEstadoCredito";
                    prEstadoCreditoParameter.Direction = ParameterDirection.Input;
                    prEstadoCreditoParameter.DbType = DbType.Int32;
                    prEstadoCreditoParameter.Precision = 10;
                    prEstadoCreditoParameter.Scale = 0;
                    if (prEstadoCredito.HasValue)
                    {
                        prEstadoCreditoParameter.Value = prEstadoCredito.Value;
                    }
                    else
                    {
                        prEstadoCreditoParameter.Size = -1;
                        prEstadoCreditoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEstadoCreditoParameter);

                    DbParameter prRecuperacionParameter = cmd.CreateParameter();
                    prRecuperacionParameter.ParameterName = "prRecuperacion";
                    prRecuperacionParameter.Direction = ParameterDirection.Input;
                    prRecuperacionParameter.DbType = DbType.Int32;
                    prRecuperacionParameter.Precision = 10;
                    prRecuperacionParameter.Scale = 0;
                    if (prRecuperacion.HasValue)
                    {
                        prRecuperacionParameter.Value = prRecuperacion.Value;
                    }
                    else
                    {
                        prRecuperacionParameter.Size = -1;
                        prRecuperacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRecuperacionParameter);

                    DbParameter prGarantiaParameter = cmd.CreateParameter();
                    prGarantiaParameter.ParameterName = "prGarantia";
                    prGarantiaParameter.Direction = ParameterDirection.Input;
                    prGarantiaParameter.DbType = DbType.Int32;
                    prGarantiaParameter.Precision = 10;
                    prGarantiaParameter.Scale = 0;
                    if (prGarantia.HasValue)
                    {
                        prGarantiaParameter.Value = prGarantia.Value;
                    }
                    else
                    {
                        prGarantiaParameter.Size = -1;
                        prGarantiaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prGarantiaParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Obtener detalle de gastos 
        /// </summary>
        public List<PrCxpGetReportExpensesDetailResult> PrCxpGetReportExpensesDetail (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prTipoExpense, int? prCategoryExpenses, int? prClassExpenses)
        {

            List<PrCxpGetReportExpensesDetailResult> result = new List<PrCxpGetReportExpensesDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prTipoExpenseParameter = cmd.CreateParameter();
                    prTipoExpenseParameter.ParameterName = "prTipoExpense";
                    prTipoExpenseParameter.Direction = ParameterDirection.Input;
                    prTipoExpenseParameter.DbType = DbType.Int32;
                    prTipoExpenseParameter.Precision = 10;
                    prTipoExpenseParameter.Scale = 0;
                    if (prTipoExpense.HasValue)
                    {
                        prTipoExpenseParameter.Value = prTipoExpense.Value;
                    }
                    else
                    {
                        prTipoExpenseParameter.Size = -1;
                        prTipoExpenseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoExpenseParameter);

                    DbParameter prCategoryExpensesParameter = cmd.CreateParameter();
                    prCategoryExpensesParameter.ParameterName = "prCategoryExpenses";
                    prCategoryExpensesParameter.Direction = ParameterDirection.Input;
                    prCategoryExpensesParameter.DbType = DbType.Int32;
                    prCategoryExpensesParameter.Precision = 10;
                    prCategoryExpensesParameter.Scale = 0;
                    if (prCategoryExpenses.HasValue)
                    {
                        prCategoryExpensesParameter.Value = prCategoryExpenses.Value;
                    }
                    else
                    {
                        prCategoryExpensesParameter.Size = -1;
                        prCategoryExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryExpensesParameter);

                    DbParameter prClassExpensesParameter = cmd.CreateParameter();
                    prClassExpensesParameter.ParameterName = "prClassExpenses";
                    prClassExpensesParameter.Direction = ParameterDirection.Input;
                    prClassExpensesParameter.DbType = DbType.Int32;
                    prClassExpensesParameter.Precision = 10;
                    prClassExpensesParameter.Scale = 0;
                    if (prClassExpenses.HasValue)
                    {
                        prClassExpensesParameter.Value = prClassExpenses.Value;
                    }
                    else
                    {
                        prClassExpensesParameter.Size = -1;
                        prClassExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassExpensesParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxpGetReportExpensesDetailResult row = new PrCxpGetReportExpensesDetailResult();
                            if (fieldNames.Contains("transactionID") && !reader.IsDBNull(reader.GetOrdinal(@"transactionID")))
                                row.TransactionID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionID")), typeof(int));

                            if (fieldNames.Contains("transactionMasterID") && !reader.IsDBNull(reader.GetOrdinal(@"transactionMasterID")))
                                row.TransactionMasterID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionMasterID")), typeof(int));

                            if (fieldNames.Contains("companyID") && !reader.IsDBNull(reader.GetOrdinal(@"companyID")))
                                row.CompanyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"companyID")), typeof(int));

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("Iva") && !reader.IsDBNull(reader.GetOrdinal(@"Iva")))
                                row.Iva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Iva")), typeof(decimal));
                            else
                                row.Iva = null;

                            if (fieldNames.Contains("Total") && !reader.IsDBNull(reader.GetOrdinal(@"Total")))
                                row.Total = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Total")), typeof(decimal));
                            else
                                row.Total = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("reference1") && !reader.IsDBNull(reader.GetOrdinal(@"reference1")))
                                row.Reference1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference1")), typeof(string));
                            else
                                row.Reference1 = null;

                            if (fieldNames.Contains("reference2") && !reader.IsDBNull(reader.GetOrdinal(@"reference2")))
                                row.Reference2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference2")), typeof(string));
                            else
                                row.Reference2 = null;

                            if (fieldNames.Contains("ruc") && !reader.IsDBNull(reader.GetOrdinal(@"ruc")))
                                row.Ruc = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ruc")), typeof(string));
                            else
                                row.Ruc = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("currencyID2") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID2")))
                                row.CurrencyID2 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID2")), typeof(int));
                            else
                                row.CurrencyID2 = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("areaID") && !reader.IsDBNull(reader.GetOrdinal(@"areaID")))
                                row.AreaID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"areaID")), typeof(int));
                            else
                                row.AreaID = null;

                            if (fieldNames.Contains("priorityID") && !reader.IsDBNull(reader.GetOrdinal(@"priorityID")))
                                row.PriorityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"priorityID")), typeof(int));
                            else
                                row.PriorityID = null;

                            if (fieldNames.Contains("Clasificacion") && !reader.IsDBNull(reader.GetOrdinal(@"Clasificacion")))
                                row.Clasificacion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Clasificacion")), typeof(string));

                            if (fieldNames.Contains("Tipo") && !reader.IsDBNull(reader.GetOrdinal(@"Tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tipo")), typeof(string));
                            else
                                row.Tipo = null;

                            if (fieldNames.Contains("Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                row.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            else
                                row.Categoria = null;

                            if (fieldNames.Contains("CodigoReglon") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoReglon")))
                                row.CodigoReglon = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoReglon")), typeof(string));

                            if (fieldNames.Contains("Proveedor") && !reader.IsDBNull(reader.GetOrdinal(@"Proveedor")))
                                row.Proveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Proveedor")), typeof(string));
                            else
                                row.Proveedor = null;

                            if (fieldNames.Contains("sucursal") && !reader.IsDBNull(reader.GetOrdinal(@"sucursal")))
                                row.Sucursal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sucursal")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Obtener detalle de gastos 
        /// </summary>
        public async Task<List<PrCxpGetReportExpensesDetailResult>> PrCxpGetReportExpensesDetailAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prTipoExpense, int? prCategoryExpenses, int? prClassExpenses)
        {

            List<PrCxpGetReportExpensesDetailResult> result = new List<PrCxpGetReportExpensesDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prTipoExpenseParameter = cmd.CreateParameter();
                    prTipoExpenseParameter.ParameterName = "prTipoExpense";
                    prTipoExpenseParameter.Direction = ParameterDirection.Input;
                    prTipoExpenseParameter.DbType = DbType.Int32;
                    prTipoExpenseParameter.Precision = 10;
                    prTipoExpenseParameter.Scale = 0;
                    if (prTipoExpense.HasValue)
                    {
                        prTipoExpenseParameter.Value = prTipoExpense.Value;
                    }
                    else
                    {
                        prTipoExpenseParameter.Size = -1;
                        prTipoExpenseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoExpenseParameter);

                    DbParameter prCategoryExpensesParameter = cmd.CreateParameter();
                    prCategoryExpensesParameter.ParameterName = "prCategoryExpenses";
                    prCategoryExpensesParameter.Direction = ParameterDirection.Input;
                    prCategoryExpensesParameter.DbType = DbType.Int32;
                    prCategoryExpensesParameter.Precision = 10;
                    prCategoryExpensesParameter.Scale = 0;
                    if (prCategoryExpenses.HasValue)
                    {
                        prCategoryExpensesParameter.Value = prCategoryExpenses.Value;
                    }
                    else
                    {
                        prCategoryExpensesParameter.Size = -1;
                        prCategoryExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryExpensesParameter);

                    DbParameter prClassExpensesParameter = cmd.CreateParameter();
                    prClassExpensesParameter.ParameterName = "prClassExpenses";
                    prClassExpensesParameter.Direction = ParameterDirection.Input;
                    prClassExpensesParameter.DbType = DbType.Int32;
                    prClassExpensesParameter.Precision = 10;
                    prClassExpensesParameter.Scale = 0;
                    if (prClassExpenses.HasValue)
                    {
                        prClassExpensesParameter.Value = prClassExpenses.Value;
                    }
                    else
                    {
                        prClassExpensesParameter.Size = -1;
                        prClassExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassExpensesParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxpGetReportExpensesDetailResult row = new PrCxpGetReportExpensesDetailResult();
                            if (fieldNames.Contains("transactionID") && !reader.IsDBNull(reader.GetOrdinal(@"transactionID")))
                                row.TransactionID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionID")), typeof(int));

                            if (fieldNames.Contains("transactionMasterID") && !reader.IsDBNull(reader.GetOrdinal(@"transactionMasterID")))
                                row.TransactionMasterID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionMasterID")), typeof(int));

                            if (fieldNames.Contains("companyID") && !reader.IsDBNull(reader.GetOrdinal(@"companyID")))
                                row.CompanyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"companyID")), typeof(int));

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("Iva") && !reader.IsDBNull(reader.GetOrdinal(@"Iva")))
                                row.Iva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Iva")), typeof(decimal));
                            else
                                row.Iva = null;

                            if (fieldNames.Contains("Total") && !reader.IsDBNull(reader.GetOrdinal(@"Total")))
                                row.Total = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Total")), typeof(decimal));
                            else
                                row.Total = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("reference1") && !reader.IsDBNull(reader.GetOrdinal(@"reference1")))
                                row.Reference1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference1")), typeof(string));
                            else
                                row.Reference1 = null;

                            if (fieldNames.Contains("reference2") && !reader.IsDBNull(reader.GetOrdinal(@"reference2")))
                                row.Reference2 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"reference2")), typeof(string));
                            else
                                row.Reference2 = null;

                            if (fieldNames.Contains("ruc") && !reader.IsDBNull(reader.GetOrdinal(@"ruc")))
                                row.Ruc = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ruc")), typeof(string));
                            else
                                row.Ruc = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("currencyID2") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID2")))
                                row.CurrencyID2 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID2")), typeof(int));
                            else
                                row.CurrencyID2 = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("areaID") && !reader.IsDBNull(reader.GetOrdinal(@"areaID")))
                                row.AreaID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"areaID")), typeof(int));
                            else
                                row.AreaID = null;

                            if (fieldNames.Contains("priorityID") && !reader.IsDBNull(reader.GetOrdinal(@"priorityID")))
                                row.PriorityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"priorityID")), typeof(int));
                            else
                                row.PriorityID = null;

                            if (fieldNames.Contains("Clasificacion") && !reader.IsDBNull(reader.GetOrdinal(@"Clasificacion")))
                                row.Clasificacion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Clasificacion")), typeof(string));

                            if (fieldNames.Contains("Tipo") && !reader.IsDBNull(reader.GetOrdinal(@"Tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tipo")), typeof(string));
                            else
                                row.Tipo = null;

                            if (fieldNames.Contains("Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                row.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            else
                                row.Categoria = null;

                            if (fieldNames.Contains("CodigoReglon") && !reader.IsDBNull(reader.GetOrdinal(@"CodigoReglon")))
                                row.CodigoReglon = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CodigoReglon")), typeof(string));

                            if (fieldNames.Contains("Proveedor") && !reader.IsDBNull(reader.GetOrdinal(@"Proveedor")))
                                row.Proveedor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Proveedor")), typeof(string));
                            else
                                row.Proveedor = null;

                            if (fieldNames.Contains("sucursal") && !reader.IsDBNull(reader.GetOrdinal(@"sucursal")))
                                row.Sucursal = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"sucursal")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Obtener gastos resumidos por categoria 
        /// </summary>
        public void PrCxpGetReportExpensesSummary (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prTipoExpense, int? prCategoryExpenses, int? prClassExpenses)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prTipoExpenseParameter = cmd.CreateParameter();
                    prTipoExpenseParameter.ParameterName = "prTipoExpense";
                    prTipoExpenseParameter.Direction = ParameterDirection.Input;
                    prTipoExpenseParameter.DbType = DbType.Int32;
                    prTipoExpenseParameter.Precision = 10;
                    prTipoExpenseParameter.Scale = 0;
                    if (prTipoExpense.HasValue)
                    {
                        prTipoExpenseParameter.Value = prTipoExpense.Value;
                    }
                    else
                    {
                        prTipoExpenseParameter.Size = -1;
                        prTipoExpenseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoExpenseParameter);

                    DbParameter prCategoryExpensesParameter = cmd.CreateParameter();
                    prCategoryExpensesParameter.ParameterName = "prCategoryExpenses";
                    prCategoryExpensesParameter.Direction = ParameterDirection.Input;
                    prCategoryExpensesParameter.DbType = DbType.Int32;
                    prCategoryExpensesParameter.Precision = 10;
                    prCategoryExpensesParameter.Scale = 0;
                    if (prCategoryExpenses.HasValue)
                    {
                        prCategoryExpensesParameter.Value = prCategoryExpenses.Value;
                    }
                    else
                    {
                        prCategoryExpensesParameter.Size = -1;
                        prCategoryExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryExpensesParameter);

                    DbParameter prClassExpensesParameter = cmd.CreateParameter();
                    prClassExpensesParameter.ParameterName = "prClassExpenses";
                    prClassExpensesParameter.Direction = ParameterDirection.Input;
                    prClassExpensesParameter.DbType = DbType.Int32;
                    prClassExpensesParameter.Precision = 10;
                    prClassExpensesParameter.Scale = 0;
                    if (prClassExpenses.HasValue)
                    {
                        prClassExpensesParameter.Value = prClassExpenses.Value;
                    }
                    else
                    {
                        prClassExpensesParameter.Size = -1;
                        prClassExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassExpensesParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Obtener gastos resumidos por categoria 
        /// </summary>
        public async Task PrCxpGetReportExpensesSummaryAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prTipoExpense, int? prCategoryExpenses, int? prClassExpenses)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prTipoExpenseParameter = cmd.CreateParameter();
                    prTipoExpenseParameter.ParameterName = "prTipoExpense";
                    prTipoExpenseParameter.Direction = ParameterDirection.Input;
                    prTipoExpenseParameter.DbType = DbType.Int32;
                    prTipoExpenseParameter.Precision = 10;
                    prTipoExpenseParameter.Scale = 0;
                    if (prTipoExpense.HasValue)
                    {
                        prTipoExpenseParameter.Value = prTipoExpense.Value;
                    }
                    else
                    {
                        prTipoExpenseParameter.Size = -1;
                        prTipoExpenseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoExpenseParameter);

                    DbParameter prCategoryExpensesParameter = cmd.CreateParameter();
                    prCategoryExpensesParameter.ParameterName = "prCategoryExpenses";
                    prCategoryExpensesParameter.Direction = ParameterDirection.Input;
                    prCategoryExpensesParameter.DbType = DbType.Int32;
                    prCategoryExpensesParameter.Precision = 10;
                    prCategoryExpensesParameter.Scale = 0;
                    if (prCategoryExpenses.HasValue)
                    {
                        prCategoryExpensesParameter.Value = prCategoryExpenses.Value;
                    }
                    else
                    {
                        prCategoryExpensesParameter.Size = -1;
                        prCategoryExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryExpensesParameter);

                    DbParameter prClassExpensesParameter = cmd.CreateParameter();
                    prClassExpensesParameter.ParameterName = "prClassExpenses";
                    prClassExpensesParameter.Direction = ParameterDirection.Input;
                    prClassExpensesParameter.DbType = DbType.Int32;
                    prClassExpensesParameter.Precision = 10;
                    prClassExpensesParameter.Scale = 0;
                    if (prClassExpenses.HasValue)
                    {
                        prClassExpensesParameter.Value = prClassExpenses.Value;
                    }
                    else
                    {
                        prClassExpensesParameter.Size = -1;
                        prClassExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassExpensesParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Obtener gastos pivot por fecha
        /// </summary>
        public List<PrCxpGetReportExpensesSummaryPivotResult> PrCxpGetReportExpensesSummaryPivot (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrCxpGetReportExpensesSummaryPivotResult> result = new List<PrCxpGetReportExpensesSummaryPivotResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_summary_pivot";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxpGetReportExpensesSummaryPivotResult row = new PrCxpGetReportExpensesSummaryPivotResult();
                            if (fieldNames.Contains("transactionID") && !reader.IsDBNull(reader.GetOrdinal(@"transactionID")))
                                row.TransactionID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionID")), typeof(int));

                            if (fieldNames.Contains("transactionMasterID") && !reader.IsDBNull(reader.GetOrdinal(@"transactionMasterID")))
                                row.TransactionMasterID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionMasterID")), typeof(int));

                            if (fieldNames.Contains("companyID") && !reader.IsDBNull(reader.GetOrdinal(@"companyID")))
                                row.CompanyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"companyID")), typeof(int));

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("currencyID2") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID2")))
                                row.CurrencyID2 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID2")), typeof(int));
                            else
                                row.CurrencyID2 = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("areaID") && !reader.IsDBNull(reader.GetOrdinal(@"areaID")))
                                row.AreaID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"areaID")), typeof(int));
                            else
                                row.AreaID = null;

                            if (fieldNames.Contains("priorityID") && !reader.IsDBNull(reader.GetOrdinal(@"priorityID")))
                                row.PriorityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"priorityID")), typeof(int));
                            else
                                row.PriorityID = null;

                            if (fieldNames.Contains("Tipo") && !reader.IsDBNull(reader.GetOrdinal(@"Tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tipo")), typeof(string));
                            else
                                row.Tipo = null;

                            if (fieldNames.Contains("Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                row.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            else
                                row.Categoria = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Obtener gastos pivot por fecha
        /// </summary>
        public async Task<List<PrCxpGetReportExpensesSummaryPivotResult>> PrCxpGetReportExpensesSummaryPivotAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrCxpGetReportExpensesSummaryPivotResult> result = new List<PrCxpGetReportExpensesSummaryPivotResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_summary_pivot";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxpGetReportExpensesSummaryPivotResult row = new PrCxpGetReportExpensesSummaryPivotResult();
                            if (fieldNames.Contains("transactionID") && !reader.IsDBNull(reader.GetOrdinal(@"transactionID")))
                                row.TransactionID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionID")), typeof(int));

                            if (fieldNames.Contains("transactionMasterID") && !reader.IsDBNull(reader.GetOrdinal(@"transactionMasterID")))
                                row.TransactionMasterID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionMasterID")), typeof(int));

                            if (fieldNames.Contains("companyID") && !reader.IsDBNull(reader.GetOrdinal(@"companyID")))
                                row.CompanyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"companyID")), typeof(int));

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("currencyID2") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID2")))
                                row.CurrencyID2 = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID2")), typeof(int));
                            else
                                row.CurrencyID2 = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("areaID") && !reader.IsDBNull(reader.GetOrdinal(@"areaID")))
                                row.AreaID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"areaID")), typeof(int));
                            else
                                row.AreaID = null;

                            if (fieldNames.Contains("priorityID") && !reader.IsDBNull(reader.GetOrdinal(@"priorityID")))
                                row.PriorityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"priorityID")), typeof(int));
                            else
                                row.PriorityID = null;

                            if (fieldNames.Contains("Tipo") && !reader.IsDBNull(reader.GetOrdinal(@"Tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tipo")), typeof(string));
                            else
                                row.Tipo = null;

                            if (fieldNames.Contains("Categoria") && !reader.IsDBNull(reader.GetOrdinal(@"Categoria")))
                                row.Categoria = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Categoria")), typeof(string));
                            else
                                row.Categoria = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de Compra
        /// </summary>
        public List<PrCxpGetReportPurchaseDetailResult> PrCxpGetReportPurchaseDetail (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse, int? prEntityIDProvider, int? prItmeID)
        {

            List<PrCxpGetReportPurchaseDetailResult> result = new List<PrCxpGetReportPurchaseDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_purchase_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);

                    DbParameter prEntityIDProviderParameter = cmd.CreateParameter();
                    prEntityIDProviderParameter.ParameterName = "prEntityIDProvider";
                    prEntityIDProviderParameter.Direction = ParameterDirection.Input;
                    prEntityIDProviderParameter.DbType = DbType.Int32;
                    prEntityIDProviderParameter.Precision = 10;
                    prEntityIDProviderParameter.Scale = 0;
                    if (prEntityIDProvider.HasValue)
                    {
                        prEntityIDProviderParameter.Value = prEntityIDProvider.Value;
                    }
                    else
                    {
                        prEntityIDProviderParameter.Size = -1;
                        prEntityIDProviderParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEntityIDProviderParameter);

                    DbParameter prItmeIDParameter = cmd.CreateParameter();
                    prItmeIDParameter.ParameterName = "prItmeID";
                    prItmeIDParameter.Direction = ParameterDirection.Input;
                    prItmeIDParameter.DbType = DbType.Int32;
                    prItmeIDParameter.Precision = 10;
                    prItmeIDParameter.Scale = 0;
                    if (prItmeID.HasValue)
                    {
                        prItmeIDParameter.Value = prItmeID.Value;
                    }
                    else
                    {
                        prItmeIDParameter.Size = -1;
                        prItmeIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItmeIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxpGetReportPurchaseDetailResult row = new PrCxpGetReportPurchaseDetailResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("providerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"providerNumber")))
                                row.ProviderNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"providerNumber")), typeof(string));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("Agent") && !reader.IsDBNull(reader.GetOrdinal(@"Agent")))
                                row.Agent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Agent")), typeof(string));

                            if (fieldNames.Contains("Commentary") && !reader.IsDBNull(reader.GetOrdinal(@"Commentary")))
                                row.Commentary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Commentary")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("expirationDate") && !reader.IsDBNull(reader.GetOrdinal(@"expirationDate")))
                                row.ExpirationDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"expirationDate")), typeof(System.DateTime));
                            else
                                row.ExpirationDate = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de Compra
        /// </summary>
        public async Task<List<PrCxpGetReportPurchaseDetailResult>> PrCxpGetReportPurchaseDetailAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse, int? prEntityIDProvider, int? prItmeID)
        {

            List<PrCxpGetReportPurchaseDetailResult> result = new List<PrCxpGetReportPurchaseDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_purchase_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);

                    DbParameter prEntityIDProviderParameter = cmd.CreateParameter();
                    prEntityIDProviderParameter.ParameterName = "prEntityIDProvider";
                    prEntityIDProviderParameter.Direction = ParameterDirection.Input;
                    prEntityIDProviderParameter.DbType = DbType.Int32;
                    prEntityIDProviderParameter.Precision = 10;
                    prEntityIDProviderParameter.Scale = 0;
                    if (prEntityIDProvider.HasValue)
                    {
                        prEntityIDProviderParameter.Value = prEntityIDProvider.Value;
                    }
                    else
                    {
                        prEntityIDProviderParameter.Size = -1;
                        prEntityIDProviderParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEntityIDProviderParameter);

                    DbParameter prItmeIDParameter = cmd.CreateParameter();
                    prItmeIDParameter.ParameterName = "prItmeID";
                    prItmeIDParameter.Direction = ParameterDirection.Input;
                    prItmeIDParameter.DbType = DbType.Int32;
                    prItmeIDParameter.Precision = 10;
                    prItmeIDParameter.Scale = 0;
                    if (prItmeID.HasValue)
                    {
                        prItmeIDParameter.Value = prItmeID.Value;
                    }
                    else
                    {
                        prItmeIDParameter.Size = -1;
                        prItmeIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItmeIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxpGetReportPurchaseDetailResult row = new PrCxpGetReportPurchaseDetailResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("providerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"providerNumber")))
                                row.ProviderNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"providerNumber")), typeof(string));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("Agent") && !reader.IsDBNull(reader.GetOrdinal(@"Agent")))
                                row.Agent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Agent")), typeof(string));

                            if (fieldNames.Contains("Commentary") && !reader.IsDBNull(reader.GetOrdinal(@"Commentary")))
                                row.Commentary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Commentary")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("expirationDate") && !reader.IsDBNull(reader.GetOrdinal(@"expirationDate")))
                                row.ExpirationDate = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"expirationDate")), typeof(System.DateTime));
                            else
                                row.ExpirationDate = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento que se utilizara para calcular el costo de los Item cuando se registra una nueva entrada de mercaderia
        /// </summary>
        public void PrInventoryCalculateKardexNewInput (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_calculate_kardex_new_input";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento que se utilizara para calcular el costo de los Item cuando se registra una nueva entrada de mercaderia
        /// </summary>
        public async Task PrInventoryCalculateKardexNewInputAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_calculate_kardex_new_input";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento que se utiliza para restar el inventario al momento de registrar una salida de inventario
        /// </summary>
        public void PrInventoryCalculateKardexNewOutput (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_calculate_kardex_new_output";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento que se utiliza para restar el inventario al momento de registrar una salida de inventario
        /// </summary>
        public async Task PrInventoryCalculateKardexNewOutputAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_calculate_kardex_new_output";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crer entradas de meraderia
        /// </summary>
        public void PrInventoryCreateTransactionInputByAjuste (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID, out int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_input_by_ajuste";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crer entradas de meraderia
        /// </summary>
        public async Task<Tuple<int?>> PrInventoryCreateTransactionInputByAjusteAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID)
        {

            int? prResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_input_by_ajuste";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prResult);
        }

        /// <summary>
        /// Procedimiento para crer entradas de meraderia por produccion
        /// </summary>
        public void PrInventoryCreateTransactionOtherinputByProduction (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID, int? prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_otherinput_by_production";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crer entradas de meraderia por produccion
        /// </summary>
        public async Task PrInventoryCreateTransactionOtherinputByProductionAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID, int? prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_otherinput_by_production";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crer salida de meraderia
        /// </summary>
        public void PrInventoryCreateTransactionOtheroutputByProduction (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID, int? prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_otheroutput_by_production";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crer salida de meraderia
        /// </summary>
        public async Task PrInventoryCreateTransactionOtheroutputByProductionAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID, int? prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_otheroutput_by_production";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crear facturacion de meraderia
        /// </summary>
        public void PrInventoryCreateTransactionOutputByAjuste (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID, out int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_output_by_ajuste";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crear facturacion de meraderia
        /// </summary>
        public async Task<Tuple<int?>> PrInventoryCreateTransactionOutputByAjusteAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID)
        {

            int? prResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_output_by_ajuste";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prResult);
        }

        /// <summary>
        /// Procedimiento para crer una salida de inventario automatica, para los productos tipos formulas
        /// </summary>
        public void PrInventoryCreateTransactionOutputByFormulated (int? prCompanyID, int? prBranchID, int? prLoginID, int? prPeriodID, int? prCycleID, out int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_output_by_formulated";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crer una salida de inventario automatica, para los productos tipos formulas
        /// </summary>
        public async Task<Tuple<int?>> PrInventoryCreateTransactionOutputByFormulatedAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prPeriodID, int? prCycleID)
        {

            int? prResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_output_by_formulated";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prResult);
        }

        /// <summary>
        /// Lista de Productos por Vencer
        /// </summary>
        public List<PrInventoryGetEportListItemExpiredResult> PrInventoryGetEportListItemExpired (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrInventoryGetEportListItemExpiredResult> result = new List<PrInventoryGetEportListItemExpiredResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_eport_list_item_expired";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetEportListItemExpiredResult row = new PrInventoryGetEportListItemExpiredResult();
                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));
                            else
                                row.ItemName = null;

                            if (fieldNames.Contains("unitMeasure") && !reader.IsDBNull(reader.GetOrdinal(@"unitMeasure")))
                                row.UnitMeasure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitMeasure")), typeof(string));
                            else
                                row.UnitMeasure = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));

                            if (fieldNames.Contains("pricePublico") && !reader.IsDBNull(reader.GetOrdinal(@"pricePublico")))
                                row.PricePublico = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pricePublico")), typeof(decimal));
                            else
                                row.PricePublico = null;

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            if (fieldNames.Contains("dateExpired") && !reader.IsDBNull(reader.GetOrdinal(@"dateExpired")))
                                row.DateExpired = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateExpired")), typeof(System.DateTime));

                            if (fieldNames.Contains("quantityExpired") && !reader.IsDBNull(reader.GetOrdinal(@"quantityExpired")))
                                row.QuantityExpired = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityExpired")), typeof(decimal));
                            else
                                row.QuantityExpired = null;

                            if (fieldNames.Contains("lote") && !reader.IsDBNull(reader.GetOrdinal(@"lote")))
                                row.Lote = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lote")), typeof(string));
                            else
                                row.Lote = null;

                            if (fieldNames.Contains("proveedorName") && !reader.IsDBNull(reader.GetOrdinal(@"proveedorName")))
                                row.ProveedorName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"proveedorName")), typeof(string));
                            else
                                row.ProveedorName = null;

                            if (fieldNames.Contains("dateExpiredInDay") && !reader.IsDBNull(reader.GetOrdinal(@"dateExpiredInDay")))
                                row.DateExpiredInDay = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateExpiredInDay")), typeof(int));
                            else
                                row.DateExpiredInDay = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Lista de Productos por Vencer
        /// </summary>
        public async Task<List<PrInventoryGetEportListItemExpiredResult>> PrInventoryGetEportListItemExpiredAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrInventoryGetEportListItemExpiredResult> result = new List<PrInventoryGetEportListItemExpiredResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_eport_list_item_expired";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetEportListItemExpiredResult row = new PrInventoryGetEportListItemExpiredResult();
                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));
                            else
                                row.ItemName = null;

                            if (fieldNames.Contains("unitMeasure") && !reader.IsDBNull(reader.GetOrdinal(@"unitMeasure")))
                                row.UnitMeasure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitMeasure")), typeof(string));
                            else
                                row.UnitMeasure = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));

                            if (fieldNames.Contains("pricePublico") && !reader.IsDBNull(reader.GetOrdinal(@"pricePublico")))
                                row.PricePublico = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pricePublico")), typeof(decimal));
                            else
                                row.PricePublico = null;

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            if (fieldNames.Contains("dateExpired") && !reader.IsDBNull(reader.GetOrdinal(@"dateExpired")))
                                row.DateExpired = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateExpired")), typeof(System.DateTime));

                            if (fieldNames.Contains("quantityExpired") && !reader.IsDBNull(reader.GetOrdinal(@"quantityExpired")))
                                row.QuantityExpired = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityExpired")), typeof(decimal));
                            else
                                row.QuantityExpired = null;

                            if (fieldNames.Contains("lote") && !reader.IsDBNull(reader.GetOrdinal(@"lote")))
                                row.Lote = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"lote")), typeof(string));
                            else
                                row.Lote = null;

                            if (fieldNames.Contains("proveedorName") && !reader.IsDBNull(reader.GetOrdinal(@"proveedorName")))
                                row.ProveedorName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"proveedorName")), typeof(string));
                            else
                                row.ProveedorName = null;

                            if (fieldNames.Contains("dateExpiredInDay") && !reader.IsDBNull(reader.GetOrdinal(@"dateExpiredInDay")))
                                row.DateExpiredInDay = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateExpiredInDay")), typeof(int));
                            else
                                row.DateExpiredInDay = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener la lista de todos los movimientos del producto de todas las bodegas
        /// </summary>
        public List<PrInventoryGetReportAuxiliarMovByAllwarehouseResult> PrInventoryGetReportAuxiliarMovByAllwarehouse (int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn, int? prItemID)
        {

            List<PrInventoryGetReportAuxiliarMovByAllwarehouseResult> result = new List<PrInventoryGetReportAuxiliarMovByAllwarehouseResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_auxiliar_mov_by_allwarehouse";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportAuxiliarMovByAllwarehouseResult row = new PrInventoryGetReportAuxiliarMovByAllwarehouseResult();
                            if (fieldNames.Contains("movementOn") && !reader.IsDBNull(reader.GetOrdinal(@"movementOn")))
                                row.MovementOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"movementOn")), typeof(System.DateTime));

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            else
                                row.TransactionNumber = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("unitMeasureName") && !reader.IsDBNull(reader.GetOrdinal(@"unitMeasureName")))
                                row.UnitMeasureName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitMeasureName")), typeof(string));
                            else
                                row.UnitMeasureName = null;

                            if (fieldNames.Contains("oldQuantity") && !reader.IsDBNull(reader.GetOrdinal(@"oldQuantity")))
                                row.OldQuantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"oldQuantity")), typeof(decimal));

                            if (fieldNames.Contains("oldCost") && !reader.IsDBNull(reader.GetOrdinal(@"oldCost")))
                                row.OldCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"oldCost")), typeof(decimal));

                            if (fieldNames.Contains("transactionQuantity") && !reader.IsDBNull(reader.GetOrdinal(@"transactionQuantity")))
                                row.TransactionQuantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionQuantity")), typeof(decimal));

                            if (fieldNames.Contains("transactionCost") && !reader.IsDBNull(reader.GetOrdinal(@"transactionCost")))
                                row.TransactionCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionCost")), typeof(decimal));

                            if (fieldNames.Contains("newQuantity") && !reader.IsDBNull(reader.GetOrdinal(@"newQuantity")))
                                row.NewQuantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"newQuantity")), typeof(decimal));

                            if (fieldNames.Contains("newCost") && !reader.IsDBNull(reader.GetOrdinal(@"newCost")))
                                row.NewCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"newCost")), typeof(decimal));

                            if (fieldNames.Contains("transactionType") && !reader.IsDBNull(reader.GetOrdinal(@"transactionType")))
                                row.TransactionType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionType")), typeof(string));

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            if (fieldNames.Contains("warehouseNumber") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseNumber")))
                                row.WarehouseNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseNumber")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener la lista de todos los movimientos del producto de todas las bodegas
        /// </summary>
        public async Task<List<PrInventoryGetReportAuxiliarMovByAllwarehouseResult>> PrInventoryGetReportAuxiliarMovByAllwarehouseAsync (int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn, int? prItemID)
        {

            List<PrInventoryGetReportAuxiliarMovByAllwarehouseResult> result = new List<PrInventoryGetReportAuxiliarMovByAllwarehouseResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_auxiliar_mov_by_allwarehouse";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportAuxiliarMovByAllwarehouseResult row = new PrInventoryGetReportAuxiliarMovByAllwarehouseResult();
                            if (fieldNames.Contains("movementOn") && !reader.IsDBNull(reader.GetOrdinal(@"movementOn")))
                                row.MovementOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"movementOn")), typeof(System.DateTime));

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            else
                                row.TransactionNumber = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("unitMeasureName") && !reader.IsDBNull(reader.GetOrdinal(@"unitMeasureName")))
                                row.UnitMeasureName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitMeasureName")), typeof(string));
                            else
                                row.UnitMeasureName = null;

                            if (fieldNames.Contains("oldQuantity") && !reader.IsDBNull(reader.GetOrdinal(@"oldQuantity")))
                                row.OldQuantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"oldQuantity")), typeof(decimal));

                            if (fieldNames.Contains("oldCost") && !reader.IsDBNull(reader.GetOrdinal(@"oldCost")))
                                row.OldCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"oldCost")), typeof(decimal));

                            if (fieldNames.Contains("transactionQuantity") && !reader.IsDBNull(reader.GetOrdinal(@"transactionQuantity")))
                                row.TransactionQuantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionQuantity")), typeof(decimal));

                            if (fieldNames.Contains("transactionCost") && !reader.IsDBNull(reader.GetOrdinal(@"transactionCost")))
                                row.TransactionCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionCost")), typeof(decimal));

                            if (fieldNames.Contains("newQuantity") && !reader.IsDBNull(reader.GetOrdinal(@"newQuantity")))
                                row.NewQuantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"newQuantity")), typeof(decimal));

                            if (fieldNames.Contains("newCost") && !reader.IsDBNull(reader.GetOrdinal(@"newCost")))
                                row.NewCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"newCost")), typeof(decimal));

                            if (fieldNames.Contains("transactionType") && !reader.IsDBNull(reader.GetOrdinal(@"transactionType")))
                                row.TransactionType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionType")), typeof(string));

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            if (fieldNames.Contains("warehouseNumber") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseNumber")))
                                row.WarehouseNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseNumber")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener los movimientos de productos de una bodega
        /// </summary>
        public List<PrInventoryGetReportAuxiliarMovByWarehouseResult> PrInventoryGetReportAuxiliarMovByWarehouse (int? prCompanyID, int? prWarehouseID, DateTime? prStartOn, DateTime? prEndOn, int? prItemID)
        {

            List<PrInventoryGetReportAuxiliarMovByWarehouseResult> result = new List<PrInventoryGetReportAuxiliarMovByWarehouseResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_auxiliar_mov_by_warehouse";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportAuxiliarMovByWarehouseResult row = new PrInventoryGetReportAuxiliarMovByWarehouseResult();
                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("itemUnitmeasure") && !reader.IsDBNull(reader.GetOrdinal(@"itemUnitmeasure")))
                                row.ItemUnitmeasure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemUnitmeasure")), typeof(string));
                            else
                                row.ItemUnitmeasure = null;

                            if (fieldNames.Contains("itemType") && !reader.IsDBNull(reader.GetOrdinal(@"itemType")))
                                row.ItemType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemType")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("balance") && !reader.IsDBNull(reader.GetOrdinal(@"balance")))
                                row.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balance")), typeof(decimal));
                            else
                                row.Balance = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener los movimientos de productos de una bodega
        /// </summary>
        public async Task<List<PrInventoryGetReportAuxiliarMovByWarehouseResult>> PrInventoryGetReportAuxiliarMovByWarehouseAsync (int? prCompanyID, int? prWarehouseID, DateTime? prStartOn, DateTime? prEndOn, int? prItemID)
        {

            List<PrInventoryGetReportAuxiliarMovByWarehouseResult> result = new List<PrInventoryGetReportAuxiliarMovByWarehouseResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_auxiliar_mov_by_warehouse";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportAuxiliarMovByWarehouseResult row = new PrInventoryGetReportAuxiliarMovByWarehouseResult();
                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("itemUnitmeasure") && !reader.IsDBNull(reader.GetOrdinal(@"itemUnitmeasure")))
                                row.ItemUnitmeasure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemUnitmeasure")), typeof(string));
                            else
                                row.ItemUnitmeasure = null;

                            if (fieldNames.Contains("itemType") && !reader.IsDBNull(reader.GetOrdinal(@"itemType")))
                                row.ItemType = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemType")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("balance") && !reader.IsDBNull(reader.GetOrdinal(@"balance")))
                                row.Balance = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"balance")), typeof(decimal));
                            else
                                row.Balance = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Lista de Productos
        /// </summary>
        public List<PrInventoryGetReportListItemResult> PrInventoryGetReportListItem (int? prUserID, string prTokenID, int? prCompanyID, int? prWarehouseID, int? prCategoryID)
        {

            List<PrInventoryGetReportListItemResult> result = new List<PrInventoryGetReportListItemResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prCategoryIDParameter = cmd.CreateParameter();
                    prCategoryIDParameter.ParameterName = "prCategoryID";
                    prCategoryIDParameter.Direction = ParameterDirection.Input;
                    prCategoryIDParameter.DbType = DbType.Int32;
                    prCategoryIDParameter.Precision = 10;
                    prCategoryIDParameter.Scale = 0;
                    if (prCategoryID.HasValue)
                    {
                        prCategoryIDParameter.Value = prCategoryID.Value;
                    }
                    else
                    {
                        prCategoryIDParameter.Size = -1;
                        prCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportListItemResult row = new PrInventoryGetReportListItemResult();
                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("barCode") && !reader.IsDBNull(reader.GetOrdinal(@"barCode")))
                                row.BarCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"barCode")), typeof(string));
                            else
                                row.BarCode = null;

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));
                            else
                                row.ItemName = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("unitMeasure") && !reader.IsDBNull(reader.GetOrdinal(@"unitMeasure")))
                                row.UnitMeasure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitMeasure")), typeof(string));
                            else
                                row.UnitMeasure = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal(@"price")))
                                row.Price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));
                            else
                                row.Price = null;

                            if (fieldNames.Contains("price2") && !reader.IsDBNull(reader.GetOrdinal(@"price2")))
                                row.Price2 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price2")), typeof(decimal));
                            else
                                row.Price2 = null;

                            if (fieldNames.Contains("price3") && !reader.IsDBNull(reader.GetOrdinal(@"price3")))
                                row.Price3 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price3")), typeof(decimal));
                            else
                                row.Price3 = null;

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            if (fieldNames.Contains("Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));

                            if (fieldNames.Contains("unidadMedidaName") && !reader.IsDBNull(reader.GetOrdinal(@"unidadMedidaName")))
                                row.UnidadMedidaName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unidadMedidaName")), typeof(string));
                            else
                                row.UnidadMedidaName = null;

                            if (fieldNames.Contains("familyName") && !reader.IsDBNull(reader.GetOrdinal(@"familyName")))
                                row.FamilyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"familyName")), typeof(string));
                            else
                                row.FamilyName = null;

                            if (fieldNames.Contains("isActive") && !reader.IsDBNull(reader.GetOrdinal(@"isActive")))
                                row.IsActive = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isActive")), typeof(bool));
                            else
                                row.IsActive = null;

                            if (fieldNames.Contains("vendors") && !reader.IsDBNull(reader.GetOrdinal(@"vendors")))
                                row.Vendors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"vendors")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Lista de Productos
        /// </summary>
        public async Task<List<PrInventoryGetReportListItemResult>> PrInventoryGetReportListItemAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prWarehouseID, int? prCategoryID)
        {

            List<PrInventoryGetReportListItemResult> result = new List<PrInventoryGetReportListItemResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prCategoryIDParameter = cmd.CreateParameter();
                    prCategoryIDParameter.ParameterName = "prCategoryID";
                    prCategoryIDParameter.Direction = ParameterDirection.Input;
                    prCategoryIDParameter.DbType = DbType.Int32;
                    prCategoryIDParameter.Precision = 10;
                    prCategoryIDParameter.Scale = 0;
                    if (prCategoryID.HasValue)
                    {
                        prCategoryIDParameter.Value = prCategoryID.Value;
                    }
                    else
                    {
                        prCategoryIDParameter.Size = -1;
                        prCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportListItemResult row = new PrInventoryGetReportListItemResult();
                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("barCode") && !reader.IsDBNull(reader.GetOrdinal(@"barCode")))
                                row.BarCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"barCode")), typeof(string));
                            else
                                row.BarCode = null;

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));
                            else
                                row.ItemName = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("unitMeasure") && !reader.IsDBNull(reader.GetOrdinal(@"unitMeasure")))
                                row.UnitMeasure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitMeasure")), typeof(string));
                            else
                                row.UnitMeasure = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal(@"price")))
                                row.Price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));
                            else
                                row.Price = null;

                            if (fieldNames.Contains("price2") && !reader.IsDBNull(reader.GetOrdinal(@"price2")))
                                row.Price2 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price2")), typeof(decimal));
                            else
                                row.Price2 = null;

                            if (fieldNames.Contains("price3") && !reader.IsDBNull(reader.GetOrdinal(@"price3")))
                                row.Price3 = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price3")), typeof(decimal));
                            else
                                row.Price3 = null;

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            if (fieldNames.Contains("Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                row.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));

                            if (fieldNames.Contains("unidadMedidaName") && !reader.IsDBNull(reader.GetOrdinal(@"unidadMedidaName")))
                                row.UnidadMedidaName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unidadMedidaName")), typeof(string));
                            else
                                row.UnidadMedidaName = null;

                            if (fieldNames.Contains("familyName") && !reader.IsDBNull(reader.GetOrdinal(@"familyName")))
                                row.FamilyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"familyName")), typeof(string));
                            else
                                row.FamilyName = null;

                            if (fieldNames.Contains("isActive") && !reader.IsDBNull(reader.GetOrdinal(@"isActive")))
                                row.IsActive = (bool)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"isActive")), typeof(bool));
                            else
                                row.IsActive = null;

                            if (fieldNames.Contains("vendors") && !reader.IsDBNull(reader.GetOrdinal(@"vendors")))
                                row.Vendors = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"vendors")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void PrInventoryGetReportListItemByWarehouse (int? prUserID, string prTokenID, int? prCompanyID, string prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item_by_warehouse";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.String;
                    prWarehouseIDParameter.Size = 150;
                    if (prWarehouseID != null)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID;
                    }
                    else
                    {
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrInventoryGetReportListItemByWarehouseAsync (int? prUserID, string prTokenID, int? prCompanyID, string prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item_by_warehouse";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.String;
                    prWarehouseIDParameter.Size = 150;
                    if (prWarehouseID != null)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID;
                    }
                    else
                    {
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Lista de Productos
        /// </summary>
        public List<PrInventoryGetReportListItemOutExistResult> PrInventoryGetReportListItemOutExist (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrInventoryGetReportListItemOutExistResult> result = new List<PrInventoryGetReportListItemOutExistResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item_out_exists";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportListItemOutExistResult row = new PrInventoryGetReportListItemOutExistResult();
                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));
                            else
                                row.ItemName = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("unitMeasure") && !reader.IsDBNull(reader.GetOrdinal(@"unitMeasure")))
                                row.UnitMeasure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitMeasure")), typeof(string));
                            else
                                row.UnitMeasure = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal(@"price")))
                                row.Price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));
                            else
                                row.Price = null;

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Lista de Productos
        /// </summary>
        public async Task<List<PrInventoryGetReportListItemOutExistResult>> PrInventoryGetReportListItemOutExistAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrInventoryGetReportListItemOutExistResult> result = new List<PrInventoryGetReportListItemOutExistResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item_out_exists";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportListItemOutExistResult row = new PrInventoryGetReportListItemOutExistResult();
                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));
                            else
                                row.ItemName = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("unitMeasure") && !reader.IsDBNull(reader.GetOrdinal(@"unitMeasure")))
                                row.UnitMeasure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitMeasure")), typeof(string));
                            else
                                row.UnitMeasure = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal(@"price")))
                                row.Price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));
                            else
                                row.Price = null;

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Lista de Productos
        /// </summary>
        public List<PrInventoryGetReportListItemOutExistResult> PrInventoryGetReportListItemWidthExist (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrInventoryGetReportListItemOutExistResult> result = new List<PrInventoryGetReportListItemOutExistResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item_width_exists";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportListItemOutExistResult row = new PrInventoryGetReportListItemOutExistResult();
                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));
                            else
                                row.ItemName = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("unitMeasure") && !reader.IsDBNull(reader.GetOrdinal(@"unitMeasure")))
                                row.UnitMeasure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitMeasure")), typeof(string));
                            else
                                row.UnitMeasure = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal(@"price")))
                                row.Price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));
                            else
                                row.Price = null;

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Lista de Productos
        /// </summary>
        public async Task<List<PrInventoryGetReportListItemOutExistResult>> PrInventoryGetReportListItemWidthExistAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            List<PrInventoryGetReportListItemOutExistResult> result = new List<PrInventoryGetReportListItemOutExistResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item_width_exists";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportListItemOutExistResult row = new PrInventoryGetReportListItemOutExistResult();
                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));
                            else
                                row.ItemName = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("unitMeasure") && !reader.IsDBNull(reader.GetOrdinal(@"unitMeasure")))
                                row.UnitMeasure = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitMeasure")), typeof(string));
                            else
                                row.UnitMeasure = null;

                            if (fieldNames.Contains("categoryName") && !reader.IsDBNull(reader.GetOrdinal(@"categoryName")))
                                row.CategoryName1 = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"categoryName")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal(@"price")))
                                row.Price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));
                            else
                                row.Price = null;

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener el karde de mercaderia
        /// </summary>
        public List<PrInventoryGetReportMasterKardexResult> PrInventoryGetReportMasterKardex (int? prUserID, string prTokenID, int? prCompanyID, int? prWarehouseID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrInventoryGetReportMasterKardexResult> result = new List<PrInventoryGetReportMasterKardexResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_master_kardex";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportMasterKardexResult row = new PrInventoryGetReportMasterKardexResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("tokenID") && !reader.IsDBNull(reader.GetOrdinal(@"tokenID")))
                                row.TokenID = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tokenID")), typeof(string));
                            else
                                row.TokenID = null;

                            if (fieldNames.Contains("companyID") && !reader.IsDBNull(reader.GetOrdinal(@"companyID")))
                                row.CompanyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"companyID")), typeof(int));

                            if (fieldNames.Contains("itemID") && !reader.IsDBNull(reader.GetOrdinal(@"itemID")))
                                row.ItemID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemID")), typeof(int));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("minKardexID") && !reader.IsDBNull(reader.GetOrdinal(@"minKardexID")))
                                row.MinKardexID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"minKardexID")), typeof(int));

                            if (fieldNames.Contains("quantityInicial") && !reader.IsDBNull(reader.GetOrdinal(@"quantityInicial")))
                                row.QuantityInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityInicial")), typeof(decimal));

                            if (fieldNames.Contains("costInicial") && !reader.IsDBNull(reader.GetOrdinal(@"costInicial")))
                                row.CostInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"costInicial")), typeof(decimal));

                            if (fieldNames.Contains("quantityInput") && !reader.IsDBNull(reader.GetOrdinal(@"quantityInput")))
                                row.QuantityInput = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityInput")), typeof(decimal));

                            if (fieldNames.Contains("costInput") && !reader.IsDBNull(reader.GetOrdinal(@"costInput")))
                                row.CostInput = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"costInput")), typeof(decimal));

                            if (fieldNames.Contains("quantityOutput") && !reader.IsDBNull(reader.GetOrdinal(@"quantityOutput")))
                                row.QuantityOutput = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityOutput")), typeof(decimal));

                            if (fieldNames.Contains("costOutput") && !reader.IsDBNull(reader.GetOrdinal(@"costOutput")))
                                row.CostOutput = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"costOutput")), typeof(decimal));

                            if (fieldNames.Contains("masterKardexTempID") && !reader.IsDBNull(reader.GetOrdinal(@"masterKardexTempID")))
                                row.MasterKardexTempID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"masterKardexTempID")), typeof(int));

                            if (fieldNames.Contains("itemCategoryName") && !reader.IsDBNull(reader.GetOrdinal(@"itemCategoryName")))
                                row.ItemCategoryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemCategoryName")), typeof(string));
                            else
                                row.ItemCategoryName = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener el karde de mercaderia
        /// </summary>
        public async Task<List<PrInventoryGetReportMasterKardexResult>> PrInventoryGetReportMasterKardexAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prWarehouseID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrInventoryGetReportMasterKardexResult> result = new List<PrInventoryGetReportMasterKardexResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_master_kardex";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportMasterKardexResult row = new PrInventoryGetReportMasterKardexResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("tokenID") && !reader.IsDBNull(reader.GetOrdinal(@"tokenID")))
                                row.TokenID = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tokenID")), typeof(string));
                            else
                                row.TokenID = null;

                            if (fieldNames.Contains("companyID") && !reader.IsDBNull(reader.GetOrdinal(@"companyID")))
                                row.CompanyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"companyID")), typeof(int));

                            if (fieldNames.Contains("itemID") && !reader.IsDBNull(reader.GetOrdinal(@"itemID")))
                                row.ItemID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemID")), typeof(int));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("minKardexID") && !reader.IsDBNull(reader.GetOrdinal(@"minKardexID")))
                                row.MinKardexID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"minKardexID")), typeof(int));

                            if (fieldNames.Contains("quantityInicial") && !reader.IsDBNull(reader.GetOrdinal(@"quantityInicial")))
                                row.QuantityInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityInicial")), typeof(decimal));

                            if (fieldNames.Contains("costInicial") && !reader.IsDBNull(reader.GetOrdinal(@"costInicial")))
                                row.CostInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"costInicial")), typeof(decimal));

                            if (fieldNames.Contains("quantityInput") && !reader.IsDBNull(reader.GetOrdinal(@"quantityInput")))
                                row.QuantityInput = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityInput")), typeof(decimal));

                            if (fieldNames.Contains("costInput") && !reader.IsDBNull(reader.GetOrdinal(@"costInput")))
                                row.CostInput = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"costInput")), typeof(decimal));

                            if (fieldNames.Contains("quantityOutput") && !reader.IsDBNull(reader.GetOrdinal(@"quantityOutput")))
                                row.QuantityOutput = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityOutput")), typeof(decimal));

                            if (fieldNames.Contains("costOutput") && !reader.IsDBNull(reader.GetOrdinal(@"costOutput")))
                                row.CostOutput = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"costOutput")), typeof(decimal));

                            if (fieldNames.Contains("masterKardexTempID") && !reader.IsDBNull(reader.GetOrdinal(@"masterKardexTempID")))
                                row.MasterKardexTempID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"masterKardexTempID")), typeof(int));

                            if (fieldNames.Contains("itemCategoryName") && !reader.IsDBNull(reader.GetOrdinal(@"itemCategoryName")))
                                row.ItemCategoryName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemCategoryName")), typeof(string));
                            else
                                row.ItemCategoryName = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener el karde de mercaderia
        /// </summary>
        public List<PrInventoryGetReportPurchaseResult> PrInventoryGetReportPurchase (int? prUserID, string prTokenID, int? prCompanyID, int? prWarehouseID, DateTime? prStartOn, DateTime? prEndOn, int? prEntityIDProvider)
        {

            List<PrInventoryGetReportPurchaseResult> result = new List<PrInventoryGetReportPurchaseResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_purchase";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prEntityIDProviderParameter = cmd.CreateParameter();
                    prEntityIDProviderParameter.ParameterName = "prEntityIDProvider";
                    prEntityIDProviderParameter.Direction = ParameterDirection.Input;
                    prEntityIDProviderParameter.DbType = DbType.Int32;
                    prEntityIDProviderParameter.Precision = 10;
                    prEntityIDProviderParameter.Scale = 0;
                    if (prEntityIDProvider.HasValue)
                    {
                        prEntityIDProviderParameter.Value = prEntityIDProvider.Value;
                    }
                    else
                    {
                        prEntityIDProviderParameter.Size = -1;
                        prEntityIDProviderParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEntityIDProviderParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportPurchaseResult row = new PrInventoryGetReportPurchaseResult();
                            if (fieldNames.Contains("transactionMasterID") && !reader.IsDBNull(reader.GetOrdinal(@"transactionMasterID")))
                                row.TransactionMasterID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionMasterID")), typeof(int));

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("statusName") && !reader.IsDBNull(reader.GetOrdinal(@"statusName")))
                                row.StatusName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusName")), typeof(string));
                            else
                                row.StatusName = null;

                            if (fieldNames.Contains("providerName") && !reader.IsDBNull(reader.GetOrdinal(@"providerName")))
                                row.ProviderName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"providerName")), typeof(string));
                            else
                                row.ProviderName = null;

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para obtener el karde de mercaderia
        /// </summary>
        public async Task<List<PrInventoryGetReportPurchaseResult>> PrInventoryGetReportPurchaseAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prWarehouseID, DateTime? prStartOn, DateTime? prEndOn, int? prEntityIDProvider)
        {

            List<PrInventoryGetReportPurchaseResult> result = new List<PrInventoryGetReportPurchaseResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_purchase";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prEntityIDProviderParameter = cmd.CreateParameter();
                    prEntityIDProviderParameter.ParameterName = "prEntityIDProvider";
                    prEntityIDProviderParameter.Direction = ParameterDirection.Input;
                    prEntityIDProviderParameter.DbType = DbType.Int32;
                    prEntityIDProviderParameter.Precision = 10;
                    prEntityIDProviderParameter.Scale = 0;
                    if (prEntityIDProvider.HasValue)
                    {
                        prEntityIDProviderParameter.Value = prEntityIDProvider.Value;
                    }
                    else
                    {
                        prEntityIDProviderParameter.Size = -1;
                        prEntityIDProviderParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEntityIDProviderParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryGetReportPurchaseResult row = new PrInventoryGetReportPurchaseResult();
                            if (fieldNames.Contains("transactionMasterID") && !reader.IsDBNull(reader.GetOrdinal(@"transactionMasterID")))
                                row.TransactionMasterID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionMasterID")), typeof(int));

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("statusName") && !reader.IsDBNull(reader.GetOrdinal(@"statusName")))
                                row.StatusName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusName")), typeof(string));
                            else
                                row.StatusName = null;

                            if (fieldNames.Contains("providerName") && !reader.IsDBNull(reader.GetOrdinal(@"providerName")))
                                row.ProviderName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"providerName")), typeof(string));
                            else
                                row.ProviderName = null;

                            if (fieldNames.Contains("warehouseName") && !reader.IsDBNull(reader.GetOrdinal(@"warehouseName")))
                                row.WarehouseName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"warehouseName")), typeof(string));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Recalcular costo de inventario
        /// </summary>
        public List<PrInventoryLastItemMovementResult> PrInventoryLastItemMovement (int? prCompanyID)
        {

            List<PrInventoryLastItemMovementResult> result = new List<PrInventoryLastItemMovementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_last_item_movement";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryLastItemMovementResult row = new PrInventoryLastItemMovementResult();
                            if (fieldNames.Contains("itemID") && !reader.IsDBNull(reader.GetOrdinal(@"itemID")))
                                row.ItemID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemID")), typeof(int));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("barCode") && !reader.IsDBNull(reader.GetOrdinal(@"barCode")))
                                row.BarCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"barCode")), typeof(string));
                            else
                                row.BarCode = null;

                            if (fieldNames.Contains("name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("typePriceID") && !reader.IsDBNull(reader.GetOrdinal(@"typePriceID")))
                                row.TypePriceID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"typePriceID")), typeof(int));

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal(@"price")))
                                row.Price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));

                            if (fieldNames.Contains("percentage") && !reader.IsDBNull(reader.GetOrdinal(@"percentage")))
                                row.Percentage = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"percentage")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Recalcular costo de inventario
        /// </summary>
        public async Task<List<PrInventoryLastItemMovementResult>> PrInventoryLastItemMovementAsync (int? prCompanyID)
        {

            List<PrInventoryLastItemMovementResult> result = new List<PrInventoryLastItemMovementResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_last_item_movement";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrInventoryLastItemMovementResult row = new PrInventoryLastItemMovementResult();
                            if (fieldNames.Contains("itemID") && !reader.IsDBNull(reader.GetOrdinal(@"itemID")))
                                row.ItemID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemID")), typeof(int));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("barCode") && !reader.IsDBNull(reader.GetOrdinal(@"barCode")))
                                row.BarCode = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"barCode")), typeof(string));
                            else
                                row.BarCode = null;

                            if (fieldNames.Contains("name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                row.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));

                            if (fieldNames.Contains("typePriceID") && !reader.IsDBNull(reader.GetOrdinal(@"typePriceID")))
                                row.TypePriceID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"typePriceID")), typeof(int));

                            if (fieldNames.Contains("price") && !reader.IsDBNull(reader.GetOrdinal(@"price")))
                                row.Price = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"price")), typeof(decimal));

                            if (fieldNames.Contains("percentage") && !reader.IsDBNull(reader.GetOrdinal(@"percentage")))
                                row.Percentage = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"percentage")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Recalcular costo de inventario
        /// </summary>
        public void PrInventoryRecalculateCost (int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_recalculate_cost";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Recalcular costo de inventario
        /// </summary>
        public async Task PrInventoryRecalculateCostAsync (int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_recalculate_cost";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public List<PrNotificationBuyResult> PrNotificationBuy (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrNotificationBuyResult> result = new List<PrNotificationBuyResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_notification_buy";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrNotificationBuyResult row = new PrNotificationBuyResult();
                            if (fieldNames.Contains("nameTransaction") && !reader.IsDBNull(reader.GetOrdinal(@"nameTransaction")))
                                row.NameTransaction = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameTransaction")), typeof(string));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("Cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"Cantidad")))
                                row.Cantidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cantidad")), typeof(decimal));
                            else
                                row.Cantidad = null;

                            if (fieldNames.Contains("CostoPromedio") && !reader.IsDBNull(reader.GetOrdinal(@"CostoPromedio")))
                                row.CostoPromedio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CostoPromedio")), typeof(decimal));
                            else
                                row.CostoPromedio = null;

                            if (fieldNames.Contains("Utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"Utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task<List<PrNotificationBuyResult>> PrNotificationBuyAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrNotificationBuyResult> result = new List<PrNotificationBuyResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_notification_buy";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrNotificationBuyResult row = new PrNotificationBuyResult();
                            if (fieldNames.Contains("nameTransaction") && !reader.IsDBNull(reader.GetOrdinal(@"nameTransaction")))
                                row.NameTransaction = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameTransaction")), typeof(string));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("Cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"Cantidad")))
                                row.Cantidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cantidad")), typeof(decimal));
                            else
                                row.Cantidad = null;

                            if (fieldNames.Contains("CostoPromedio") && !reader.IsDBNull(reader.GetOrdinal(@"CostoPromedio")))
                                row.CostoPromedio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"CostoPromedio")), typeof(decimal));
                            else
                                row.CostoPromedio = null;

                            if (fieldNames.Contains("Utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"Utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento para crear la transaccion de planilla
        /// </summary>
        public void PrPlanillaCreateTransaction (int? prCompanyID, int? prCalendarID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_create_transaction";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prCalendarIDParameter = cmd.CreateParameter();
                    prCalendarIDParameter.ParameterName = "prCalendarID";
                    prCalendarIDParameter.Direction = ParameterDirection.Input;
                    prCalendarIDParameter.DbType = DbType.Int32;
                    prCalendarIDParameter.Precision = 10;
                    prCalendarIDParameter.Scale = 0;
                    if (prCalendarID.HasValue)
                    {
                        prCalendarIDParameter.Value = prCalendarID.Value;
                    }
                    else
                    {
                        prCalendarIDParameter.Size = -1;
                        prCalendarIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCalendarIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crear la transaccion de planilla
        /// </summary>
        public async Task PrPlanillaCreateTransactionAsync (int? prCompanyID, int? prCalendarID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_create_transaction";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prCalendarIDParameter = cmd.CreateParameter();
                    prCalendarIDParameter.ParameterName = "prCalendarID";
                    prCalendarIDParameter.Direction = ParameterDirection.Input;
                    prCalendarIDParameter.DbType = DbType.Int32;
                    prCalendarIDParameter.Precision = 10;
                    prCalendarIDParameter.Scale = 0;
                    if (prCalendarID.HasValue)
                    {
                        prCalendarIDParameter.Value = prCalendarID.Value;
                    }
                    else
                    {
                        prCalendarIDParameter.Size = -1;
                        prCalendarIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCalendarIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Eliminar el adelanto de planilla
        /// </summary>
        public void PrPlanillaRemoveAdelanto (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_remove_adelanto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Eliminar el adelanto de planilla
        /// </summary>
        public async Task PrPlanillaRemoveAdelantoAsync (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_remove_adelanto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para actualizar los adelantos en la planilla
        /// </summary>
        public void PrPlanillaUpdateAdelanto (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_update_adelanto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para actualizar los adelantos en la planilla
        /// </summary>
        public async Task PrPlanillaUpdateAdelantoAsync (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_update_adelanto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de Compras
        /// </summary>
        public List<PrPurchaseGetReportPurchaseDetailResult> PrPurchaseGetReportPurchaseDetail (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prProviderID)
        {

            List<PrPurchaseGetReportPurchaseDetailResult> result = new List<PrPurchaseGetReportPurchaseDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_purchase_get_report_purchase_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prProviderIDParameter = cmd.CreateParameter();
                    prProviderIDParameter.ParameterName = "prProviderID";
                    prProviderIDParameter.Direction = ParameterDirection.Input;
                    prProviderIDParameter.DbType = DbType.Int32;
                    prProviderIDParameter.Precision = 10;
                    prProviderIDParameter.Scale = 0;
                    if (prProviderID.HasValue)
                    {
                        prProviderIDParameter.Value = prProviderID.Value;
                    }
                    else
                    {
                        prProviderIDParameter.Size = -1;
                        prProviderIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prProviderIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrPurchaseGetReportPurchaseDetailResult row = new PrPurchaseGetReportPurchaseDetailResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("dayOfMonth") && !reader.IsDBNull(reader.GetOrdinal(@"dayOfMonth")))
                                row.DayOfMonth = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayOfMonth")), typeof(int));
                            else
                                row.DayOfMonth = null;

                            if (fieldNames.Contains("providerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"providerNumber")))
                                row.ProviderNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"providerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("zone") && !reader.IsDBNull(reader.GetOrdinal(@"zone")))
                                row.Zone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"zone")), typeof(string));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de Compras
        /// </summary>
        public async Task<List<PrPurchaseGetReportPurchaseDetailResult>> PrPurchaseGetReportPurchaseDetailAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prProviderID)
        {

            List<PrPurchaseGetReportPurchaseDetailResult> result = new List<PrPurchaseGetReportPurchaseDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_purchase_get_report_purchase_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prProviderIDParameter = cmd.CreateParameter();
                    prProviderIDParameter.ParameterName = "prProviderID";
                    prProviderIDParameter.Direction = ParameterDirection.Input;
                    prProviderIDParameter.DbType = DbType.Int32;
                    prProviderIDParameter.Precision = 10;
                    prProviderIDParameter.Scale = 0;
                    if (prProviderID.HasValue)
                    {
                        prProviderIDParameter.Value = prProviderID.Value;
                    }
                    else
                    {
                        prProviderIDParameter.Size = -1;
                        prProviderIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prProviderIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrPurchaseGetReportPurchaseDetailResult row = new PrPurchaseGetReportPurchaseDetailResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("dayOfMonth") && !reader.IsDBNull(reader.GetOrdinal(@"dayOfMonth")))
                                row.DayOfMonth = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayOfMonth")), typeof(int));
                            else
                                row.DayOfMonth = null;

                            if (fieldNames.Contains("providerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"providerNumber")))
                                row.ProviderNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"providerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("zone") && !reader.IsDBNull(reader.GetOrdinal(@"zone")))
                                row.Zone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"zone")), typeof(string));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void PrPurchaseGetReportPurchaseTaller (int? prUserID, string prTokenID, int? prCompanyID, string prEmployerID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_purchase_get_report_purchase_taller";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prEmployerIDParameter = cmd.CreateParameter();
                    prEmployerIDParameter.ParameterName = "prEmployerID";
                    prEmployerIDParameter.Direction = ParameterDirection.Input;
                    prEmployerIDParameter.DbType = DbType.String;
                    prEmployerIDParameter.Size = 150;
                    if (prEmployerID != null)
                    {
                        prEmployerIDParameter.Value = prEmployerID;
                    }
                    else
                    {
                        prEmployerIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployerIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrPurchaseGetReportPurchaseTallerAsync (int? prUserID, string prTokenID, int? prCompanyID, string prEmployerID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_purchase_get_report_purchase_taller";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prEmployerIDParameter = cmd.CreateParameter();
                    prEmployerIDParameter.ParameterName = "prEmployerID";
                    prEmployerIDParameter.Direction = ParameterDirection.Input;
                    prEmployerIDParameter.DbType = DbType.String;
                    prEmployerIDParameter.Size = 150;
                    if (prEmployerID != null)
                    {
                        prEmployerIDParameter.Value = prEmployerID;
                    }
                    else
                    {
                        prEmployerIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployerIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public List<PrSalesGetReportSalesByClientResult> PrSalesGetReportSalesByClient (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            List<PrSalesGetReportSalesByClientResult> result = new List<PrSalesGetReportSalesByClientResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_by_client";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesByClientResult row = new PrSalesGetReportSalesByClientResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("amountConIva") && !reader.IsDBNull(reader.GetOrdinal(@"amountConIva")))
                                row.AmountConIva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountConIva")), typeof(decimal));
                            else
                                row.AmountConIva = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            if (fieldNames.Contains("iva") && !reader.IsDBNull(reader.GetOrdinal(@"iva")))
                                row.Iva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"iva")), typeof(decimal));
                            else
                                row.Iva = null;

                            if (fieldNames.Contains("ivaTotal") && !reader.IsDBNull(reader.GetOrdinal(@"ivaTotal")))
                                row.IvaTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ivaTotal")), typeof(decimal));
                            else
                                row.IvaTotal = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("amountCommision") && !reader.IsDBNull(reader.GetOrdinal(@"amountCommision")))
                                row.AmountCommision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCommision")), typeof(decimal));
                            else
                                row.AmountCommision = null;

                            if (fieldNames.Contains("pagoConPuntos") && !reader.IsDBNull(reader.GetOrdinal(@"pagoConPuntos")))
                                row.PagoConPuntos = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pagoConPuntos")), typeof(decimal));
                            else
                                row.PagoConPuntos = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task<List<PrSalesGetReportSalesByClientResult>> PrSalesGetReportSalesByClientAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            List<PrSalesGetReportSalesByClientResult> result = new List<PrSalesGetReportSalesByClientResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_by_client";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesByClientResult row = new PrSalesGetReportSalesByClientResult();
                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("amountConIva") && !reader.IsDBNull(reader.GetOrdinal(@"amountConIva")))
                                row.AmountConIva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountConIva")), typeof(decimal));
                            else
                                row.AmountConIva = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            if (fieldNames.Contains("iva") && !reader.IsDBNull(reader.GetOrdinal(@"iva")))
                                row.Iva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"iva")), typeof(decimal));
                            else
                                row.Iva = null;

                            if (fieldNames.Contains("ivaTotal") && !reader.IsDBNull(reader.GetOrdinal(@"ivaTotal")))
                                row.IvaTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ivaTotal")), typeof(decimal));
                            else
                                row.IvaTotal = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("amountCommision") && !reader.IsDBNull(reader.GetOrdinal(@"amountCommision")))
                                row.AmountCommision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCommision")), typeof(decimal));
                            else
                                row.AmountCommision = null;

                            if (fieldNames.Contains("pagoConPuntos") && !reader.IsDBNull(reader.GetOrdinal(@"pagoConPuntos")))
                                row.PagoConPuntos = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"pagoConPuntos")), typeof(decimal));
                            else
                                row.PagoConPuntos = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public List<PrSalesGetReportSalesComisssionSummaryResult> PrSalesGetReportSalesComisssionSummary (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            List<PrSalesGetReportSalesComisssionSummaryResult> result = new List<PrSalesGetReportSalesComisssionSummaryResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_comisssion_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesComisssionSummaryResult row = new PrSalesGetReportSalesComisssionSummaryResult();
                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));
                            else
                                row.EmployerName = null;

                            if (fieldNames.Contains("amountCommision") && !reader.IsDBNull(reader.GetOrdinal(@"amountCommision")))
                                row.AmountCommision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCommision")), typeof(decimal));
                            else
                                row.AmountCommision = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task<List<PrSalesGetReportSalesComisssionSummaryResult>> PrSalesGetReportSalesComisssionSummaryAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            List<PrSalesGetReportSalesComisssionSummaryResult> result = new List<PrSalesGetReportSalesComisssionSummaryResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_comisssion_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesComisssionSummaryResult row = new PrSalesGetReportSalesComisssionSummaryResult();
                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));
                            else
                                row.EmployerName = null;

                            if (fieldNames.Contains("amountCommision") && !reader.IsDBNull(reader.GetOrdinal(@"amountCommision")))
                                row.AmountCommision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCommision")), typeof(decimal));
                            else
                                row.AmountCommision = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public List<PrSalesGetReportSalesDayResult> PrSalesGetReportSalesDay (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrSalesGetReportSalesDayResult> result = new List<PrSalesGetReportSalesDayResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_day";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesDayResult row = new PrSalesGetReportSalesDayResult();
                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task<List<PrSalesGetReportSalesDayResult>> PrSalesGetReportSalesDayAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrSalesGetReportSalesDayResult> result = new List<PrSalesGetReportSalesDayResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_day";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesDayResult row = new PrSalesGetReportSalesDayResult();
                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public List<PrSalesGetReportSalesDetailResult> PrSalesGetReportSalesDetail (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse, int? prUserIDCreatedBy)
        {

            List<PrSalesGetReportSalesDetailResult> result = new List<PrSalesGetReportSalesDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);

                    DbParameter prUserIDCreatedByParameter = cmd.CreateParameter();
                    prUserIDCreatedByParameter.ParameterName = "prUserIDCreatedBy";
                    prUserIDCreatedByParameter.Direction = ParameterDirection.Input;
                    prUserIDCreatedByParameter.DbType = DbType.Int32;
                    prUserIDCreatedByParameter.Precision = 10;
                    prUserIDCreatedByParameter.Scale = 0;
                    if (prUserIDCreatedBy.HasValue)
                    {
                        prUserIDCreatedByParameter.Value = prUserIDCreatedBy.Value;
                    }
                    else
                    {
                        prUserIDCreatedByParameter.Size = -1;
                        prUserIDCreatedByParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDCreatedByParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesDetailResult row = new PrSalesGetReportSalesDetailResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("dayOfMonth") && !reader.IsDBNull(reader.GetOrdinal(@"dayOfMonth")))
                                row.DayOfMonth = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayOfMonth")), typeof(int));
                            else
                                row.DayOfMonth = null;

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("zone") && !reader.IsDBNull(reader.GetOrdinal(@"zone")))
                                row.Zone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"zone")), typeof(string));
                            else
                                row.Zone = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("itemNameLog") && !reader.IsDBNull(reader.GetOrdinal(@"itemNameLog")))
                                row.ItemNameLog = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNameLog")), typeof(string));
                            else
                                row.ItemNameLog = null;

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("Agent") && !reader.IsDBNull(reader.GetOrdinal(@"Agent")))
                                row.Agent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Agent")), typeof(string));

                            if (fieldNames.Contains("Commentary") && !reader.IsDBNull(reader.GetOrdinal(@"Commentary")))
                                row.Commentary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Commentary")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("amountConIva") && !reader.IsDBNull(reader.GetOrdinal(@"amountConIva")))
                                row.AmountConIva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountConIva")), typeof(decimal));
                            else
                                row.AmountConIva = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            if (fieldNames.Contains("iva") && !reader.IsDBNull(reader.GetOrdinal(@"iva")))
                                row.Iva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"iva")), typeof(decimal));
                            else
                                row.Iva = null;

                            if (fieldNames.Contains("ivaTotal") && !reader.IsDBNull(reader.GetOrdinal(@"ivaTotal")))
                                row.IvaTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ivaTotal")), typeof(decimal));
                            else
                                row.IvaTotal = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("amountCommision") && !reader.IsDBNull(reader.GetOrdinal(@"amountCommision")))
                                row.AmountCommision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCommision")), typeof(decimal));
                            else
                                row.AmountCommision = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task<List<PrSalesGetReportSalesDetailResult>> PrSalesGetReportSalesDetailAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse, int? prUserIDCreatedBy)
        {

            List<PrSalesGetReportSalesDetailResult> result = new List<PrSalesGetReportSalesDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);

                    DbParameter prUserIDCreatedByParameter = cmd.CreateParameter();
                    prUserIDCreatedByParameter.ParameterName = "prUserIDCreatedBy";
                    prUserIDCreatedByParameter.Direction = ParameterDirection.Input;
                    prUserIDCreatedByParameter.DbType = DbType.Int32;
                    prUserIDCreatedByParameter.Precision = 10;
                    prUserIDCreatedByParameter.Scale = 0;
                    if (prUserIDCreatedBy.HasValue)
                    {
                        prUserIDCreatedByParameter.Value = prUserIDCreatedBy.Value;
                    }
                    else
                    {
                        prUserIDCreatedByParameter.Size = -1;
                        prUserIDCreatedByParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDCreatedByParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesDetailResult row = new PrSalesGetReportSalesDetailResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("dayOfMonth") && !reader.IsDBNull(reader.GetOrdinal(@"dayOfMonth")))
                                row.DayOfMonth = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayOfMonth")), typeof(int));
                            else
                                row.DayOfMonth = null;

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("zone") && !reader.IsDBNull(reader.GetOrdinal(@"zone")))
                                row.Zone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"zone")), typeof(string));
                            else
                                row.Zone = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("itemNameLog") && !reader.IsDBNull(reader.GetOrdinal(@"itemNameLog")))
                                row.ItemNameLog = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNameLog")), typeof(string));
                            else
                                row.ItemNameLog = null;

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("Agent") && !reader.IsDBNull(reader.GetOrdinal(@"Agent")))
                                row.Agent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Agent")), typeof(string));

                            if (fieldNames.Contains("Commentary") && !reader.IsDBNull(reader.GetOrdinal(@"Commentary")))
                                row.Commentary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Commentary")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("amountConIva") && !reader.IsDBNull(reader.GetOrdinal(@"amountConIva")))
                                row.AmountConIva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountConIva")), typeof(decimal));
                            else
                                row.AmountConIva = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            if (fieldNames.Contains("iva") && !reader.IsDBNull(reader.GetOrdinal(@"iva")))
                                row.Iva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"iva")), typeof(decimal));
                            else
                                row.Iva = null;

                            if (fieldNames.Contains("ivaTotal") && !reader.IsDBNull(reader.GetOrdinal(@"ivaTotal")))
                                row.IvaTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ivaTotal")), typeof(decimal));
                            else
                                row.IvaTotal = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("amountCommision") && !reader.IsDBNull(reader.GetOrdinal(@"amountCommision")))
                                row.AmountCommision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCommision")), typeof(decimal));
                            else
                                row.AmountCommision = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public List<PrSalesGetReportSalesDetailResult> PrSalesGetReportSalesDetailCommission (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse, int? prUserIDSales, string prText, int? prEmployerID)
        {

            List<PrSalesGetReportSalesDetailResult> result = new List<PrSalesGetReportSalesDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_detail_commission";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);

                    DbParameter prUserIDSalesParameter = cmd.CreateParameter();
                    prUserIDSalesParameter.ParameterName = "prUserIDSales";
                    prUserIDSalesParameter.Direction = ParameterDirection.Input;
                    prUserIDSalesParameter.DbType = DbType.Int32;
                    prUserIDSalesParameter.Precision = 10;
                    prUserIDSalesParameter.Scale = 0;
                    if (prUserIDSales.HasValue)
                    {
                        prUserIDSalesParameter.Value = prUserIDSales.Value;
                    }
                    else
                    {
                        prUserIDSalesParameter.Size = -1;
                        prUserIDSalesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDSalesParameter);

                    DbParameter prTextParameter = cmd.CreateParameter();
                    prTextParameter.ParameterName = "prText";
                    prTextParameter.Direction = ParameterDirection.Input;
                    prTextParameter.DbType = DbType.String;
                    prTextParameter.Size = 50;
                    if (prText != null)
                    {
                        prTextParameter.Value = prText;
                    }
                    else
                    {
                        prTextParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTextParameter);

                    DbParameter prEmployerIDParameter = cmd.CreateParameter();
                    prEmployerIDParameter.ParameterName = "prEmployerID";
                    prEmployerIDParameter.Direction = ParameterDirection.Input;
                    prEmployerIDParameter.DbType = DbType.Int32;
                    prEmployerIDParameter.Precision = 10;
                    prEmployerIDParameter.Scale = 0;
                    if (prEmployerID.HasValue)
                    {
                        prEmployerIDParameter.Value = prEmployerID.Value;
                    }
                    else
                    {
                        prEmployerIDParameter.Size = -1;
                        prEmployerIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployerIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesDetailResult row = new PrSalesGetReportSalesDetailResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("dayOfMonth") && !reader.IsDBNull(reader.GetOrdinal(@"dayOfMonth")))
                                row.DayOfMonth = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayOfMonth")), typeof(int));
                            else
                                row.DayOfMonth = null;

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("zone") && !reader.IsDBNull(reader.GetOrdinal(@"zone")))
                                row.Zone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"zone")), typeof(string));
                            else
                                row.Zone = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("itemNameLog") && !reader.IsDBNull(reader.GetOrdinal(@"itemNameLog")))
                                row.ItemNameLog = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNameLog")), typeof(string));
                            else
                                row.ItemNameLog = null;

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("Agent") && !reader.IsDBNull(reader.GetOrdinal(@"Agent")))
                                row.Agent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Agent")), typeof(string));

                            if (fieldNames.Contains("Commentary") && !reader.IsDBNull(reader.GetOrdinal(@"Commentary")))
                                row.Commentary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Commentary")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("amountConIva") && !reader.IsDBNull(reader.GetOrdinal(@"amountConIva")))
                                row.AmountConIva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountConIva")), typeof(decimal));
                            else
                                row.AmountConIva = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            if (fieldNames.Contains("iva") && !reader.IsDBNull(reader.GetOrdinal(@"iva")))
                                row.Iva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"iva")), typeof(decimal));
                            else
                                row.Iva = null;

                            if (fieldNames.Contains("ivaTotal") && !reader.IsDBNull(reader.GetOrdinal(@"ivaTotal")))
                                row.IvaTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ivaTotal")), typeof(decimal));
                            else
                                row.IvaTotal = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("amountCommision") && !reader.IsDBNull(reader.GetOrdinal(@"amountCommision")))
                                row.AmountCommision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCommision")), typeof(decimal));
                            else
                                row.AmountCommision = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task<List<PrSalesGetReportSalesDetailResult>> PrSalesGetReportSalesDetailCommissionAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse, int? prUserIDSales, string prText, int? prEmployerID)
        {

            List<PrSalesGetReportSalesDetailResult> result = new List<PrSalesGetReportSalesDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_detail_commission";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);

                    DbParameter prUserIDSalesParameter = cmd.CreateParameter();
                    prUserIDSalesParameter.ParameterName = "prUserIDSales";
                    prUserIDSalesParameter.Direction = ParameterDirection.Input;
                    prUserIDSalesParameter.DbType = DbType.Int32;
                    prUserIDSalesParameter.Precision = 10;
                    prUserIDSalesParameter.Scale = 0;
                    if (prUserIDSales.HasValue)
                    {
                        prUserIDSalesParameter.Value = prUserIDSales.Value;
                    }
                    else
                    {
                        prUserIDSalesParameter.Size = -1;
                        prUserIDSalesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDSalesParameter);

                    DbParameter prTextParameter = cmd.CreateParameter();
                    prTextParameter.ParameterName = "prText";
                    prTextParameter.Direction = ParameterDirection.Input;
                    prTextParameter.DbType = DbType.String;
                    prTextParameter.Size = 50;
                    if (prText != null)
                    {
                        prTextParameter.Value = prText;
                    }
                    else
                    {
                        prTextParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTextParameter);

                    DbParameter prEmployerIDParameter = cmd.CreateParameter();
                    prEmployerIDParameter.ParameterName = "prEmployerID";
                    prEmployerIDParameter.Direction = ParameterDirection.Input;
                    prEmployerIDParameter.DbType = DbType.Int32;
                    prEmployerIDParameter.Precision = 10;
                    prEmployerIDParameter.Scale = 0;
                    if (prEmployerID.HasValue)
                    {
                        prEmployerIDParameter.Value = prEmployerID.Value;
                    }
                    else
                    {
                        prEmployerIDParameter.Size = -1;
                        prEmployerIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployerIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesDetailResult row = new PrSalesGetReportSalesDetailResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("dayOfMonth") && !reader.IsDBNull(reader.GetOrdinal(@"dayOfMonth")))
                                row.DayOfMonth = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayOfMonth")), typeof(int));
                            else
                                row.DayOfMonth = null;

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("zone") && !reader.IsDBNull(reader.GetOrdinal(@"zone")))
                                row.Zone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"zone")), typeof(string));
                            else
                                row.Zone = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("itemNameLog") && !reader.IsDBNull(reader.GetOrdinal(@"itemNameLog")))
                                row.ItemNameLog = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNameLog")), typeof(string));
                            else
                                row.ItemNameLog = null;

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("Agent") && !reader.IsDBNull(reader.GetOrdinal(@"Agent")))
                                row.Agent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Agent")), typeof(string));

                            if (fieldNames.Contains("Commentary") && !reader.IsDBNull(reader.GetOrdinal(@"Commentary")))
                                row.Commentary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Commentary")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("amountConIva") && !reader.IsDBNull(reader.GetOrdinal(@"amountConIva")))
                                row.AmountConIva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountConIva")), typeof(decimal));
                            else
                                row.AmountConIva = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            if (fieldNames.Contains("iva") && !reader.IsDBNull(reader.GetOrdinal(@"iva")))
                                row.Iva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"iva")), typeof(decimal));
                            else
                                row.Iva = null;

                            if (fieldNames.Contains("ivaTotal") && !reader.IsDBNull(reader.GetOrdinal(@"ivaTotal")))
                                row.IvaTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ivaTotal")), typeof(decimal));
                            else
                                row.IvaTotal = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("amountCommision") && !reader.IsDBNull(reader.GetOrdinal(@"amountCommision")))
                                row.AmountCommision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCommision")), typeof(decimal));
                            else
                                row.AmountCommision = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Resumen de venta
        /// </summary>
        public void PrSalesGetReportSalesSummary (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter, int? prWithTax1, int? prBranchID, int? prWarehouseID, int? prEntityIDCustomer)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);

                    DbParameter prWithTax1Parameter = cmd.CreateParameter();
                    prWithTax1Parameter.ParameterName = "prWithTax1";
                    prWithTax1Parameter.Direction = ParameterDirection.Input;
                    prWithTax1Parameter.DbType = DbType.Int32;
                    prWithTax1Parameter.Precision = 10;
                    prWithTax1Parameter.Scale = 0;
                    if (prWithTax1.HasValue)
                    {
                        prWithTax1Parameter.Value = prWithTax1.Value;
                    }
                    else
                    {
                        prWithTax1Parameter.Size = -1;
                        prWithTax1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWithTax1Parameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prEntityIDCustomerParameter = cmd.CreateParameter();
                    prEntityIDCustomerParameter.ParameterName = "prEntityIDCustomer";
                    prEntityIDCustomerParameter.Direction = ParameterDirection.Input;
                    prEntityIDCustomerParameter.DbType = DbType.Int32;
                    prEntityIDCustomerParameter.Precision = 10;
                    prEntityIDCustomerParameter.Scale = 0;
                    if (prEntityIDCustomer.HasValue)
                    {
                        prEntityIDCustomerParameter.Value = prEntityIDCustomer.Value;
                    }
                    else
                    {
                        prEntityIDCustomerParameter.Size = -1;
                        prEntityIDCustomerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEntityIDCustomerParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Resumen de venta
        /// </summary>
        public async Task PrSalesGetReportSalesSummaryAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter, int? prWithTax1, int? prBranchID, int? prWarehouseID, int? prEntityIDCustomer)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);

                    DbParameter prWithTax1Parameter = cmd.CreateParameter();
                    prWithTax1Parameter.ParameterName = "prWithTax1";
                    prWithTax1Parameter.Direction = ParameterDirection.Input;
                    prWithTax1Parameter.DbType = DbType.Int32;
                    prWithTax1Parameter.Precision = 10;
                    prWithTax1Parameter.Scale = 0;
                    if (prWithTax1.HasValue)
                    {
                        prWithTax1Parameter.Value = prWithTax1.Value;
                    }
                    else
                    {
                        prWithTax1Parameter.Size = -1;
                        prWithTax1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWithTax1Parameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prEntityIDCustomerParameter = cmd.CreateParameter();
                    prEntityIDCustomerParameter.ParameterName = "prEntityIDCustomer";
                    prEntityIDCustomerParameter.Direction = ParameterDirection.Input;
                    prEntityIDCustomerParameter.DbType = DbType.Int32;
                    prEntityIDCustomerParameter.Precision = 10;
                    prEntityIDCustomerParameter.Scale = 0;
                    if (prEntityIDCustomer.HasValue)
                    {
                        prEntityIDCustomerParameter.Value = prEntityIDCustomer.Value;
                    }
                    else
                    {
                        prEntityIDCustomerParameter.Size = -1;
                        prEntityIDCustomerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEntityIDCustomerParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Resumen de venta
        /// </summary>
        public void PrSalesGetReportSalesSummaryCredit (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter, int? prBranchID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_summary_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Resumen de venta
        /// </summary>
        public async Task PrSalesGetReportSalesSummaryCreditAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter, int? prBranchID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_summary_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public void PrSalesGetReportSalesUtilitySummary (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prExpenditureClassification, int? prBranchID, int? prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_utility_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prExpenditureClassificationParameter = cmd.CreateParameter();
                    prExpenditureClassificationParameter.ParameterName = "prExpenditureClassification";
                    prExpenditureClassificationParameter.Direction = ParameterDirection.Input;
                    prExpenditureClassificationParameter.DbType = DbType.Int32;
                    prExpenditureClassificationParameter.Precision = 10;
                    prExpenditureClassificationParameter.Scale = 0;
                    if (prExpenditureClassification.HasValue)
                    {
                        prExpenditureClassificationParameter.Value = prExpenditureClassification.Value;
                    }
                    else
                    {
                        prExpenditureClassificationParameter.Size = -1;
                        prExpenditureClassificationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prExpenditureClassificationParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task PrSalesGetReportSalesUtilitySummaryAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prExpenditureClassification, int? prBranchID, int? prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_utility_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prExpenditureClassificationParameter = cmd.CreateParameter();
                    prExpenditureClassificationParameter.ParameterName = "prExpenditureClassification";
                    prExpenditureClassificationParameter.Direction = ParameterDirection.Input;
                    prExpenditureClassificationParameter.DbType = DbType.Int32;
                    prExpenditureClassificationParameter.Precision = 10;
                    prExpenditureClassificationParameter.Scale = 0;
                    if (prExpenditureClassification.HasValue)
                    {
                        prExpenditureClassificationParameter.Value = prExpenditureClassification.Value;
                    }
                    else
                    {
                        prExpenditureClassificationParameter.Size = -1;
                        prExpenditureClassificationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prExpenditureClassificationParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public List<PrSalesGetReportVentaDeProductoResult> PrSalesGetReportVentaDeProducto (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID)
        {

            List<PrSalesGetReportVentaDeProductoResult> result = new List<PrSalesGetReportVentaDeProductoResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_venta_de_producto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportVentaDeProductoResult row = new PrSalesGetReportVentaDeProductoResult();
                            if (fieldNames.Contains("itemID") && !reader.IsDBNull(reader.GetOrdinal(@"itemID")))
                                row.ItemID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemID")), typeof(int));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("quantityInAllWarehouse") && !reader.IsDBNull(reader.GetOrdinal(@"quantityInAllWarehouse")))
                                row.QuantityInAllWarehouse = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityInAllWarehouse")), typeof(decimal));

                            if (fieldNames.Contains("family") && !reader.IsDBNull(reader.GetOrdinal(@"family")))
                                row.Family = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"family")), typeof(string));
                            else
                                row.Family = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            if (fieldNames.Contains("quantityInicial") && !reader.IsDBNull(reader.GetOrdinal(@"quantityInicial")))
                                row.QuantityInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityInicial")), typeof(decimal));
                            else
                                row.QuantityInicial = null;

                            if (fieldNames.Contains("percentageSales") && !reader.IsDBNull(reader.GetOrdinal(@"percentageSales")))
                                row.PercentageSales = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"percentageSales")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task<List<PrSalesGetReportVentaDeProductoResult>> PrSalesGetReportVentaDeProductoAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID)
        {

            List<PrSalesGetReportVentaDeProductoResult> result = new List<PrSalesGetReportVentaDeProductoResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_venta_de_producto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportVentaDeProductoResult row = new PrSalesGetReportVentaDeProductoResult();
                            if (fieldNames.Contains("itemID") && !reader.IsDBNull(reader.GetOrdinal(@"itemID")))
                                row.ItemID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemID")), typeof(int));

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("quantityInAllWarehouse") && !reader.IsDBNull(reader.GetOrdinal(@"quantityInAllWarehouse")))
                                row.QuantityInAllWarehouse = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityInAllWarehouse")), typeof(decimal));

                            if (fieldNames.Contains("family") && !reader.IsDBNull(reader.GetOrdinal(@"family")))
                                row.Family = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"family")), typeof(string));
                            else
                                row.Family = null;

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            if (fieldNames.Contains("quantityInicial") && !reader.IsDBNull(reader.GetOrdinal(@"quantityInicial")))
                                row.QuantityInicial = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantityInicial")), typeof(decimal));
                            else
                                row.QuantityInicial = null;

                            if (fieldNames.Contains("percentageSales") && !reader.IsDBNull(reader.GetOrdinal(@"percentageSales")))
                                row.PercentageSales = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"percentageSales")), typeof(decimal));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public void PrTransactionMasterDetail (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_master_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrTransactionMasterDetailAsync (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_master_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de Transacciones Anuladas
        /// </summary>
        public List<PrTransactionReportRegistradasAnuladaResult> PrTransactionReportRegistradasAnulada (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrTransactionReportRegistradasAnuladaResult> result = new List<PrTransactionReportRegistradasAnuladaResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_report_registradas_anuladas";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrTransactionReportRegistradasAnuladaResult row = new PrTransactionReportRegistradasAnuladaResult();
                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("statusName") && !reader.IsDBNull(reader.GetOrdinal(@"statusName")))
                                row.StatusName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusName")), typeof(string));
                            else
                                row.StatusName = null;

                            if (fieldNames.Contains("monto") && !reader.IsDBNull(reader.GetOrdinal(@"monto")))
                                row.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"monto")), typeof(decimal));
                            else
                                row.Monto = null;

                            if (fieldNames.Contains("transactionName") && !reader.IsDBNull(reader.GetOrdinal(@"transactionName")))
                                row.TransactionName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionName")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de Transacciones Anuladas
        /// </summary>
        public async Task<List<PrTransactionReportRegistradasAnuladaResult>> PrTransactionReportRegistradasAnuladaAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            List<PrTransactionReportRegistradasAnuladaResult> result = new List<PrTransactionReportRegistradasAnuladaResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_report_registradas_anuladas";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrTransactionReportRegistradasAnuladaResult row = new PrTransactionReportRegistradasAnuladaResult();
                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("statusName") && !reader.IsDBNull(reader.GetOrdinal(@"statusName")))
                                row.StatusName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"statusName")), typeof(string));
                            else
                                row.StatusName = null;

                            if (fieldNames.Contains("monto") && !reader.IsDBNull(reader.GetOrdinal(@"monto")))
                                row.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"monto")), typeof(decimal));
                            else
                                row.Monto = null;

                            if (fieldNames.Contains("transactionName") && !reader.IsDBNull(reader.GetOrdinal(@"transactionName")))
                                row.TransactionName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionName")), typeof(string));

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Procedimiento que se utiliza para revertir una transaccion
        /// </summary>
        public void PrTransactionRevert (int? prCompanyID, int? prTransactionIDOriginal, long? prTransactionMasterIDOriginal, int? prTransactionIDRevert, long? prTransactionMasterIDRevert)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_revert";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDOriginalParameter = cmd.CreateParameter();
                    prTransactionIDOriginalParameter.ParameterName = "prTransactionIDOriginal";
                    prTransactionIDOriginalParameter.Direction = ParameterDirection.Input;
                    prTransactionIDOriginalParameter.DbType = DbType.Int32;
                    prTransactionIDOriginalParameter.Precision = 10;
                    prTransactionIDOriginalParameter.Scale = 0;
                    if (prTransactionIDOriginal.HasValue)
                    {
                        prTransactionIDOriginalParameter.Value = prTransactionIDOriginal.Value;
                    }
                    else
                    {
                        prTransactionIDOriginalParameter.Size = -1;
                        prTransactionIDOriginalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDOriginalParameter);

                    DbParameter prTransactionMasterIDOriginalParameter = cmd.CreateParameter();
                    prTransactionMasterIDOriginalParameter.ParameterName = "prTransactionMasterIDOriginal";
                    prTransactionMasterIDOriginalParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDOriginalParameter.DbType = DbType.Int64;
                    prTransactionMasterIDOriginalParameter.Precision = 19;
                    prTransactionMasterIDOriginalParameter.Scale = 0;
                    if (prTransactionMasterIDOriginal.HasValue)
                    {
                        prTransactionMasterIDOriginalParameter.Value = prTransactionMasterIDOriginal.Value;
                    }
                    else
                    {
                        prTransactionMasterIDOriginalParameter.Size = -1;
                        prTransactionMasterIDOriginalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDOriginalParameter);

                    DbParameter prTransactionIDRevertParameter = cmd.CreateParameter();
                    prTransactionIDRevertParameter.ParameterName = "prTransactionIDRevert";
                    prTransactionIDRevertParameter.Direction = ParameterDirection.Input;
                    prTransactionIDRevertParameter.DbType = DbType.Int32;
                    prTransactionIDRevertParameter.Precision = 10;
                    prTransactionIDRevertParameter.Scale = 0;
                    if (prTransactionIDRevert.HasValue)
                    {
                        prTransactionIDRevertParameter.Value = prTransactionIDRevert.Value;
                    }
                    else
                    {
                        prTransactionIDRevertParameter.Size = -1;
                        prTransactionIDRevertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDRevertParameter);

                    DbParameter prTransactionMasterIDRevertParameter = cmd.CreateParameter();
                    prTransactionMasterIDRevertParameter.ParameterName = "prTransactionMasterIDRevert";
                    prTransactionMasterIDRevertParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDRevertParameter.DbType = DbType.Int64;
                    prTransactionMasterIDRevertParameter.Precision = 19;
                    prTransactionMasterIDRevertParameter.Scale = 0;
                    if (prTransactionMasterIDRevert.HasValue)
                    {
                        prTransactionMasterIDRevertParameter.Value = prTransactionMasterIDRevert.Value;
                    }
                    else
                    {
                        prTransactionMasterIDRevertParameter.Size = -1;
                        prTransactionMasterIDRevertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDRevertParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento que se utiliza para revertir una transaccion
        /// </summary>
        public async Task PrTransactionRevertAsync (int? prCompanyID, int? prTransactionIDOriginal, long? prTransactionMasterIDOriginal, int? prTransactionIDRevert, long? prTransactionMasterIDRevert)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_revert";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDOriginalParameter = cmd.CreateParameter();
                    prTransactionIDOriginalParameter.ParameterName = "prTransactionIDOriginal";
                    prTransactionIDOriginalParameter.Direction = ParameterDirection.Input;
                    prTransactionIDOriginalParameter.DbType = DbType.Int32;
                    prTransactionIDOriginalParameter.Precision = 10;
                    prTransactionIDOriginalParameter.Scale = 0;
                    if (prTransactionIDOriginal.HasValue)
                    {
                        prTransactionIDOriginalParameter.Value = prTransactionIDOriginal.Value;
                    }
                    else
                    {
                        prTransactionIDOriginalParameter.Size = -1;
                        prTransactionIDOriginalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDOriginalParameter);

                    DbParameter prTransactionMasterIDOriginalParameter = cmd.CreateParameter();
                    prTransactionMasterIDOriginalParameter.ParameterName = "prTransactionMasterIDOriginal";
                    prTransactionMasterIDOriginalParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDOriginalParameter.DbType = DbType.Int64;
                    prTransactionMasterIDOriginalParameter.Precision = 19;
                    prTransactionMasterIDOriginalParameter.Scale = 0;
                    if (prTransactionMasterIDOriginal.HasValue)
                    {
                        prTransactionMasterIDOriginalParameter.Value = prTransactionMasterIDOriginal.Value;
                    }
                    else
                    {
                        prTransactionMasterIDOriginalParameter.Size = -1;
                        prTransactionMasterIDOriginalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDOriginalParameter);

                    DbParameter prTransactionIDRevertParameter = cmd.CreateParameter();
                    prTransactionIDRevertParameter.ParameterName = "prTransactionIDRevert";
                    prTransactionIDRevertParameter.Direction = ParameterDirection.Input;
                    prTransactionIDRevertParameter.DbType = DbType.Int32;
                    prTransactionIDRevertParameter.Precision = 10;
                    prTransactionIDRevertParameter.Scale = 0;
                    if (prTransactionIDRevert.HasValue)
                    {
                        prTransactionIDRevertParameter.Value = prTransactionIDRevert.Value;
                    }
                    else
                    {
                        prTransactionIDRevertParameter.Size = -1;
                        prTransactionIDRevertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDRevertParameter);

                    DbParameter prTransactionMasterIDRevertParameter = cmd.CreateParameter();
                    prTransactionMasterIDRevertParameter.ParameterName = "prTransactionMasterIDRevert";
                    prTransactionMasterIDRevertParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDRevertParameter.DbType = DbType.Int64;
                    prTransactionMasterIDRevertParameter.Precision = 19;
                    prTransactionMasterIDRevertParameter.Scale = 0;
                    if (prTransactionMasterIDRevert.HasValue)
                    {
                        prTransactionMasterIDRevertParameter.Value = prTransactionMasterIDRevert.Value;
                    }
                    else
                    {
                        prTransactionMasterIDRevertParameter.Size = -1;
                        prTransactionMasterIDRevertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDRevertParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Reparar kardex de un producto en especifico, en una bodega 
        /// </summary>
        public List<PrCxcProcExpandinvoiceResult> PrZerrorRepararKardex (int? prItemID, int? prWarehouseID)
        {

            List<PrCxcProcExpandinvoiceResult> result = new List<PrCxcProcExpandinvoiceResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_reparar_kardex";

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcProcExpandinvoiceResult row = new PrCxcProcExpandinvoiceResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.Mensaje = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("mensaje") && !reader.IsDBNull(reader.GetOrdinal(@"mensaje")))
                                row.Mensaje = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mensaje")), typeof(string));
                            else
                                row.Mensaje = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Reparar kardex de un producto en especifico, en una bodega 
        /// </summary>
        public async Task<List<PrCxcProcExpandinvoiceResult>> PrZerrorRepararKardexAsync (int? prItemID, int? prWarehouseID)
        {

            List<PrCxcProcExpandinvoiceResult> result = new List<PrCxcProcExpandinvoiceResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_reparar_kardex";

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrCxcProcExpandinvoiceResult row = new PrCxcProcExpandinvoiceResult();
                            if (fieldNames.Length == 1 && string.IsNullOrEmpty(fieldNames[0]))
                                row.Mensaje = (string)Convert.ChangeType(reader.GetValue(0), typeof(string));
                            else
                            if (fieldNames.Contains("mensaje") && !reader.IsDBNull(reader.GetOrdinal(@"mensaje")))
                                row.Mensaje = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"mensaje")), typeof(string));
                            else
                                row.Mensaje = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Reparar facturas, que se facturaron como semanales, y la frecuencia de pago quedo mensual
        /// </summary>
        public List<PrZerrorRepararTablaAmortizationDiasParaGymRaptorResult> PrZerrorRepararTablaAmortizationDiasParaGymRaptor (int? prItemID, int? prDay)
        {

            List<PrZerrorRepararTablaAmortizationDiasParaGymRaptorResult> result = new List<PrZerrorRepararTablaAmortizationDiasParaGymRaptorResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_reparar_tabla_amortization_dias_para_gym_raptor";

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);

                    DbParameter prDayParameter = cmd.CreateParameter();
                    prDayParameter.ParameterName = "prDay";
                    prDayParameter.Direction = ParameterDirection.Input;
                    prDayParameter.DbType = DbType.Int32;
                    prDayParameter.Precision = 10;
                    prDayParameter.Scale = 0;
                    if (prDay.HasValue)
                    {
                        prDayParameter.Value = prDay.Value;
                    }
                    else
                    {
                        prDayParameter.Size = -1;
                        prDayParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDayParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrZerrorRepararTablaAmortizationDiasParaGymRaptorResult row = new PrZerrorRepararTablaAmortizationDiasParaGymRaptorResult();
                            if (fieldNames.Contains("entityID") && !reader.IsDBNull(reader.GetOrdinal(@"entityID")))
                                row.EntityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"entityID")), typeof(int));
                            else
                                row.EntityID = null;

                            if (fieldNames.Contains("customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                row.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));
                            else
                                row.CustomerCreditDocumentID = null;

                            if (fieldNames.Contains("creditAmortizationID") && !reader.IsDBNull(reader.GetOrdinal(@"creditAmortizationID")))
                                row.CreditAmortizationID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creditAmortizationID")), typeof(int));
                            else
                                row.CreditAmortizationID = null;

                            if (fieldNames.Contains("creditAmortizationIDMax") && !reader.IsDBNull(reader.GetOrdinal(@"creditAmortizationIDMax")))
                                row.CreditAmortizationIDMax = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creditAmortizationIDMax")), typeof(int));
                            else
                                row.CreditAmortizationIDMax = null;

                            if (fieldNames.Contains("dateApply") && !reader.IsDBNull(reader.GetOrdinal(@"dateApply")))
                                row.DateApply = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateApply")), typeof(System.DateTime));
                            else
                                row.DateApply = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Reparar facturas, que se facturaron como semanales, y la frecuencia de pago quedo mensual
        /// </summary>
        public async Task<List<PrZerrorRepararTablaAmortizationDiasParaGymRaptorResult>> PrZerrorRepararTablaAmortizationDiasParaGymRaptorAsync (int? prItemID, int? prDay)
        {

            List<PrZerrorRepararTablaAmortizationDiasParaGymRaptorResult> result = new List<PrZerrorRepararTablaAmortizationDiasParaGymRaptorResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_reparar_tabla_amortization_dias_para_gym_raptor";

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);

                    DbParameter prDayParameter = cmd.CreateParameter();
                    prDayParameter.ParameterName = "prDay";
                    prDayParameter.Direction = ParameterDirection.Input;
                    prDayParameter.DbType = DbType.Int32;
                    prDayParameter.Precision = 10;
                    prDayParameter.Scale = 0;
                    if (prDay.HasValue)
                    {
                        prDayParameter.Value = prDay.Value;
                    }
                    else
                    {
                        prDayParameter.Size = -1;
                        prDayParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDayParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrZerrorRepararTablaAmortizationDiasParaGymRaptorResult row = new PrZerrorRepararTablaAmortizationDiasParaGymRaptorResult();
                            if (fieldNames.Contains("entityID") && !reader.IsDBNull(reader.GetOrdinal(@"entityID")))
                                row.EntityID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"entityID")), typeof(int));
                            else
                                row.EntityID = null;

                            if (fieldNames.Contains("customerCreditDocumentID") && !reader.IsDBNull(reader.GetOrdinal(@"customerCreditDocumentID")))
                                row.CustomerCreditDocumentID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerCreditDocumentID")), typeof(int));
                            else
                                row.CustomerCreditDocumentID = null;

                            if (fieldNames.Contains("creditAmortizationID") && !reader.IsDBNull(reader.GetOrdinal(@"creditAmortizationID")))
                                row.CreditAmortizationID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creditAmortizationID")), typeof(int));
                            else
                                row.CreditAmortizationID = null;

                            if (fieldNames.Contains("creditAmortizationIDMax") && !reader.IsDBNull(reader.GetOrdinal(@"creditAmortizationIDMax")))
                                row.CreditAmortizationIDMax = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"creditAmortizationIDMax")), typeof(int));
                            else
                                row.CreditAmortizationIDMax = null;

                            if (fieldNames.Contains("dateApply") && !reader.IsDBNull(reader.GetOrdinal(@"dateApply")))
                                row.DateApply = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dateApply")), typeof(System.DateTime));
                            else
                                row.DateApply = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Trasladar todo a bodega despacho .. 
        /// </summary>
        public void PrZerrorTrasladarTodoABodegaDespacho ()
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_trasladar_todo_a_bodega_despacho";
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Trasladar todo a bodega despacho .. 
        /// </summary>
        public async Task PrZerrorTrasladarTodoABodegaDespachoAsync ()
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_trasladar_todo_a_bodega_despacho";
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Cerrar un Ciclo Contable
        /// </summary>
        public void NavicatTempStoredProc (int? prCompanyID, int? prBranchID, int? prLoginID, string prCreatedIn, string prTocken, int? prPeriodID, int? prCycleID, out int? prCodeError, out string prMessageResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.`_Navicat_Temp_Stored_Proc`";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prCreatedInParameter = cmd.CreateParameter();
                    prCreatedInParameter.ParameterName = "prCreatedIn";
                    prCreatedInParameter.Direction = ParameterDirection.Input;
                    prCreatedInParameter.DbType = DbType.String;
                    prCreatedInParameter.Size = 50;
                    if (prCreatedIn != null)
                    {
                        prCreatedInParameter.Value = prCreatedIn;
                    }
                    else
                    {
                        prCreatedInParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreatedInParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prCodeErrorParameter = cmd.CreateParameter();
                    prCodeErrorParameter.ParameterName = "prCodeError";
                    prCodeErrorParameter.Direction = ParameterDirection.Output;
                    prCodeErrorParameter.DbType = DbType.Int32;
                    prCodeErrorParameter.Precision = 10;
                    prCodeErrorParameter.Scale = 0;
                    prCodeErrorParameter.Size = -1;
                    prCodeErrorParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prCodeErrorParameter);

                    DbParameter prMessageResultParameter = cmd.CreateParameter();
                    prMessageResultParameter.ParameterName = "prMessageResult";
                    prMessageResultParameter.Direction = ParameterDirection.Output;
                    prMessageResultParameter.DbType = DbType.String;
                    prMessageResultParameter.Size = 250;
                    prMessageResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prMessageResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prCodeError"].Value != null && !(cmd.Parameters["prCodeError"].Value is System.DBNull))
                        prCodeError = (int)Convert.ChangeType(cmd.Parameters["prCodeError"].Value, typeof(int));
                    else
                        prCodeError = default(int);

                    if (cmd.Parameters["prMessageResult"].Value != null && !(cmd.Parameters["prMessageResult"].Value is System.DBNull))
                        prMessageResult = (string)Convert.ChangeType(cmd.Parameters["prMessageResult"].Value, typeof(string));
                    else
                        prMessageResult = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Cerrar un Ciclo Contable
        /// </summary>
        public async Task<Tuple<int?, string>> NavicatTempStoredProcAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prCreatedIn, string prTocken, int? prPeriodID, int? prCycleID)
        {

            int? prCodeError;
            string prMessageResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.`_Navicat_Temp_Stored_Proc`";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prCreatedInParameter = cmd.CreateParameter();
                    prCreatedInParameter.ParameterName = "prCreatedIn";
                    prCreatedInParameter.Direction = ParameterDirection.Input;
                    prCreatedInParameter.DbType = DbType.String;
                    prCreatedInParameter.Size = 50;
                    if (prCreatedIn != null)
                    {
                        prCreatedInParameter.Value = prCreatedIn;
                    }
                    else
                    {
                        prCreatedInParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreatedInParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prCodeErrorParameter = cmd.CreateParameter();
                    prCodeErrorParameter.ParameterName = "prCodeError";
                    prCodeErrorParameter.Direction = ParameterDirection.Output;
                    prCodeErrorParameter.DbType = DbType.Int32;
                    prCodeErrorParameter.Precision = 10;
                    prCodeErrorParameter.Scale = 0;
                    prCodeErrorParameter.Size = -1;
                    prCodeErrorParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prCodeErrorParameter);

                    DbParameter prMessageResultParameter = cmd.CreateParameter();
                    prMessageResultParameter.ParameterName = "prMessageResult";
                    prMessageResultParameter.Direction = ParameterDirection.Output;
                    prMessageResultParameter.DbType = DbType.String;
                    prMessageResultParameter.Size = 250;
                    prMessageResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prMessageResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prCodeError"].Value != null && !(cmd.Parameters["prCodeError"].Value is System.DBNull))
                        prCodeError = (int)Convert.ChangeType(cmd.Parameters["prCodeError"].Value, typeof(int));
                    else
                        prCodeError = default(int);

                    if (cmd.Parameters["prMessageResult"].Value != null && !(cmd.Parameters["prMessageResult"].Value is System.DBNull))
                        prMessageResult = (string)Convert.ChangeType(cmd.Parameters["prMessageResult"].Value, typeof(string));
                    else
                        prMessageResult = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?, string>(prCodeError, prMessageResult);
        }

        public decimal? FnCalculateExchangeRate (int? prCompanyID, DateTime? prDate, int? prCurrencySourceID, int? prCurrencyTargetID, decimal? prValorToConvert)
        {

            decimal? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_calculate_exchange_rate";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDateParameter = cmd.CreateParameter();
                    prDateParameter.ParameterName = "prDate";
                    prDateParameter.Direction = ParameterDirection.Input;
                    prDateParameter.DbType = DbType.DateTime;
                    if (prDate.HasValue)
                    {
                        prDateParameter.Value = prDate.Value;
                    }
                    else
                    {
                        prDateParameter.Size = -1;
                        prDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateParameter);

                    DbParameter prCurrencySourceIDParameter = cmd.CreateParameter();
                    prCurrencySourceIDParameter.ParameterName = "prCurrencySourceID";
                    prCurrencySourceIDParameter.Direction = ParameterDirection.Input;
                    prCurrencySourceIDParameter.DbType = DbType.Int32;
                    prCurrencySourceIDParameter.Precision = 10;
                    prCurrencySourceIDParameter.Scale = 0;
                    if (prCurrencySourceID.HasValue)
                    {
                        prCurrencySourceIDParameter.Value = prCurrencySourceID.Value;
                    }
                    else
                    {
                        prCurrencySourceIDParameter.Size = -1;
                        prCurrencySourceIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencySourceIDParameter);

                    DbParameter prCurrencyTargetIDParameter = cmd.CreateParameter();
                    prCurrencyTargetIDParameter.ParameterName = "prCurrencyTargetID";
                    prCurrencyTargetIDParameter.Direction = ParameterDirection.Input;
                    prCurrencyTargetIDParameter.DbType = DbType.Int32;
                    prCurrencyTargetIDParameter.Precision = 10;
                    prCurrencyTargetIDParameter.Scale = 0;
                    if (prCurrencyTargetID.HasValue)
                    {
                        prCurrencyTargetIDParameter.Value = prCurrencyTargetID.Value;
                    }
                    else
                    {
                        prCurrencyTargetIDParameter.Size = -1;
                        prCurrencyTargetIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyTargetIDParameter);

                    DbParameter prValorToConvertParameter = cmd.CreateParameter();
                    prValorToConvertParameter.ParameterName = "prValorToConvert";
                    prValorToConvertParameter.Direction = ParameterDirection.Input;
                    prValorToConvertParameter.DbType = DbType.Decimal;
                    prValorToConvertParameter.Precision = 21;
                    prValorToConvertParameter.Scale = 11;
                    if (prValorToConvert.HasValue)
                    {
                        prValorToConvertParameter.Value = prValorToConvert.Value;
                    }
                    else
                    {
                        prValorToConvertParameter.Size = -1;
                        prValorToConvertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prValorToConvertParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Decimal;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (decimal)Convert.ChangeType(returnValueParameter.Value, typeof(decimal));
                    else
                        result = default(decimal?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<decimal?> FnCalculateExchangeRateAsync (int? prCompanyID, DateTime? prDate, int? prCurrencySourceID, int? prCurrencyTargetID, decimal? prValorToConvert)
        {

            decimal? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_calculate_exchange_rate";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDateParameter = cmd.CreateParameter();
                    prDateParameter.ParameterName = "prDate";
                    prDateParameter.Direction = ParameterDirection.Input;
                    prDateParameter.DbType = DbType.DateTime;
                    if (prDate.HasValue)
                    {
                        prDateParameter.Value = prDate.Value;
                    }
                    else
                    {
                        prDateParameter.Size = -1;
                        prDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateParameter);

                    DbParameter prCurrencySourceIDParameter = cmd.CreateParameter();
                    prCurrencySourceIDParameter.ParameterName = "prCurrencySourceID";
                    prCurrencySourceIDParameter.Direction = ParameterDirection.Input;
                    prCurrencySourceIDParameter.DbType = DbType.Int32;
                    prCurrencySourceIDParameter.Precision = 10;
                    prCurrencySourceIDParameter.Scale = 0;
                    if (prCurrencySourceID.HasValue)
                    {
                        prCurrencySourceIDParameter.Value = prCurrencySourceID.Value;
                    }
                    else
                    {
                        prCurrencySourceIDParameter.Size = -1;
                        prCurrencySourceIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencySourceIDParameter);

                    DbParameter prCurrencyTargetIDParameter = cmd.CreateParameter();
                    prCurrencyTargetIDParameter.ParameterName = "prCurrencyTargetID";
                    prCurrencyTargetIDParameter.Direction = ParameterDirection.Input;
                    prCurrencyTargetIDParameter.DbType = DbType.Int32;
                    prCurrencyTargetIDParameter.Precision = 10;
                    prCurrencyTargetIDParameter.Scale = 0;
                    if (prCurrencyTargetID.HasValue)
                    {
                        prCurrencyTargetIDParameter.Value = prCurrencyTargetID.Value;
                    }
                    else
                    {
                        prCurrencyTargetIDParameter.Size = -1;
                        prCurrencyTargetIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyTargetIDParameter);

                    DbParameter prValorToConvertParameter = cmd.CreateParameter();
                    prValorToConvertParameter.ParameterName = "prValorToConvert";
                    prValorToConvertParameter.Direction = ParameterDirection.Input;
                    prValorToConvertParameter.DbType = DbType.Decimal;
                    prValorToConvertParameter.Precision = 21;
                    prValorToConvertParameter.Scale = 11;
                    if (prValorToConvert.HasValue)
                    {
                        prValorToConvertParameter.Value = prValorToConvert.Value;
                    }
                    else
                    {
                        prValorToConvertParameter.Size = -1;
                        prValorToConvertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prValorToConvertParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Decimal;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (decimal)Convert.ChangeType(returnValueParameter.Value, typeof(decimal));
                    else
                        result = default(decimal?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Obtener el nivel de acceso de un usuario
        /// </summary>
        public int? FnGetAccessReady (int? prCompanyID, int? prUserID, int? prElementID, int? prRowCreatedBy, int? prRowCreatedAt)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_get_access_ready";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prElementIDParameter = cmd.CreateParameter();
                    prElementIDParameter.ParameterName = "prElementID";
                    prElementIDParameter.Direction = ParameterDirection.Input;
                    prElementIDParameter.DbType = DbType.Int32;
                    prElementIDParameter.Precision = 10;
                    prElementIDParameter.Scale = 0;
                    if (prElementID.HasValue)
                    {
                        prElementIDParameter.Value = prElementID.Value;
                    }
                    else
                    {
                        prElementIDParameter.Size = -1;
                        prElementIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prElementIDParameter);

                    DbParameter prRowCreatedByParameter = cmd.CreateParameter();
                    prRowCreatedByParameter.ParameterName = "prRowCreatedBy";
                    prRowCreatedByParameter.Direction = ParameterDirection.Input;
                    prRowCreatedByParameter.DbType = DbType.Int32;
                    prRowCreatedByParameter.Precision = 10;
                    prRowCreatedByParameter.Scale = 0;
                    if (prRowCreatedBy.HasValue)
                    {
                        prRowCreatedByParameter.Value = prRowCreatedBy.Value;
                    }
                    else
                    {
                        prRowCreatedByParameter.Size = -1;
                        prRowCreatedByParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRowCreatedByParameter);

                    DbParameter prRowCreatedAtParameter = cmd.CreateParameter();
                    prRowCreatedAtParameter.ParameterName = "prRowCreatedAt";
                    prRowCreatedAtParameter.Direction = ParameterDirection.Input;
                    prRowCreatedAtParameter.DbType = DbType.Int32;
                    prRowCreatedAtParameter.Precision = 10;
                    prRowCreatedAtParameter.Scale = 0;
                    if (prRowCreatedAt.HasValue)
                    {
                        prRowCreatedAtParameter.Value = prRowCreatedAt.Value;
                    }
                    else
                    {
                        prRowCreatedAtParameter.Size = -1;
                        prRowCreatedAtParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRowCreatedAtParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Obtener el nivel de acceso de un usuario
        /// </summary>
        public async Task<int?> FnGetAccessReadyAsync (int? prCompanyID, int? prUserID, int? prElementID, int? prRowCreatedBy, int? prRowCreatedAt)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_get_access_ready";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prElementIDParameter = cmd.CreateParameter();
                    prElementIDParameter.ParameterName = "prElementID";
                    prElementIDParameter.Direction = ParameterDirection.Input;
                    prElementIDParameter.DbType = DbType.Int32;
                    prElementIDParameter.Precision = 10;
                    prElementIDParameter.Scale = 0;
                    if (prElementID.HasValue)
                    {
                        prElementIDParameter.Value = prElementID.Value;
                    }
                    else
                    {
                        prElementIDParameter.Size = -1;
                        prElementIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prElementIDParameter);

                    DbParameter prRowCreatedByParameter = cmd.CreateParameter();
                    prRowCreatedByParameter.ParameterName = "prRowCreatedBy";
                    prRowCreatedByParameter.Direction = ParameterDirection.Input;
                    prRowCreatedByParameter.DbType = DbType.Int32;
                    prRowCreatedByParameter.Precision = 10;
                    prRowCreatedByParameter.Scale = 0;
                    if (prRowCreatedBy.HasValue)
                    {
                        prRowCreatedByParameter.Value = prRowCreatedBy.Value;
                    }
                    else
                    {
                        prRowCreatedByParameter.Size = -1;
                        prRowCreatedByParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRowCreatedByParameter);

                    DbParameter prRowCreatedAtParameter = cmd.CreateParameter();
                    prRowCreatedAtParameter.ParameterName = "prRowCreatedAt";
                    prRowCreatedAtParameter.Direction = ParameterDirection.Input;
                    prRowCreatedAtParameter.DbType = DbType.Int32;
                    prRowCreatedAtParameter.Precision = 10;
                    prRowCreatedAtParameter.Scale = 0;
                    if (prRowCreatedAt.HasValue)
                    {
                        prRowCreatedAtParameter.Value = prRowCreatedAt.Value;
                    }
                    else
                    {
                        prRowCreatedAtParameter.Size = -1;
                        prRowCreatedAtParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRowCreatedAtParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? FnGetProviderId (int? prCompanyID, int? prUserID)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_get_provider_id";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> FnGetProviderIdAsync (int? prCompanyID, int? prUserID)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_get_provider_id";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public string FnInsertarStringN (string texto, string marcador, int? n)
        {

            string result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_insertar_string_n";

                    DbParameter textoParameter = cmd.CreateParameter();
                    textoParameter.ParameterName = "texto";
                    textoParameter.Direction = ParameterDirection.Input;
                    textoParameter.DbType = DbType.String;
                    textoParameter.Size = 2147483647;
                    if (texto != null)
                    {
                        textoParameter.Value = texto;
                    }
                    else
                    {
                        textoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(textoParameter);

                    DbParameter marcadorParameter = cmd.CreateParameter();
                    marcadorParameter.ParameterName = "marcador";
                    marcadorParameter.Direction = ParameterDirection.Input;
                    marcadorParameter.DbType = DbType.String;
                    marcadorParameter.Size = 50;
                    if (marcador != null)
                    {
                        marcadorParameter.Value = marcador;
                    }
                    else
                    {
                        marcadorParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(marcadorParameter);

                    DbParameter nParameter = cmd.CreateParameter();
                    nParameter.ParameterName = "n";
                    nParameter.Direction = ParameterDirection.Input;
                    nParameter.DbType = DbType.Int32;
                    nParameter.Precision = 10;
                    nParameter.Scale = 0;
                    if (n.HasValue)
                    {
                        nParameter.Value = n.Value;
                    }
                    else
                    {
                        nParameter.Size = -1;
                        nParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.String;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (string)Convert.ChangeType(returnValueParameter.Value, typeof(string));
                    else
                        result = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<string> FnInsertarStringNAsync (string texto, string marcador, int? n)
        {

            string result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_insertar_string_n";

                    DbParameter textoParameter = cmd.CreateParameter();
                    textoParameter.ParameterName = "texto";
                    textoParameter.Direction = ParameterDirection.Input;
                    textoParameter.DbType = DbType.String;
                    textoParameter.Size = 2147483647;
                    if (texto != null)
                    {
                        textoParameter.Value = texto;
                    }
                    else
                    {
                        textoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(textoParameter);

                    DbParameter marcadorParameter = cmd.CreateParameter();
                    marcadorParameter.ParameterName = "marcador";
                    marcadorParameter.Direction = ParameterDirection.Input;
                    marcadorParameter.DbType = DbType.String;
                    marcadorParameter.Size = 50;
                    if (marcador != null)
                    {
                        marcadorParameter.Value = marcador;
                    }
                    else
                    {
                        marcadorParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(marcadorParameter);

                    DbParameter nParameter = cmd.CreateParameter();
                    nParameter.ParameterName = "n";
                    nParameter.Direction = ParameterDirection.Input;
                    nParameter.DbType = DbType.Int32;
                    nParameter.Precision = 10;
                    nParameter.Scale = 0;
                    if (n.HasValue)
                    {
                        nParameter.Value = n.Value;
                    }
                    else
                    {
                        nParameter.Size = -1;
                        nParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(nParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.String;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (string)Convert.ChangeType(returnValueParameter.Value, typeof(string));
                    else
                        result = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public PrAppInvoiceSurveryGetReportMultipleResult PrAppInvoiceSurveryGetReport (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prDateTimeStart, DateTime? prDateTimeFinish, string prSurveryKey)
        {

            PrAppInvoiceSurveryGetReportMultipleResult result = new PrAppInvoiceSurveryGetReportMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_app_invoice_survery_get_report";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDateTimeStartParameter = cmd.CreateParameter();
                    prDateTimeStartParameter.ParameterName = "prDateTimeStart";
                    prDateTimeStartParameter.Direction = ParameterDirection.Input;
                    prDateTimeStartParameter.DbType = DbType.DateTime;
                    if (prDateTimeStart.HasValue)
                    {
                        prDateTimeStartParameter.Value = prDateTimeStart.Value;
                    }
                    else
                    {
                        prDateTimeStartParameter.Size = -1;
                        prDateTimeStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeStartParameter);

                    DbParameter prDateTimeFinishParameter = cmd.CreateParameter();
                    prDateTimeFinishParameter.ParameterName = "prDateTimeFinish";
                    prDateTimeFinishParameter.Direction = ParameterDirection.Input;
                    prDateTimeFinishParameter.DbType = DbType.DateTime;
                    if (prDateTimeFinish.HasValue)
                    {
                        prDateTimeFinishParameter.Value = prDateTimeFinish.Value;
                    }
                    else
                    {
                        prDateTimeFinishParameter.Size = -1;
                        prDateTimeFinishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeFinishParameter);

                    DbParameter prSurveryKeyParameter = cmd.CreateParameter();
                    prSurveryKeyParameter.ParameterName = "prSurveryKey";
                    prSurveryKeyParameter.Direction = ParameterDirection.Input;
                    prSurveryKeyParameter.DbType = DbType.String;
                    prSurveryKeyParameter.Size = 50;
                    if (prSurveryKey != null)
                    {
                        prSurveryKeyParameter.Value = prSurveryKey;
                    }
                    else
                    {
                        prSurveryKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prSurveryKeyParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAppInvoiceSurveryGetReportResult resultRow = new PrAppInvoiceSurveryGetReportResult();
                            if (fieldNames.Contains(@"transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                resultRow.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            if (fieldNames.Contains(@"transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                resultRow.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                resultRow.TransactionOn = null;
                            if (fieldNames.Contains(@"customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                resultRow.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            if (fieldNames.Contains(@"Cliente") && !reader.IsDBNull(reader.GetOrdinal(@"Cliente")))
                                resultRow.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cliente")), typeof(string));
                            else
                                resultRow.Cliente = null;
                            if (fieldNames.Contains(@"itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                resultRow.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));
                            if (fieldNames.Contains(@"name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                resultRow.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));
                            if (fieldNames.Contains(@"quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                resultRow.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                resultRow.Quantity = null;
                            if (fieldNames.Contains(@"Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                resultRow.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));
                            if (fieldNames.Contains(@"amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                resultRow.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                resultRow.Amount = null;
                            result.PrAppInvoiceSurveryGetReportResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAppInvoiceSurveryGetReportResult1 resultRow = new PrAppInvoiceSurveryGetReportResult1();
                            if (fieldNames.Contains(@"Codigo") && !reader.IsDBNull(reader.GetOrdinal(@"Codigo")))
                                resultRow.Codigo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Codigo")), typeof(string));
                            if (fieldNames.Contains(@"Descripcion") && !reader.IsDBNull(reader.GetOrdinal(@"Descripcion")))
                                resultRow.Descripcion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Descripcion")), typeof(string));
                            if (fieldNames.Contains(@"Cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"Cantidad")))
                                resultRow.Cantidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cantidad")), typeof(decimal));
                            else
                                resultRow.Cantidad = null;
                            if (fieldNames.Contains(@"Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                resultRow.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            result.PrAppInvoiceSurveryGetReportResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAppInvoiceSurveryGetReportResult2 resultRow = new PrAppInvoiceSurveryGetReportResult2();
                            if (fieldNames.Contains(@"customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                resultRow.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            if (fieldNames.Contains(@"Nombres") && !reader.IsDBNull(reader.GetOrdinal(@"Nombres")))
                                resultRow.Nombres = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Nombres")), typeof(string));
                            else
                                resultRow.Nombres = null;
                            if (fieldNames.Contains(@"Apellidos") && !reader.IsDBNull(reader.GetOrdinal(@"Apellidos")))
                                resultRow.Apellidos = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Apellidos")), typeof(string));
                            else
                                resultRow.Apellidos = null;
                            if (fieldNames.Contains(@"Cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"Cantidad")))
                                resultRow.Cantidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cantidad")), typeof(decimal));
                            else
                                resultRow.Cantidad = null;
                            if (fieldNames.Contains(@"Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                resultRow.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            result.PrAppInvoiceSurveryGetReportResult2s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAppInvoiceSurveryGetReportResult3 resultRow = new PrAppInvoiceSurveryGetReportResult3();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                resultRow.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            if (fieldNames.Contains(@"Cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"Cantidad")))
                                resultRow.Cantidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cantidad")), typeof(decimal));
                            else
                                resultRow.Cantidad = null;
                            if (fieldNames.Contains(@"Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                resultRow.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            result.PrAppInvoiceSurveryGetReportResult3s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<PrAppInvoiceSurveryGetReportMultipleResult> PrAppInvoiceSurveryGetReportAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prDateTimeStart, DateTime? prDateTimeFinish, string prSurveryKey)
        {

            PrAppInvoiceSurveryGetReportMultipleResult result = new PrAppInvoiceSurveryGetReportMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_app_invoice_survery_get_report";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDateTimeStartParameter = cmd.CreateParameter();
                    prDateTimeStartParameter.ParameterName = "prDateTimeStart";
                    prDateTimeStartParameter.Direction = ParameterDirection.Input;
                    prDateTimeStartParameter.DbType = DbType.DateTime;
                    if (prDateTimeStart.HasValue)
                    {
                        prDateTimeStartParameter.Value = prDateTimeStart.Value;
                    }
                    else
                    {
                        prDateTimeStartParameter.Size = -1;
                        prDateTimeStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeStartParameter);

                    DbParameter prDateTimeFinishParameter = cmd.CreateParameter();
                    prDateTimeFinishParameter.ParameterName = "prDateTimeFinish";
                    prDateTimeFinishParameter.Direction = ParameterDirection.Input;
                    prDateTimeFinishParameter.DbType = DbType.DateTime;
                    if (prDateTimeFinish.HasValue)
                    {
                        prDateTimeFinishParameter.Value = prDateTimeFinish.Value;
                    }
                    else
                    {
                        prDateTimeFinishParameter.Size = -1;
                        prDateTimeFinishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeFinishParameter);

                    DbParameter prSurveryKeyParameter = cmd.CreateParameter();
                    prSurveryKeyParameter.ParameterName = "prSurveryKey";
                    prSurveryKeyParameter.Direction = ParameterDirection.Input;
                    prSurveryKeyParameter.DbType = DbType.String;
                    prSurveryKeyParameter.Size = 50;
                    if (prSurveryKey != null)
                    {
                        prSurveryKeyParameter.Value = prSurveryKey;
                    }
                    else
                    {
                        prSurveryKeyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prSurveryKeyParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAppInvoiceSurveryGetReportResult resultRow = new PrAppInvoiceSurveryGetReportResult();
                            if (fieldNames.Contains(@"transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                resultRow.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            if (fieldNames.Contains(@"transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                resultRow.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                resultRow.TransactionOn = null;
                            if (fieldNames.Contains(@"customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                resultRow.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            if (fieldNames.Contains(@"Cliente") && !reader.IsDBNull(reader.GetOrdinal(@"Cliente")))
                                resultRow.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cliente")), typeof(string));
                            else
                                resultRow.Cliente = null;
                            if (fieldNames.Contains(@"itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                resultRow.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));
                            if (fieldNames.Contains(@"name") && !reader.IsDBNull(reader.GetOrdinal(@"name")))
                                resultRow.Name = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"name")), typeof(string));
                            if (fieldNames.Contains(@"quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                resultRow.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                resultRow.Quantity = null;
                            if (fieldNames.Contains(@"Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                resultRow.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));
                            if (fieldNames.Contains(@"amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                resultRow.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                resultRow.Amount = null;
                            result.PrAppInvoiceSurveryGetReportResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAppInvoiceSurveryGetReportResult1 resultRow = new PrAppInvoiceSurveryGetReportResult1();
                            if (fieldNames.Contains(@"Codigo") && !reader.IsDBNull(reader.GetOrdinal(@"Codigo")))
                                resultRow.Codigo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Codigo")), typeof(string));
                            if (fieldNames.Contains(@"Descripcion") && !reader.IsDBNull(reader.GetOrdinal(@"Descripcion")))
                                resultRow.Descripcion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Descripcion")), typeof(string));
                            if (fieldNames.Contains(@"Cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"Cantidad")))
                                resultRow.Cantidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cantidad")), typeof(decimal));
                            else
                                resultRow.Cantidad = null;
                            if (fieldNames.Contains(@"Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                resultRow.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            result.PrAppInvoiceSurveryGetReportResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAppInvoiceSurveryGetReportResult2 resultRow = new PrAppInvoiceSurveryGetReportResult2();
                            if (fieldNames.Contains(@"customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                resultRow.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));
                            if (fieldNames.Contains(@"Nombres") && !reader.IsDBNull(reader.GetOrdinal(@"Nombres")))
                                resultRow.Nombres = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Nombres")), typeof(string));
                            else
                                resultRow.Nombres = null;
                            if (fieldNames.Contains(@"Apellidos") && !reader.IsDBNull(reader.GetOrdinal(@"Apellidos")))
                                resultRow.Apellidos = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Apellidos")), typeof(string));
                            else
                                resultRow.Apellidos = null;
                            if (fieldNames.Contains(@"Cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"Cantidad")))
                                resultRow.Cantidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cantidad")), typeof(decimal));
                            else
                                resultRow.Cantidad = null;
                            if (fieldNames.Contains(@"Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                resultRow.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            result.PrAppInvoiceSurveryGetReportResult2s.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrAppInvoiceSurveryGetReportResult3 resultRow = new PrAppInvoiceSurveryGetReportResult3();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                resultRow.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));
                            if (fieldNames.Contains(@"Cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"Cantidad")))
                                resultRow.Cantidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cantidad")), typeof(decimal));
                            else
                                resultRow.Cantidad = null;
                            if (fieldNames.Contains(@"Moneda") && !reader.IsDBNull(reader.GetOrdinal(@"Moneda")))
                                resultRow.Moneda = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Moneda")), typeof(string));
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            result.PrAppInvoiceSurveryGetReportResult3s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public PrCxcGetReportInvoiceByCustomerMultipleResult PrCxcGetReportInvoiceByCustomer (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prDateTimeStart, DateTime? prDateTimeFinish, string prCustomerEntityID)
        {

            PrCxcGetReportInvoiceByCustomerMultipleResult result = new PrCxcGetReportInvoiceByCustomerMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_invoice_by_customer";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDateTimeStartParameter = cmd.CreateParameter();
                    prDateTimeStartParameter.ParameterName = "prDateTimeStart";
                    prDateTimeStartParameter.Direction = ParameterDirection.Input;
                    prDateTimeStartParameter.DbType = DbType.DateTime;
                    if (prDateTimeStart.HasValue)
                    {
                        prDateTimeStartParameter.Value = prDateTimeStart.Value;
                    }
                    else
                    {
                        prDateTimeStartParameter.Size = -1;
                        prDateTimeStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeStartParameter);

                    DbParameter prDateTimeFinishParameter = cmd.CreateParameter();
                    prDateTimeFinishParameter.ParameterName = "prDateTimeFinish";
                    prDateTimeFinishParameter.Direction = ParameterDirection.Input;
                    prDateTimeFinishParameter.DbType = DbType.DateTime;
                    if (prDateTimeFinish.HasValue)
                    {
                        prDateTimeFinishParameter.Value = prDateTimeFinish.Value;
                    }
                    else
                    {
                        prDateTimeFinishParameter.Size = -1;
                        prDateTimeFinishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeFinishParameter);

                    DbParameter prCustomerEntityIDParameter = cmd.CreateParameter();
                    prCustomerEntityIDParameter.ParameterName = "prCustomerEntityID";
                    prCustomerEntityIDParameter.Direction = ParameterDirection.Input;
                    prCustomerEntityIDParameter.DbType = DbType.String;
                    prCustomerEntityIDParameter.Size = 50;
                    if (prCustomerEntityID != null)
                    {
                        prCustomerEntityIDParameter.Value = prCustomerEntityID;
                    }
                    else
                    {
                        prCustomerEntityIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerEntityIDParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportInvoiceByCustomerResult resultRow = new PrCxcGetReportInvoiceByCustomerResult();
                            if (fieldNames.Contains(@"Cliente") && !reader.IsDBNull(reader.GetOrdinal(@"Cliente")))
                                resultRow.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cliente")), typeof(string));
                            if (fieldNames.Contains(@"Nombre") && !reader.IsDBNull(reader.GetOrdinal(@"Nombre")))
                                resultRow.Nombre = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Nombre")), typeof(string));
                            else
                                resultRow.Nombre = null;
                            if (fieldNames.Contains(@"Identificacion") && !reader.IsDBNull(reader.GetOrdinal(@"Identificacion")))
                                resultRow.Identificacion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Identificacion")), typeof(string));
                            result.PrCxcGetReportInvoiceByCustomerResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportInvoiceByCustomerResult1 resultRow = new PrCxcGetReportInvoiceByCustomerResult1();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Factura") && !reader.IsDBNull(reader.GetOrdinal(@"Factura")))
                                resultRow.Factura = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Factura")), typeof(string));
                            if (fieldNames.Contains(@"Codigo") && !reader.IsDBNull(reader.GetOrdinal(@"Codigo")))
                                resultRow.Codigo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Codigo")), typeof(string));
                            if (fieldNames.Contains(@"Producto") && !reader.IsDBNull(reader.GetOrdinal(@"Producto")))
                                resultRow.Producto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Producto")), typeof(string));
                            if (fieldNames.Contains(@"Cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"Cantidad")))
                                resultRow.Cantidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cantidad")), typeof(decimal));
                            else
                                resultRow.Cantidad = null;
                            if (fieldNames.Contains(@"Precio") && !reader.IsDBNull(reader.GetOrdinal(@"Precio")))
                                resultRow.Precio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Precio")), typeof(decimal));
                            else
                                resultRow.Precio = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            result.PrCxcGetReportInvoiceByCustomerResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<PrCxcGetReportInvoiceByCustomerMultipleResult> PrCxcGetReportInvoiceByCustomerAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prDateTimeStart, DateTime? prDateTimeFinish, string prCustomerEntityID)
        {

            PrCxcGetReportInvoiceByCustomerMultipleResult result = new PrCxcGetReportInvoiceByCustomerMultipleResult();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_invoice_by_customer";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDateTimeStartParameter = cmd.CreateParameter();
                    prDateTimeStartParameter.ParameterName = "prDateTimeStart";
                    prDateTimeStartParameter.Direction = ParameterDirection.Input;
                    prDateTimeStartParameter.DbType = DbType.DateTime;
                    if (prDateTimeStart.HasValue)
                    {
                        prDateTimeStartParameter.Value = prDateTimeStart.Value;
                    }
                    else
                    {
                        prDateTimeStartParameter.Size = -1;
                        prDateTimeStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeStartParameter);

                    DbParameter prDateTimeFinishParameter = cmd.CreateParameter();
                    prDateTimeFinishParameter.ParameterName = "prDateTimeFinish";
                    prDateTimeFinishParameter.Direction = ParameterDirection.Input;
                    prDateTimeFinishParameter.DbType = DbType.DateTime;
                    if (prDateTimeFinish.HasValue)
                    {
                        prDateTimeFinishParameter.Value = prDateTimeFinish.Value;
                    }
                    else
                    {
                        prDateTimeFinishParameter.Size = -1;
                        prDateTimeFinishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeFinishParameter);

                    DbParameter prCustomerEntityIDParameter = cmd.CreateParameter();
                    prCustomerEntityIDParameter.ParameterName = "prCustomerEntityID";
                    prCustomerEntityIDParameter.Direction = ParameterDirection.Input;
                    prCustomerEntityIDParameter.DbType = DbType.String;
                    prCustomerEntityIDParameter.Size = 50;
                    if (prCustomerEntityID != null)
                    {
                        prCustomerEntityIDParameter.Value = prCustomerEntityID;
                    }
                    else
                    {
                        prCustomerEntityIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerEntityIDParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        string[] fieldNames;
                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportInvoiceByCustomerResult resultRow = new PrCxcGetReportInvoiceByCustomerResult();
                            if (fieldNames.Contains(@"Cliente") && !reader.IsDBNull(reader.GetOrdinal(@"Cliente")))
                                resultRow.Cliente = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cliente")), typeof(string));
                            if (fieldNames.Contains(@"Nombre") && !reader.IsDBNull(reader.GetOrdinal(@"Nombre")))
                                resultRow.Nombre = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Nombre")), typeof(string));
                            else
                                resultRow.Nombre = null;
                            if (fieldNames.Contains(@"Identificacion") && !reader.IsDBNull(reader.GetOrdinal(@"Identificacion")))
                                resultRow.Identificacion = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Identificacion")), typeof(string));
                            result.PrCxcGetReportInvoiceByCustomerResults.Add(resultRow);
                        }
                        reader.NextResult();

                        fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();

                        while (reader.Read())
                        {

                            PrCxcGetReportInvoiceByCustomerResult1 resultRow = new PrCxcGetReportInvoiceByCustomerResult1();
                            if (fieldNames.Contains(@"Fecha") && !reader.IsDBNull(reader.GetOrdinal(@"Fecha")))
                                resultRow.Fecha = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Fecha")), typeof(System.DateTime));
                            else
                                resultRow.Fecha = null;
                            if (fieldNames.Contains(@"Factura") && !reader.IsDBNull(reader.GetOrdinal(@"Factura")))
                                resultRow.Factura = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Factura")), typeof(string));
                            if (fieldNames.Contains(@"Codigo") && !reader.IsDBNull(reader.GetOrdinal(@"Codigo")))
                                resultRow.Codigo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Codigo")), typeof(string));
                            if (fieldNames.Contains(@"Producto") && !reader.IsDBNull(reader.GetOrdinal(@"Producto")))
                                resultRow.Producto = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Producto")), typeof(string));
                            if (fieldNames.Contains(@"Cantidad") && !reader.IsDBNull(reader.GetOrdinal(@"Cantidad")))
                                resultRow.Cantidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Cantidad")), typeof(decimal));
                            else
                                resultRow.Cantidad = null;
                            if (fieldNames.Contains(@"Precio") && !reader.IsDBNull(reader.GetOrdinal(@"Precio")))
                                resultRow.Precio = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Precio")), typeof(decimal));
                            else
                                resultRow.Precio = null;
                            if (fieldNames.Contains(@"Monto") && !reader.IsDBNull(reader.GetOrdinal(@"Monto")))
                                resultRow.Monto = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Monto")), typeof(decimal));
                            else
                                resultRow.Monto = null;
                            result.PrCxcGetReportInvoiceByCustomerResult1s.Add(resultRow);
                        }
                        reader.NextResult();

                    }

                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public List<PrSalesGetReportSalesDetailResult> PrCxcGetReportSalesCustomer (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            List<PrSalesGetReportSalesDetailResult> result = new List<PrSalesGetReportSalesDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_sales_customer";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 250;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesDetailResult row = new PrSalesGetReportSalesDetailResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("dayOfMonth") && !reader.IsDBNull(reader.GetOrdinal(@"dayOfMonth")))
                                row.DayOfMonth = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayOfMonth")), typeof(int));
                            else
                                row.DayOfMonth = null;

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("zone") && !reader.IsDBNull(reader.GetOrdinal(@"zone")))
                                row.Zone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"zone")), typeof(string));
                            else
                                row.Zone = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("itemNameLog") && !reader.IsDBNull(reader.GetOrdinal(@"itemNameLog")))
                                row.ItemNameLog = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNameLog")), typeof(string));
                            else
                                row.ItemNameLog = null;

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("Agent") && !reader.IsDBNull(reader.GetOrdinal(@"Agent")))
                                row.Agent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Agent")), typeof(string));

                            if (fieldNames.Contains("Commentary") && !reader.IsDBNull(reader.GetOrdinal(@"Commentary")))
                                row.Commentary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Commentary")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("amountConIva") && !reader.IsDBNull(reader.GetOrdinal(@"amountConIva")))
                                row.AmountConIva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountConIva")), typeof(decimal));
                            else
                                row.AmountConIva = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            if (fieldNames.Contains("iva") && !reader.IsDBNull(reader.GetOrdinal(@"iva")))
                                row.Iva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"iva")), typeof(decimal));
                            else
                                row.Iva = null;

                            if (fieldNames.Contains("ivaTotal") && !reader.IsDBNull(reader.GetOrdinal(@"ivaTotal")))
                                row.IvaTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ivaTotal")), typeof(decimal));
                            else
                                row.IvaTotal = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("amountCommision") && !reader.IsDBNull(reader.GetOrdinal(@"amountCommision")))
                                row.AmountCommision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCommision")), typeof(decimal));
                            else
                                row.AmountCommision = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task<List<PrSalesGetReportSalesDetailResult>> PrCxcGetReportSalesCustomerAsync (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            List<PrSalesGetReportSalesDetailResult> result = new List<PrSalesGetReportSalesDetailResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_sales_customer";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 250;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesDetailResult row = new PrSalesGetReportSalesDetailResult();
                            if (fieldNames.Contains("userID") && !reader.IsDBNull(reader.GetOrdinal(@"userID")))
                                row.UserID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"userID")), typeof(int));

                            if (fieldNames.Contains("nickname") && !reader.IsDBNull(reader.GetOrdinal(@"nickname")))
                                row.Nickname = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nickname")), typeof(string));
                            else
                                row.Nickname = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("transactionOn") && !reader.IsDBNull(reader.GetOrdinal(@"transactionOn")))
                                row.TransactionOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionOn")), typeof(System.DateTime));
                            else
                                row.TransactionOn = null;

                            if (fieldNames.Contains("createdOn") && !reader.IsDBNull(reader.GetOrdinal(@"createdOn")))
                                row.CreatedOn = (System.DateTime)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"createdOn")), typeof(System.DateTime));
                            else
                                row.CreatedOn = null;

                            if (fieldNames.Contains("dayOfMonth") && !reader.IsDBNull(reader.GetOrdinal(@"dayOfMonth")))
                                row.DayOfMonth = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"dayOfMonth")), typeof(int));
                            else
                                row.DayOfMonth = null;

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("note") && !reader.IsDBNull(reader.GetOrdinal(@"note")))
                                row.Note = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"note")), typeof(string));
                            else
                                row.Note = null;

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("zone") && !reader.IsDBNull(reader.GetOrdinal(@"zone")))
                                row.Zone = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"zone")), typeof(string));
                            else
                                row.Zone = null;

                            if (fieldNames.Contains("itemNumber") && !reader.IsDBNull(reader.GetOrdinal(@"itemNumber")))
                                row.ItemNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNumber")), typeof(string));

                            if (fieldNames.Contains("itemName") && !reader.IsDBNull(reader.GetOrdinal(@"itemName")))
                                row.ItemName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemName")), typeof(string));

                            if (fieldNames.Contains("itemNameLog") && !reader.IsDBNull(reader.GetOrdinal(@"itemNameLog")))
                                row.ItemNameLog = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"itemNameLog")), typeof(string));
                            else
                                row.ItemNameLog = null;

                            if (fieldNames.Contains("phoneNumber") && !reader.IsDBNull(reader.GetOrdinal(@"phoneNumber")))
                                row.PhoneNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"phoneNumber")), typeof(string));
                            else
                                row.PhoneNumber = null;

                            if (fieldNames.Contains("Agent") && !reader.IsDBNull(reader.GetOrdinal(@"Agent")))
                                row.Agent = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Agent")), typeof(string));

                            if (fieldNames.Contains("Commentary") && !reader.IsDBNull(reader.GetOrdinal(@"Commentary")))
                                row.Commentary = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Commentary")), typeof(string));

                            if (fieldNames.Contains("nameCategory") && !reader.IsDBNull(reader.GetOrdinal(@"nameCategory")))
                                row.NameCategory = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"nameCategory")), typeof(string));

                            if (fieldNames.Contains("quantity") && !reader.IsDBNull(reader.GetOrdinal(@"quantity")))
                                row.Quantity = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"quantity")), typeof(decimal));
                            else
                                row.Quantity = null;

                            if (fieldNames.Contains("unitaryCost") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryCost")))
                                row.UnitaryCost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryCost")), typeof(decimal));
                            else
                                row.UnitaryCost = null;

                            if (fieldNames.Contains("unitaryPrice") && !reader.IsDBNull(reader.GetOrdinal(@"unitaryPrice")))
                                row.UnitaryPrice = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"unitaryPrice")), typeof(decimal));
                            else
                                row.UnitaryPrice = null;

                            if (fieldNames.Contains("cost") && !reader.IsDBNull(reader.GetOrdinal(@"cost")))
                                row.Cost = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"cost")), typeof(decimal));
                            else
                                row.Cost = null;

                            if (fieldNames.Contains("amount") && !reader.IsDBNull(reader.GetOrdinal(@"amount")))
                                row.Amount = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amount")), typeof(decimal));
                            else
                                row.Amount = null;

                            if (fieldNames.Contains("amountConIva") && !reader.IsDBNull(reader.GetOrdinal(@"amountConIva")))
                                row.AmountConIva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountConIva")), typeof(decimal));
                            else
                                row.AmountConIva = null;

                            if (fieldNames.Contains("utilidad") && !reader.IsDBNull(reader.GetOrdinal(@"utilidad")))
                                row.Utilidad = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"utilidad")), typeof(decimal));
                            else
                                row.Utilidad = null;

                            if (fieldNames.Contains("iva") && !reader.IsDBNull(reader.GetOrdinal(@"iva")))
                                row.Iva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"iva")), typeof(decimal));
                            else
                                row.Iva = null;

                            if (fieldNames.Contains("ivaTotal") && !reader.IsDBNull(reader.GetOrdinal(@"ivaTotal")))
                                row.IvaTotal = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"ivaTotal")), typeof(decimal));
                            else
                                row.IvaTotal = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("currencyID") && !reader.IsDBNull(reader.GetOrdinal(@"currencyID")))
                                row.CurrencyID = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyID")), typeof(int));
                            else
                                row.CurrencyID = null;

                            if (fieldNames.Contains("exchangeRate") && !reader.IsDBNull(reader.GetOrdinal(@"exchangeRate")))
                                row.ExchangeRate = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"exchangeRate")), typeof(decimal));
                            else
                                row.ExchangeRate = null;

                            if (fieldNames.Contains("amountCommision") && !reader.IsDBNull(reader.GetOrdinal(@"amountCommision")))
                                row.AmountCommision = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountCommision")), typeof(decimal));
                            else
                                row.AmountCommision = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas por metodo de pago
        /// </summary>
        public List<PrSalesGetReportSalesByPaymentResult> PrSalesGetReportSalesByPayment (int? prCompanyID, int? prUserID, string prTokenID, string prDateTimeStart, string prDateTimeFinish)
        {

            List<PrSalesGetReportSalesByPaymentResult> result = new List<PrSalesGetReportSalesByPaymentResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_by_payment";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prDateTimeStartParameter = cmd.CreateParameter();
                    prDateTimeStartParameter.ParameterName = "prDateTimeStart";
                    prDateTimeStartParameter.Direction = ParameterDirection.Input;
                    prDateTimeStartParameter.DbType = DbType.String;
                    prDateTimeStartParameter.Size = 50;
                    if (prDateTimeStart != null)
                    {
                        prDateTimeStartParameter.Value = prDateTimeStart;
                    }
                    else
                    {
                        prDateTimeStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeStartParameter);

                    DbParameter prDateTimeFinishParameter = cmd.CreateParameter();
                    prDateTimeFinishParameter.ParameterName = "prDateTimeFinish";
                    prDateTimeFinishParameter.Direction = ParameterDirection.Input;
                    prDateTimeFinishParameter.DbType = DbType.String;
                    prDateTimeFinishParameter.Size = 50;
                    if (prDateTimeFinish != null)
                    {
                        prDateTimeFinishParameter.Value = prDateTimeFinish;
                    }
                    else
                    {
                        prDateTimeFinishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeFinishParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesByPaymentResult row = new PrSalesGetReportSalesByPaymentResult();
                            if (fieldNames.Contains("Banco") && !reader.IsDBNull(reader.GetOrdinal(@"Banco")))
                                row.Banco = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Banco")), typeof(string));
                            else
                                row.Banco = null;

                            if (fieldNames.Contains("Transferencia Cordoba") && !reader.IsDBNull(reader.GetOrdinal(@"Transferencia Cordoba")))
                                row.TransferenciaCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Transferencia Cordoba")), typeof(decimal));
                            else
                                row.TransferenciaCordoba = null;

                            if (fieldNames.Contains("Transferencia Dólar") && !reader.IsDBNull(reader.GetOrdinal(@"Transferencia Dólar")))
                                row.TransferenciaDólar = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Transferencia Dólar")), typeof(decimal));
                            else
                                row.TransferenciaDólar = null;

                            if (fieldNames.Contains("Tarjeta Cordoba") && !reader.IsDBNull(reader.GetOrdinal(@"Tarjeta Cordoba")))
                                row.TarjetaCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tarjeta Cordoba")), typeof(decimal));
                            else
                                row.TarjetaCordoba = null;

                            if (fieldNames.Contains("Tarjeta Dólar") && !reader.IsDBNull(reader.GetOrdinal(@"Tarjeta Dólar")))
                                row.TarjetaDólar = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tarjeta Dólar")), typeof(decimal));
                            else
                                row.TarjetaDólar = null;

                            if (fieldNames.Contains("Efectivo Cordoba") && !reader.IsDBNull(reader.GetOrdinal(@"Efectivo Cordoba")))
                                row.EfectivoCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Efectivo Cordoba")), typeof(decimal));
                            else
                                row.EfectivoCordoba = null;

                            if (fieldNames.Contains("Efectivo Dólar") && !reader.IsDBNull(reader.GetOrdinal(@"Efectivo Dólar")))
                                row.EfectivoDólar = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Efectivo Dólar")), typeof(decimal));
                            else
                                row.EfectivoDólar = null;

                            if (fieldNames.Contains("Puntos") && !reader.IsDBNull(reader.GetOrdinal(@"Puntos")))
                                row.Puntos = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Puntos")), typeof(decimal));
                            else
                                row.Puntos = null;

                            if (fieldNames.Contains("Total Cordoba") && !reader.IsDBNull(reader.GetOrdinal(@"Total Cordoba")))
                                row.TotalCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Total Cordoba")), typeof(decimal));
                            else
                                row.TotalCordoba = null;

                            if (fieldNames.Contains("Total Dólar") && !reader.IsDBNull(reader.GetOrdinal(@"Total Dólar")))
                                row.TotalDólar = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Total Dólar")), typeof(decimal));
                            else
                                row.TotalDólar = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Detalle de ventas por metodo de pago
        /// </summary>
        public async Task<List<PrSalesGetReportSalesByPaymentResult>> PrSalesGetReportSalesByPaymentAsync (int? prCompanyID, int? prUserID, string prTokenID, string prDateTimeStart, string prDateTimeFinish)
        {

            List<PrSalesGetReportSalesByPaymentResult> result = new List<PrSalesGetReportSalesByPaymentResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_by_payment";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prDateTimeStartParameter = cmd.CreateParameter();
                    prDateTimeStartParameter.ParameterName = "prDateTimeStart";
                    prDateTimeStartParameter.Direction = ParameterDirection.Input;
                    prDateTimeStartParameter.DbType = DbType.String;
                    prDateTimeStartParameter.Size = 50;
                    if (prDateTimeStart != null)
                    {
                        prDateTimeStartParameter.Value = prDateTimeStart;
                    }
                    else
                    {
                        prDateTimeStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeStartParameter);

                    DbParameter prDateTimeFinishParameter = cmd.CreateParameter();
                    prDateTimeFinishParameter.ParameterName = "prDateTimeFinish";
                    prDateTimeFinishParameter.Direction = ParameterDirection.Input;
                    prDateTimeFinishParameter.DbType = DbType.String;
                    prDateTimeFinishParameter.Size = 50;
                    if (prDateTimeFinish != null)
                    {
                        prDateTimeFinishParameter.Value = prDateTimeFinish;
                    }
                    else
                    {
                        prDateTimeFinishParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateTimeFinishParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReportSalesByPaymentResult row = new PrSalesGetReportSalesByPaymentResult();
                            if (fieldNames.Contains("Banco") && !reader.IsDBNull(reader.GetOrdinal(@"Banco")))
                                row.Banco = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Banco")), typeof(string));
                            else
                                row.Banco = null;

                            if (fieldNames.Contains("Transferencia Cordoba") && !reader.IsDBNull(reader.GetOrdinal(@"Transferencia Cordoba")))
                                row.TransferenciaCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Transferencia Cordoba")), typeof(decimal));
                            else
                                row.TransferenciaCordoba = null;

                            if (fieldNames.Contains("Transferencia Dólar") && !reader.IsDBNull(reader.GetOrdinal(@"Transferencia Dólar")))
                                row.TransferenciaDólar = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Transferencia Dólar")), typeof(decimal));
                            else
                                row.TransferenciaDólar = null;

                            if (fieldNames.Contains("Tarjeta Cordoba") && !reader.IsDBNull(reader.GetOrdinal(@"Tarjeta Cordoba")))
                                row.TarjetaCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tarjeta Cordoba")), typeof(decimal));
                            else
                                row.TarjetaCordoba = null;

                            if (fieldNames.Contains("Tarjeta Dólar") && !reader.IsDBNull(reader.GetOrdinal(@"Tarjeta Dólar")))
                                row.TarjetaDólar = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Tarjeta Dólar")), typeof(decimal));
                            else
                                row.TarjetaDólar = null;

                            if (fieldNames.Contains("Efectivo Cordoba") && !reader.IsDBNull(reader.GetOrdinal(@"Efectivo Cordoba")))
                                row.EfectivoCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Efectivo Cordoba")), typeof(decimal));
                            else
                                row.EfectivoCordoba = null;

                            if (fieldNames.Contains("Efectivo Dólar") && !reader.IsDBNull(reader.GetOrdinal(@"Efectivo Dólar")))
                                row.EfectivoDólar = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Efectivo Dólar")), typeof(decimal));
                            else
                                row.EfectivoDólar = null;

                            if (fieldNames.Contains("Puntos") && !reader.IsDBNull(reader.GetOrdinal(@"Puntos")))
                                row.Puntos = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Puntos")), typeof(decimal));
                            else
                                row.Puntos = null;

                            if (fieldNames.Contains("Total Cordoba") && !reader.IsDBNull(reader.GetOrdinal(@"Total Cordoba")))
                                row.TotalCordoba = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Total Cordoba")), typeof(decimal));
                            else
                                row.TotalCordoba = null;

                            if (fieldNames.Contains("Total Dólar") && !reader.IsDBNull(reader.GetOrdinal(@"Total Dólar")))
                                row.TotalDólar = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"Total Dólar")), typeof(decimal));
                            else
                                row.TotalDólar = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public List<PrSalesGetReporSalesByReferenceResult> PrSalesGetReporSalesByReference (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            List<PrSalesGetReporSalesByReferenceResult> result = new List<PrSalesGetReporSalesByReferenceResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_repor_sales_by_reference";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    using (IDataReader reader = cmd.ExecuteReader())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReporSalesByReferenceResult row = new PrSalesGetReporSalesByReferenceResult();
                            if (fieldNames.Contains("doctor") && !reader.IsDBNull(reader.GetOrdinal(@"doctor")))
                                row.Doctor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"doctor")), typeof(string));
                            else
                                row.Doctor = null;

                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));
                            else
                                row.EmployerName = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("amountConIva") && !reader.IsDBNull(reader.GetOrdinal(@"amountConIva")))
                                row.AmountConIva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountConIva")), typeof(decimal));
                            else
                                row.AmountConIva = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<List<PrSalesGetReporSalesByReferenceResult>> PrSalesGetReporSalesByReferenceAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            List<PrSalesGetReporSalesByReferenceResult> result = new List<PrSalesGetReporSalesByReferenceResult>();
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_repor_sales_by_reference";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    using (IDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        var fieldNames = Enumerable.Range(0, reader.FieldCount).Select(i => reader.GetName(i)).ToArray();
                        while (reader.Read())
                        {
                            PrSalesGetReporSalesByReferenceResult row = new PrSalesGetReporSalesByReferenceResult();
                            if (fieldNames.Contains("doctor") && !reader.IsDBNull(reader.GetOrdinal(@"doctor")))
                                row.Doctor = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"doctor")), typeof(string));
                            else
                                row.Doctor = null;

                            if (fieldNames.Contains("employerName") && !reader.IsDBNull(reader.GetOrdinal(@"employerName")))
                                row.EmployerName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"employerName")), typeof(string));
                            else
                                row.EmployerName = null;

                            if (fieldNames.Contains("transactionNumber") && !reader.IsDBNull(reader.GetOrdinal(@"transactionNumber")))
                                row.TransactionNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"transactionNumber")), typeof(string));

                            if (fieldNames.Contains("tipo") && !reader.IsDBNull(reader.GetOrdinal(@"tipo")))
                                row.Tipo = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"tipo")), typeof(string));

                            if (fieldNames.Contains("currencyName") && !reader.IsDBNull(reader.GetOrdinal(@"currencyName")))
                                row.CurrencyName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"currencyName")), typeof(string));

                            if (fieldNames.Contains("customerNumber") && !reader.IsDBNull(reader.GetOrdinal(@"customerNumber")))
                                row.CustomerNumber = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"customerNumber")), typeof(string));

                            if (fieldNames.Contains("legalName") && !reader.IsDBNull(reader.GetOrdinal(@"legalName")))
                                row.LegalName = (string)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"legalName")), typeof(string));
                            else
                                row.LegalName = null;

                            if (fieldNames.Contains("varCurrencyReporte") && !reader.IsDBNull(reader.GetOrdinal(@"varCurrencyReporte")))
                                row.VarCurrencyReporte = (int)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"varCurrencyReporte")), typeof(int));
                            else
                                row.VarCurrencyReporte = null;

                            if (fieldNames.Contains("amountConIva") && !reader.IsDBNull(reader.GetOrdinal(@"amountConIva")))
                                row.AmountConIva = (decimal)Convert.ChangeType(reader.GetValue(reader.GetOrdinal(@"amountConIva")), typeof(decimal));
                            else
                                row.AmountConIva = null;

                            result.Add(row);
                        }
                    }
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public string FnGetNombreDelDia (DateTime? fecha)
        {

            string result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_get_nombre_del_dia";

                    DbParameter fechaParameter = cmd.CreateParameter();
                    fechaParameter.ParameterName = "fecha";
                    fechaParameter.Direction = ParameterDirection.Input;
                    fechaParameter.DbType = DbType.DateTime;
                    if (fecha.HasValue)
                    {
                        fechaParameter.Value = fecha.Value;
                    }
                    else
                    {
                        fechaParameter.Size = -1;
                        fechaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.String;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (string)Convert.ChangeType(returnValueParameter.Value, typeof(string));
                    else
                        result = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<string> FnGetNombreDelDiaAsync (DateTime? fecha)
        {

            string result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_get_nombre_del_dia";

                    DbParameter fechaParameter = cmd.CreateParameter();
                    fechaParameter.ParameterName = "fecha";
                    fechaParameter.Direction = ParameterDirection.Input;
                    fechaParameter.DbType = DbType.DateTime;
                    if (fecha.HasValue)
                    {
                        fechaParameter.Value = fecha.Value;
                    }
                    else
                    {
                        fechaParameter.Size = -1;
                        fechaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(fechaParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.String;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (string)Convert.ChangeType(returnValueParameter.Value, typeof(string));
                    else
                        result = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public string FnTranslateTransactionMasterInfoAmount (int? prCompanyID, int? prFlavorID, int? prTransactionID, string prCurrencyFunction, string prCurrencyReport, string prCurrencyReportConvert, int? prTransactionCurrencyID, decimal? prExchangeRate, decimal? prTransactionAmount, decimal? prTransactionAmountExt, string prField)
        {

            string result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_translate_transaction_master_info_amounts";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prFlavorIDParameter = cmd.CreateParameter();
                    prFlavorIDParameter.ParameterName = "prFlavorID";
                    prFlavorIDParameter.Direction = ParameterDirection.Input;
                    prFlavorIDParameter.DbType = DbType.Int32;
                    prFlavorIDParameter.Precision = 10;
                    prFlavorIDParameter.Scale = 0;
                    if (prFlavorID.HasValue)
                    {
                        prFlavorIDParameter.Value = prFlavorID.Value;
                    }
                    else
                    {
                        prFlavorIDParameter.Size = -1;
                        prFlavorIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFlavorIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prCurrencyFunctionParameter = cmd.CreateParameter();
                    prCurrencyFunctionParameter.ParameterName = "prCurrencyFunction";
                    prCurrencyFunctionParameter.Direction = ParameterDirection.Input;
                    prCurrencyFunctionParameter.DbType = DbType.String;
                    prCurrencyFunctionParameter.Size = 50;
                    if (prCurrencyFunction != null)
                    {
                        prCurrencyFunctionParameter.Value = prCurrencyFunction;
                    }
                    else
                    {
                        prCurrencyFunctionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyFunctionParameter);

                    DbParameter prCurrencyReportParameter = cmd.CreateParameter();
                    prCurrencyReportParameter.ParameterName = "prCurrencyReport";
                    prCurrencyReportParameter.Direction = ParameterDirection.Input;
                    prCurrencyReportParameter.DbType = DbType.String;
                    prCurrencyReportParameter.Size = 50;
                    if (prCurrencyReport != null)
                    {
                        prCurrencyReportParameter.Value = prCurrencyReport;
                    }
                    else
                    {
                        prCurrencyReportParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyReportParameter);

                    DbParameter prCurrencyReportConvertParameter = cmd.CreateParameter();
                    prCurrencyReportConvertParameter.ParameterName = "prCurrencyReportConvert";
                    prCurrencyReportConvertParameter.Direction = ParameterDirection.Input;
                    prCurrencyReportConvertParameter.DbType = DbType.String;
                    prCurrencyReportConvertParameter.Size = 50;
                    if (prCurrencyReportConvert != null)
                    {
                        prCurrencyReportConvertParameter.Value = prCurrencyReportConvert;
                    }
                    else
                    {
                        prCurrencyReportConvertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyReportConvertParameter);

                    DbParameter prTransactionCurrencyIDParameter = cmd.CreateParameter();
                    prTransactionCurrencyIDParameter.ParameterName = "prTransactionCurrencyID";
                    prTransactionCurrencyIDParameter.Direction = ParameterDirection.Input;
                    prTransactionCurrencyIDParameter.DbType = DbType.Int32;
                    prTransactionCurrencyIDParameter.Precision = 10;
                    prTransactionCurrencyIDParameter.Scale = 0;
                    if (prTransactionCurrencyID.HasValue)
                    {
                        prTransactionCurrencyIDParameter.Value = prTransactionCurrencyID.Value;
                    }
                    else
                    {
                        prTransactionCurrencyIDParameter.Size = -1;
                        prTransactionCurrencyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionCurrencyIDParameter);

                    DbParameter prExchangeRateParameter = cmd.CreateParameter();
                    prExchangeRateParameter.ParameterName = "prExchangeRate";
                    prExchangeRateParameter.Direction = ParameterDirection.Input;
                    prExchangeRateParameter.DbType = DbType.Decimal;
                    prExchangeRateParameter.Precision = 18;
                    prExchangeRateParameter.Scale = 8;
                    if (prExchangeRate.HasValue)
                    {
                        prExchangeRateParameter.Value = prExchangeRate.Value;
                    }
                    else
                    {
                        prExchangeRateParameter.Size = -1;
                        prExchangeRateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prExchangeRateParameter);

                    DbParameter prTransactionAmountParameter = cmd.CreateParameter();
                    prTransactionAmountParameter.ParameterName = "prTransactionAmount";
                    prTransactionAmountParameter.Direction = ParameterDirection.Input;
                    prTransactionAmountParameter.DbType = DbType.Decimal;
                    prTransactionAmountParameter.Precision = 18;
                    prTransactionAmountParameter.Scale = 6;
                    if (prTransactionAmount.HasValue)
                    {
                        prTransactionAmountParameter.Value = prTransactionAmount.Value;
                    }
                    else
                    {
                        prTransactionAmountParameter.Size = -1;
                        prTransactionAmountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionAmountParameter);

                    DbParameter prTransactionAmountExtParameter = cmd.CreateParameter();
                    prTransactionAmountExtParameter.ParameterName = "prTransactionAmountExt";
                    prTransactionAmountExtParameter.Direction = ParameterDirection.Input;
                    prTransactionAmountExtParameter.DbType = DbType.Decimal;
                    prTransactionAmountExtParameter.Precision = 18;
                    prTransactionAmountExtParameter.Scale = 6;
                    if (prTransactionAmountExt.HasValue)
                    {
                        prTransactionAmountExtParameter.Value = prTransactionAmountExt.Value;
                    }
                    else
                    {
                        prTransactionAmountExtParameter.Size = -1;
                        prTransactionAmountExtParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionAmountExtParameter);

                    DbParameter prFieldParameter = cmd.CreateParameter();
                    prFieldParameter.ParameterName = "prField";
                    prFieldParameter.Direction = ParameterDirection.Input;
                    prFieldParameter.DbType = DbType.String;
                    prFieldParameter.Size = 30;
                    if (prField != null)
                    {
                        prFieldParameter.Value = prField;
                    }
                    else
                    {
                        prFieldParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFieldParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.String;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (string)Convert.ChangeType(returnValueParameter.Value, typeof(string));
                    else
                        result = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<string> FnTranslateTransactionMasterInfoAmountAsync (int? prCompanyID, int? prFlavorID, int? prTransactionID, string prCurrencyFunction, string prCurrencyReport, string prCurrencyReportConvert, int? prTransactionCurrencyID, decimal? prExchangeRate, decimal? prTransactionAmount, decimal? prTransactionAmountExt, string prField)
        {

            string result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_translate_transaction_master_info_amounts";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prFlavorIDParameter = cmd.CreateParameter();
                    prFlavorIDParameter.ParameterName = "prFlavorID";
                    prFlavorIDParameter.Direction = ParameterDirection.Input;
                    prFlavorIDParameter.DbType = DbType.Int32;
                    prFlavorIDParameter.Precision = 10;
                    prFlavorIDParameter.Scale = 0;
                    if (prFlavorID.HasValue)
                    {
                        prFlavorIDParameter.Value = prFlavorID.Value;
                    }
                    else
                    {
                        prFlavorIDParameter.Size = -1;
                        prFlavorIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFlavorIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prCurrencyFunctionParameter = cmd.CreateParameter();
                    prCurrencyFunctionParameter.ParameterName = "prCurrencyFunction";
                    prCurrencyFunctionParameter.Direction = ParameterDirection.Input;
                    prCurrencyFunctionParameter.DbType = DbType.String;
                    prCurrencyFunctionParameter.Size = 50;
                    if (prCurrencyFunction != null)
                    {
                        prCurrencyFunctionParameter.Value = prCurrencyFunction;
                    }
                    else
                    {
                        prCurrencyFunctionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyFunctionParameter);

                    DbParameter prCurrencyReportParameter = cmd.CreateParameter();
                    prCurrencyReportParameter.ParameterName = "prCurrencyReport";
                    prCurrencyReportParameter.Direction = ParameterDirection.Input;
                    prCurrencyReportParameter.DbType = DbType.String;
                    prCurrencyReportParameter.Size = 50;
                    if (prCurrencyReport != null)
                    {
                        prCurrencyReportParameter.Value = prCurrencyReport;
                    }
                    else
                    {
                        prCurrencyReportParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyReportParameter);

                    DbParameter prCurrencyReportConvertParameter = cmd.CreateParameter();
                    prCurrencyReportConvertParameter.ParameterName = "prCurrencyReportConvert";
                    prCurrencyReportConvertParameter.Direction = ParameterDirection.Input;
                    prCurrencyReportConvertParameter.DbType = DbType.String;
                    prCurrencyReportConvertParameter.Size = 50;
                    if (prCurrencyReportConvert != null)
                    {
                        prCurrencyReportConvertParameter.Value = prCurrencyReportConvert;
                    }
                    else
                    {
                        prCurrencyReportConvertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyReportConvertParameter);

                    DbParameter prTransactionCurrencyIDParameter = cmd.CreateParameter();
                    prTransactionCurrencyIDParameter.ParameterName = "prTransactionCurrencyID";
                    prTransactionCurrencyIDParameter.Direction = ParameterDirection.Input;
                    prTransactionCurrencyIDParameter.DbType = DbType.Int32;
                    prTransactionCurrencyIDParameter.Precision = 10;
                    prTransactionCurrencyIDParameter.Scale = 0;
                    if (prTransactionCurrencyID.HasValue)
                    {
                        prTransactionCurrencyIDParameter.Value = prTransactionCurrencyID.Value;
                    }
                    else
                    {
                        prTransactionCurrencyIDParameter.Size = -1;
                        prTransactionCurrencyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionCurrencyIDParameter);

                    DbParameter prExchangeRateParameter = cmd.CreateParameter();
                    prExchangeRateParameter.ParameterName = "prExchangeRate";
                    prExchangeRateParameter.Direction = ParameterDirection.Input;
                    prExchangeRateParameter.DbType = DbType.Decimal;
                    prExchangeRateParameter.Precision = 18;
                    prExchangeRateParameter.Scale = 8;
                    if (prExchangeRate.HasValue)
                    {
                        prExchangeRateParameter.Value = prExchangeRate.Value;
                    }
                    else
                    {
                        prExchangeRateParameter.Size = -1;
                        prExchangeRateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prExchangeRateParameter);

                    DbParameter prTransactionAmountParameter = cmd.CreateParameter();
                    prTransactionAmountParameter.ParameterName = "prTransactionAmount";
                    prTransactionAmountParameter.Direction = ParameterDirection.Input;
                    prTransactionAmountParameter.DbType = DbType.Decimal;
                    prTransactionAmountParameter.Precision = 18;
                    prTransactionAmountParameter.Scale = 6;
                    if (prTransactionAmount.HasValue)
                    {
                        prTransactionAmountParameter.Value = prTransactionAmount.Value;
                    }
                    else
                    {
                        prTransactionAmountParameter.Size = -1;
                        prTransactionAmountParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionAmountParameter);

                    DbParameter prTransactionAmountExtParameter = cmd.CreateParameter();
                    prTransactionAmountExtParameter.ParameterName = "prTransactionAmountExt";
                    prTransactionAmountExtParameter.Direction = ParameterDirection.Input;
                    prTransactionAmountExtParameter.DbType = DbType.Decimal;
                    prTransactionAmountExtParameter.Precision = 18;
                    prTransactionAmountExtParameter.Scale = 6;
                    if (prTransactionAmountExt.HasValue)
                    {
                        prTransactionAmountExtParameter.Value = prTransactionAmountExt.Value;
                    }
                    else
                    {
                        prTransactionAmountExtParameter.Size = -1;
                        prTransactionAmountExtParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionAmountExtParameter);

                    DbParameter prFieldParameter = cmd.CreateParameter();
                    prFieldParameter.ParameterName = "prField";
                    prFieldParameter.Direction = ParameterDirection.Input;
                    prFieldParameter.DbType = DbType.String;
                    prFieldParameter.Size = 30;
                    if (prField != null)
                    {
                        prFieldParameter.Value = prField;
                    }
                    else
                    {
                        prFieldParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFieldParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.String;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (string)Convert.ChangeType(returnValueParameter.Value, typeof(string));
                    else
                        result = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.TbAccountMapping(modelBuilder);
            this.CustomizeTbAccountMapping(modelBuilder);

            this.TbAccountingBalanceMapping(modelBuilder);
            this.CustomizeTbAccountingBalanceMapping(modelBuilder);

            this.TbAccountingBalanceTempMapping(modelBuilder);
            this.CustomizeTbAccountingBalanceTempMapping(modelBuilder);

            this.TbAccountingCycleMapping(modelBuilder);
            this.CustomizeTbAccountingCycleMapping(modelBuilder);

            this.TbAccountingPeriodMapping(modelBuilder);
            this.CustomizeTbAccountingPeriodMapping(modelBuilder);

            this.TbAccountLevelMapping(modelBuilder);
            this.CustomizeTbAccountLevelMapping(modelBuilder);

            this.TbAccountTmpMapping(modelBuilder);
            this.CustomizeTbAccountTmpMapping(modelBuilder);

            this.TbAccountTypeMapping(modelBuilder);
            this.CustomizeTbAccountTypeMapping(modelBuilder);

            this.TbBankMapping(modelBuilder);
            this.CustomizeTbBankMapping(modelBuilder);

            this.TbBankChequeMapping(modelBuilder);
            this.CustomizeTbBankChequeMapping(modelBuilder);

            this.TbBibliaMapping(modelBuilder);
            this.CustomizeTbBibliaMapping(modelBuilder);

            this.TbBranchMapping(modelBuilder);
            this.CustomizeTbBranchMapping(modelBuilder);

            this.TbCallerMapping(modelBuilder);
            this.CustomizeTbCallerMapping(modelBuilder);

            this.TbCashBoxMapping(modelBuilder);
            this.CustomizeTbCashBoxMapping(modelBuilder);

            this.TbCashBoxSessionMapping(modelBuilder);
            this.CustomizeTbCashBoxSessionMapping(modelBuilder);

            this.TbCashBoxSessionTransactionMasterMapping(modelBuilder);
            this.CustomizeTbCashBoxSessionTransactionMasterMapping(modelBuilder);

            this.TbCashBoxUserMapping(modelBuilder);
            this.CustomizeTbCashBoxUserMapping(modelBuilder);

            this.TbCatalogMapping(modelBuilder);
            this.CustomizeTbCatalogMapping(modelBuilder);

            this.TbCatalogItemMapping(modelBuilder);
            this.CustomizeTbCatalogItemMapping(modelBuilder);

            this.TbCatalogItemConvertionMapping(modelBuilder);
            this.CustomizeTbCatalogItemConvertionMapping(modelBuilder);

            this.TbCenterCostMapping(modelBuilder);
            this.CustomizeTbCenterCostMapping(modelBuilder);

            this.TbCompanyMapping(modelBuilder);
            this.CustomizeTbCompanyMapping(modelBuilder);

            this.TbCompanyComponentMapping(modelBuilder);
            this.CustomizeTbCompanyComponentMapping(modelBuilder);

            this.TbCompanyComponentConceptMapping(modelBuilder);
            this.CustomizeTbCompanyComponentConceptMapping(modelBuilder);

            this.TbCompanyComponentFlavorMapping(modelBuilder);
            this.CustomizeTbCompanyComponentFlavorMapping(modelBuilder);

            this.TbCompanyComponentItemDataviewMapping(modelBuilder);
            this.CustomizeTbCompanyComponentItemDataviewMapping(modelBuilder);

            this.TbCompanyCurrencyMapping(modelBuilder);
            this.CustomizeTbCompanyCurrencyMapping(modelBuilder);

            this.TbCompanyDataviewMapping(modelBuilder);
            this.CustomizeTbCompanyDataviewMapping(modelBuilder);

            this.TbCompanyDefaultDataviewMapping(modelBuilder);
            this.CustomizeTbCompanyDefaultDataviewMapping(modelBuilder);

            this.TbCompanyParameterMapping(modelBuilder);
            this.CustomizeTbCompanyParameterMapping(modelBuilder);

            this.TbCompanySubelementAuditMapping(modelBuilder);
            this.CustomizeTbCompanySubelementAuditMapping(modelBuilder);

            this.TbCompanySubelementObligatoryMapping(modelBuilder);
            this.CustomizeTbCompanySubelementObligatoryMapping(modelBuilder);

            this.TbComponentMapping(modelBuilder);
            this.CustomizeTbComponentMapping(modelBuilder);

            this.TbComponentAuditMapping(modelBuilder);
            this.CustomizeTbComponentAuditMapping(modelBuilder);

            this.TbComponentAuditDetailMapping(modelBuilder);
            this.CustomizeTbComponentAuditDetailMapping(modelBuilder);

            this.TbComponentAutorizationMapping(modelBuilder);
            this.CustomizeTbComponentAutorizationMapping(modelBuilder);

            this.TbComponentAutorizationDetailMapping(modelBuilder);
            this.CustomizeTbComponentAutorizationDetailMapping(modelBuilder);

            this.TbComponentElementMapping(modelBuilder);
            this.CustomizeTbComponentElementMapping(modelBuilder);

            this.TbCounterMapping(modelBuilder);
            this.CustomizeTbCounterMapping(modelBuilder);

            this.TbCreditLineMapping(modelBuilder);
            this.CustomizeTbCreditLineMapping(modelBuilder);

            this.TbCurrencyMapping(modelBuilder);
            this.CustomizeTbCurrencyMapping(modelBuilder);

            this.TbCustomerMapping(modelBuilder);
            this.CustomizeTbCustomerMapping(modelBuilder);

            this.TbCustomerConsultasSinRiesgoMapping(modelBuilder);
            this.CustomizeTbCustomerConsultasSinRiesgoMapping(modelBuilder);

            this.TbCustomerCreditMapping(modelBuilder);
            this.CustomizeTbCustomerCreditMapping(modelBuilder);

            this.TbCustomerCreditAmoritizationMapping(modelBuilder);
            this.CustomizeTbCustomerCreditAmoritizationMapping(modelBuilder);

            this.TbCustomerCreditClasificationMapping(modelBuilder);
            this.CustomizeTbCustomerCreditClasificationMapping(modelBuilder);

            this.TbCustomerCreditDocumentMapping(modelBuilder);
            this.CustomizeTbCustomerCreditDocumentMapping(modelBuilder);

            this.TbCustomerCreditDocumentEntityRelatedMapping(modelBuilder);
            this.CustomizeTbCustomerCreditDocumentEntityRelatedMapping(modelBuilder);

            this.TbCustomerCreditExternalSharonMapping(modelBuilder);
            this.CustomizeTbCustomerCreditExternalSharonMapping(modelBuilder);

            this.TbCustomerCreditExternalSharonTmpMapping(modelBuilder);
            this.CustomizeTbCustomerCreditExternalSharonTmpMapping(modelBuilder);

            this.TbCustomerCreditLineMapping(modelBuilder);
            this.CustomizeTbCustomerCreditLineMapping(modelBuilder);

            this.TbCustomerFrecuencyActuationMapping(modelBuilder);
            this.CustomizeTbCustomerFrecuencyActuationMapping(modelBuilder);

            this.TbCustomerPaymentMethodMapping(modelBuilder);
            this.CustomizeTbCustomerPaymentMethodMapping(modelBuilder);

            this.TbDataviewMapping(modelBuilder);
            this.CustomizeTbDataviewMapping(modelBuilder);

            this.TbElementMapping(modelBuilder);
            this.CustomizeTbElementMapping(modelBuilder);

            this.TbElementTypeMapping(modelBuilder);
            this.CustomizeTbElementTypeMapping(modelBuilder);

            this.TbEmployeeMapping(modelBuilder);
            this.CustomizeTbEmployeeMapping(modelBuilder);

            this.TbEmployeeCalendarPayMapping(modelBuilder);
            this.CustomizeTbEmployeeCalendarPayMapping(modelBuilder);

            this.TbEmployeeCalendarPayDetailMapping(modelBuilder);
            this.CustomizeTbEmployeeCalendarPayDetailMapping(modelBuilder);

            this.TbEntityMapping(modelBuilder);
            this.CustomizeTbEntityMapping(modelBuilder);

            this.TbEntityAccountMapping(modelBuilder);
            this.CustomizeTbEntityAccountMapping(modelBuilder);

            this.TbEntityEmailMapping(modelBuilder);
            this.CustomizeTbEntityEmailMapping(modelBuilder);

            this.TbEntityLocationMapping(modelBuilder);
            this.CustomizeTbEntityLocationMapping(modelBuilder);

            this.TbEntityPhoneMapping(modelBuilder);
            this.CustomizeTbEntityPhoneMapping(modelBuilder);

            this.TbErrorMapping(modelBuilder);
            this.CustomizeTbErrorMapping(modelBuilder);

            this.TbEstadisticaCategoriaMapping(modelBuilder);
            this.CustomizeTbEstadisticaCategoriaMapping(modelBuilder);

            this.TbEstadisticaClaseMapping(modelBuilder);
            this.CustomizeTbEstadisticaClaseMapping(modelBuilder);

            this.TbExchangeRateMapping(modelBuilder);
            this.CustomizeTbExchangeRateMapping(modelBuilder);

            this.TbFixedAssentMapping(modelBuilder);
            this.CustomizeTbFixedAssentMapping(modelBuilder);

            this.TbIndicatorMapping(modelBuilder);
            this.CustomizeTbIndicatorMapping(modelBuilder);

            this.TbIndicatorHistoryMapping(modelBuilder);
            this.CustomizeTbIndicatorHistoryMapping(modelBuilder);

            this.TbIndicatorTmpMapping(modelBuilder);
            this.CustomizeTbIndicatorTmpMapping(modelBuilder);

            this.TbItemMapping(modelBuilder);
            this.CustomizeTbItemMapping(modelBuilder);

            this.TbItemCategoryMapping(modelBuilder);
            this.CustomizeTbItemCategoryMapping(modelBuilder);

            this.TbItemConfigLotoMapping(modelBuilder);
            this.CustomizeTbItemConfigLotoMapping(modelBuilder);

            this.TbItemDataSheetMapping(modelBuilder);
            this.CustomizeTbItemDataSheetMapping(modelBuilder);

            this.TbItemDataSheetDetailMapping(modelBuilder);
            this.CustomizeTbItemDataSheetDetailMapping(modelBuilder);

            this.TbItemImportMapping(modelBuilder);
            this.CustomizeTbItemImportMapping(modelBuilder);

            this.TbItemSkuMapping(modelBuilder);
            this.CustomizeTbItemSkuMapping(modelBuilder);

            this.TbItemWarehouseMapping(modelBuilder);
            this.CustomizeTbItemWarehouseMapping(modelBuilder);

            this.TbItemWarehouseExpiredMapping(modelBuilder);
            this.CustomizeTbItemWarehouseExpiredMapping(modelBuilder);

            this.TbJournalEntryMapping(modelBuilder);
            this.CustomizeTbJournalEntryMapping(modelBuilder);

            this.TbJournalEntryDetailMapping(modelBuilder);
            this.CustomizeTbJournalEntryDetailMapping(modelBuilder);

            this.TbJournalEntryDetailSummaryMapping(modelBuilder);
            this.CustomizeTbJournalEntryDetailSummaryMapping(modelBuilder);

            this.TbKardexMapping(modelBuilder);
            this.CustomizeTbKardexMapping(modelBuilder);

            this.TbLegalMapping(modelBuilder);
            this.CustomizeTbLegalMapping(modelBuilder);

            this.TbListPriceMapping(modelBuilder);
            this.CustomizeTbListPriceMapping(modelBuilder);

            this.TbLogMapping(modelBuilder);
            this.CustomizeTbLogMapping(modelBuilder);

            this.TbLogMessegerMapping(modelBuilder);
            this.CustomizeTbLogMessegerMapping(modelBuilder);

            this.TbLogSessionMapping(modelBuilder);
            this.CustomizeTbLogSessionMapping(modelBuilder);

            this.TbMasterKardexTempMapping(modelBuilder);
            this.CustomizeTbMasterKardexTempMapping(modelBuilder);

            this.TbMembershipMapping(modelBuilder);
            this.CustomizeTbMembershipMapping(modelBuilder);

            this.TbMenuElementMapping(modelBuilder);
            this.CustomizeTbMenuElementMapping(modelBuilder);

            this.TbNaturaleMapping(modelBuilder);
            this.CustomizeTbNaturaleMapping(modelBuilder);

            this.TbNotificationMapping(modelBuilder);
            this.CustomizeTbNotificationMapping(modelBuilder);

            this.TbParameterMapping(modelBuilder);
            this.CustomizeTbParameterMapping(modelBuilder);

            this.TbPriceMapping(modelBuilder);
            this.CustomizeTbPriceMapping(modelBuilder);

            this.TbProviderMapping(modelBuilder);
            this.CustomizeTbProviderMapping(modelBuilder);

            this.TbProviderItemMapping(modelBuilder);
            this.CustomizeTbProviderItemMapping(modelBuilder);

            this.TbPublicCatalogMapping(modelBuilder);
            this.CustomizeTbPublicCatalogMapping(modelBuilder);

            this.TbPublicCatalogDetailMapping(modelBuilder);
            this.CustomizeTbPublicCatalogDetailMapping(modelBuilder);

            this.TbRazonesFinancierasTmpMapping(modelBuilder);
            this.CustomizeTbRazonesFinancierasTmpMapping(modelBuilder);

            this.TbRelationshipMapping(modelBuilder);
            this.CustomizeTbRelationshipMapping(modelBuilder);

            this.TbRememberMapping(modelBuilder);
            this.CustomizeTbRememberMapping(modelBuilder);

            this.TbRoleMapping(modelBuilder);
            this.CustomizeTbRoleMapping(modelBuilder);

            this.TbRoleAutorizationMapping(modelBuilder);
            this.CustomizeTbRoleAutorizationMapping(modelBuilder);

            this.TbSubelementMapping(modelBuilder);
            this.CustomizeTbSubelementMapping(modelBuilder);

            this.TbTagMapping(modelBuilder);
            this.CustomizeTbTagMapping(modelBuilder);

            this.TbTransactionMapping(modelBuilder);
            this.CustomizeTbTransactionMapping(modelBuilder);

            this.TbTransactionCausalMapping(modelBuilder);
            this.CustomizeTbTransactionCausalMapping(modelBuilder);

            this.TbTransactionConceptMapping(modelBuilder);
            this.CustomizeTbTransactionConceptMapping(modelBuilder);

            this.TbTransactionMasterMapping(modelBuilder);
            this.CustomizeTbTransactionMasterMapping(modelBuilder);

            this.TbTransactionMasterConceptMapping(modelBuilder);
            this.CustomizeTbTransactionMasterConceptMapping(modelBuilder);

            this.TbTransactionMasterDenominationMapping(modelBuilder);
            this.CustomizeTbTransactionMasterDenominationMapping(modelBuilder);

            this.TbTransactionMasterDetailMapping(modelBuilder);
            this.CustomizeTbTransactionMasterDetailMapping(modelBuilder);

            this.TbTransactionMasterDetailCreditMapping(modelBuilder);
            this.CustomizeTbTransactionMasterDetailCreditMapping(modelBuilder);

            this.TbTransactionMasterDetailReferenceMapping(modelBuilder);
            this.CustomizeTbTransactionMasterDetailReferenceMapping(modelBuilder);

            this.TbTransactionMasterDetailTempMapping(modelBuilder);
            this.CustomizeTbTransactionMasterDetailTempMapping(modelBuilder);

            this.TbTransactionMasterInfoMapping(modelBuilder);
            this.CustomizeTbTransactionMasterInfoMapping(modelBuilder);

            this.TbTransactionMasterPurchaseMapping(modelBuilder);
            this.CustomizeTbTransactionMasterPurchaseMapping(modelBuilder);

            this.TbTransactionMasterReferenceMapping(modelBuilder);
            this.CustomizeTbTransactionMasterReferenceMapping(modelBuilder);

            this.TbTransactionMasterSummaryConceptTmpMapping(modelBuilder);
            this.CustomizeTbTransactionMasterSummaryConceptTmpMapping(modelBuilder);

            this.TbTransactionProfileDetailMapping(modelBuilder);
            this.CustomizeTbTransactionProfileDetailMapping(modelBuilder);

            this.TbTransactionProfileDetailTmpMapping(modelBuilder);
            this.CustomizeTbTransactionProfileDetailTmpMapping(modelBuilder);

            this.TbTypeMenuElementMapping(modelBuilder);
            this.CustomizeTbTypeMenuElementMapping(modelBuilder);

            this.TbUserMapping(modelBuilder);
            this.CustomizeTbUserMapping(modelBuilder);

            this.TbUserPermissionMapping(modelBuilder);
            this.CustomizeTbUserPermissionMapping(modelBuilder);

            this.TbUserTagMapping(modelBuilder);
            this.CustomizeTbUserTagMapping(modelBuilder);

            this.TbUserWarehouseMapping(modelBuilder);
            this.CustomizeTbUserWarehouseMapping(modelBuilder);

            this.TbWarehouseMapping(modelBuilder);
            this.CustomizeTbWarehouseMapping(modelBuilder);

            this.TbWorkflowMapping(modelBuilder);
            this.CustomizeTbWorkflowMapping(modelBuilder);

            this.TbWorkflowStageMapping(modelBuilder);
            this.CustomizeTbWorkflowStageMapping(modelBuilder);

            this.TbWorkflowStageAffectMapping(modelBuilder);
            this.CustomizeTbWorkflowStageAffectMapping(modelBuilder);

            this.TbWorkflowStageChangeLogMapping(modelBuilder);
            this.CustomizeTbWorkflowStageChangeLogMapping(modelBuilder);

            this.TbWorkflowStageRelationMapping(modelBuilder);
            this.CustomizeTbWorkflowStageRelationMapping(modelBuilder);

            this.VwContabilidadComprobanteMapping(modelBuilder);
            this.CustomizeVwContabilidadComprobanteMapping(modelBuilder);

            this.VwCxcCustomerListRealEstateMapping(modelBuilder);
            this.CustomizeVwCxcCustomerListRealEstateMapping(modelBuilder);

            this.VwGerenciaBalanceMapping(modelBuilder);
            this.CustomizeVwGerenciaBalanceMapping(modelBuilder);

            this.VwGerenciaCustomerMapping(modelBuilder);
            this.CustomizeVwGerenciaCustomerMapping(modelBuilder);

            this.VwGerenciaDesembolsosDetalleMapping(modelBuilder);
            this.CustomizeVwGerenciaDesembolsosDetalleMapping(modelBuilder);

            this.VwGerenciaDesembolsosResumanMapping(modelBuilder);
            this.CustomizeVwGerenciaDesembolsosResumanMapping(modelBuilder);

            this.VwGerenciaEstadoResultado001Mapping(modelBuilder);
            this.CustomizeVwGerenciaEstadoResultado001Mapping(modelBuilder);

            this.VwGerenciaEstadoResultado002Mapping(modelBuilder);
            this.CustomizeVwGerenciaEstadoResultado002Mapping(modelBuilder);

            this.VwInventoryListItemRealEstateMapping(modelBuilder);
            this.CustomizeVwInventoryListItemRealEstateMapping(modelBuilder);

            this.VwSalesInventoryMapping(modelBuilder);
            this.CustomizeVwSalesInventoryMapping(modelBuilder);

            this.VwSinRiesgoReporteClienteMapping(modelBuilder);
            this.CustomizeVwSinRiesgoReporteClienteMapping(modelBuilder);

            this.VwSinRiesgoReporteCreditoMapping(modelBuilder);
            this.CustomizeVwSinRiesgoReporteCreditoMapping(modelBuilder);

            this.VwSinRiesgoReporteCreditosToSystemaMapping(modelBuilder);
            this.CustomizeVwSinRiesgoReporteCreditosToSystemaMapping(modelBuilder);

            this.VwTransaccionMasterConcept232425Mapping(modelBuilder);
            this.CustomizeVwTransaccionMasterConcept232425Mapping(modelBuilder);

            this.TbCompanyComponentRelationMapping(modelBuilder);
            this.CustomizeTbCompanyComponentRelationMapping(modelBuilder);

            this.TbCompanyPageSettingMapping(modelBuilder);
            this.CustomizeTbCompanyPageSettingMapping(modelBuilder);

            this.TbCompanyPageSettingLargeMapping(modelBuilder);
            this.CustomizeTbCompanyPageSettingLargeMapping(modelBuilder);

            this.TbReportingMapping(modelBuilder);
            this.CustomizeTbReportingMapping(modelBuilder);

            this.TbReportingParameterMapping(modelBuilder);
            this.CustomizeTbReportingParameterMapping(modelBuilder);

            this.TbReportingResultMapping(modelBuilder);
            this.CustomizeTbReportingResultMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region TbAccount Mapping

        private void TbAccountMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccount>().ToTable(@"tb_account", @"posme");
            modelBuilder.Entity<TbAccount>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccount>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.AccountTypeID).HasColumnName(@"accountTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.AccountLevelID).HasColumnName(@"accountLevelID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.ParentAccountID).HasColumnName(@"parentAccountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.AccountNumber).HasColumnName(@"accountNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccount>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccount>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.IsOperative).HasColumnName(@"isOperative").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().HasKey(@"AccountID");
        }

        partial void CustomizeTbAccountMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountingBalance Mapping

        private void TbAccountingBalanceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountingBalance>().ToTable(@"tb_accounting_balance", @"posme");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.AccountBalanceID).HasColumnName(@"accountBalanceID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.ComponentCycleID).HasColumnName(@"componentCycleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.ComponentPeriodID).HasColumnName(@"componentPeriodID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().HasKey(@"AccountBalanceID");
        }

        partial void CustomizeTbAccountingBalanceMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountingBalanceTemp Mapping

        private void TbAccountingBalanceTempMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountingBalanceTemp>().ToTable(@"tb_accounting_balance_temp", @"posme");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.AccountingBalanceTempID).HasColumnName(@"accountingBalanceTempID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.Tocken).HasColumnName(@"tocken").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.ParentAccountID).HasColumnName(@"parentAccountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.AccountNumber).HasColumnName(@"accountNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.IsOperative).HasColumnName(@"isOperative").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasPrecision(18).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.AccountTypeID).HasColumnName(@"accountTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.Naturaleza).HasColumnName(@"naturaleza").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(1).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.BalanceStart).HasColumnName(@"balanceStart").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.BalanceEnd).HasColumnName(@"balanceEnd").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalanceTemp>().HasKey(@"AccountingBalanceTempID");
        }

        partial void CustomizeTbAccountingBalanceTempMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountingCycle Mapping

        private void TbAccountingCycleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountingCycle>().ToTable(@"tb_accounting_cycle", @"posme");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.ComponentCycleID).HasColumnName(@"componentCycleID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.ComponentPeriodID).HasColumnName(@"componentPeriodID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingCycle>().HasKey(@"ComponentCycleID");
        }

        partial void CustomizeTbAccountingCycleMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountingPeriod Mapping

        private void TbAccountingPeriodMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountingPeriod>().ToTable(@"tb_accounting_period", @"posme");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.ComponentPeriodID).HasColumnName(@"componentPeriodID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingPeriod>().HasKey(@"ComponentPeriodID");
        }

        partial void CustomizeTbAccountingPeriodMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountLevel Mapping

        private void TbAccountLevelMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountLevel>().ToTable(@"tb_account_level", @"posme");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.AccountLevelID).HasColumnName(@"accountLevelID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.LengthTotal).HasColumnName(@"lengthTotal").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.Split).HasColumnName(@"split").HasColumnType(@"char").ValueGeneratedOnAdd().HasMaxLength(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.LengthGroup).HasColumnName(@"lengthGroup").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.IsOperative).HasColumnName(@"isOperative").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountLevel>().HasKey(@"AccountLevelID");
        }

        partial void CustomizeTbAccountLevelMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountTmp Mapping

        private void TbAccountTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountTmp>().ToTable(@"tb_account_tmp", @"posme");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.AccountParentID).HasColumnName(@"accountParentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.N1).HasColumnName(@"n1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.N2).HasColumnName(@"n2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.N3).HasColumnName(@"n3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.N4).HasColumnName(@"n4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.N5).HasColumnName(@"n5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.Nivel).HasColumnName(@"nivel").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.Operative).HasColumnName(@"operative").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(30, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().HasKey(@"AccountID");
        }

        partial void CustomizeTbAccountTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountType Mapping

        private void TbAccountTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountType>().ToTable(@"tb_account_type", @"posme");
            modelBuilder.Entity<TbAccountType>().Property(x => x.AccountTypeID).HasColumnName(@"accountTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountType>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountType>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(350).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountType>().Property(x => x.Naturaleza).HasColumnName(@"naturaleza").HasColumnType(@"char").IsRequired().ValueGeneratedNever().HasMaxLength(1).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountType>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountType>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountType>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountType>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbAccountType>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountType>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountType>().HasKey(@"AccountTypeID");
        }

        partial void CustomizeTbAccountTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbBank Mapping

        private void TbBankMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbBank>().ToTable(@"tb_bank", @"posme");
            modelBuilder.Entity<TbBank>().Property(x => x.BankID).HasColumnName(@"bankID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbBank>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBank>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.AccountNumber).HasColumnName(@"accountNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBank>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBank>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbBank>().Property(x => x.ManagerID).HasColumnName(@"managerID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.CardNumber).HasColumnName(@"cardNumber").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.DateExpired).HasColumnName(@"dateExpired").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.UrlBank).HasColumnName(@"urlBank").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.User).HasColumnName(@"user").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.Password).HasColumnName(@"password").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.Pin).HasColumnName(@"pin").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.Invoiceable).HasColumnName(@"invoiceable").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbBank>().Property(x => x.ComisionPos).HasColumnName(@"comisionPos").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbBank>().Property(x => x.ComisionSave).HasColumnName(@"comisionSave").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbBank>().HasKey(@"BankID");
        }

        partial void CustomizeTbBankMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbBankCheque Mapping

        private void TbBankChequeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbBankCheque>().ToTable(@"tb_bank_cheque", @"posme");
            modelBuilder.Entity<TbBankCheque>().Property(x => x.ChequeID).HasColumnName(@"chequeID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbBankCheque>().Property(x => x.ChequeNumber).HasColumnName(@"chequeNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBankCheque>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBankCheque>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBankCheque>().Property(x => x.BankID).HasColumnName(@"bankID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBankCheque>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBankCheque>().Property(x => x.ValueInitial).HasColumnName(@"valueInitial").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBankCheque>().Property(x => x.ValueCurrent).HasColumnName(@"valueCurrent").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBankCheque>().Property(x => x.ValueFinal).HasColumnName(@"valueFinal").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBankCheque>().Property(x => x.Serie).HasColumnName(@"serie").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBankCheque>().Property(x => x.ManagerID).HasColumnName(@"managerID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBankCheque>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBankCheque>().HasKey(@"ChequeID");
        }

        partial void CustomizeTbBankChequeMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbBiblia Mapping

        private void TbBibliaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbBiblia>().ToTable(@"tb_biblia", @"posme");
            modelBuilder.Entity<TbBiblia>().Property(x => x.VersiculoID).HasColumnName(@"versiculoID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbBiblia>().Property(x => x.Orden).HasColumnName(@"orden").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBiblia>().Property(x => x.Dia).HasColumnName(@"dia").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBiblia>().Property(x => x.Capitulo).HasColumnName(@"capitulo").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBiblia>().Property(x => x.Libro).HasColumnName(@"libro").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255).HasDefaultValueSql(@"'N'");
            modelBuilder.Entity<TbBiblia>().Property(x => x.Versiculo).HasColumnName(@"versiculo").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBiblia>().HasKey(@"VersiculoID");
        }

        partial void CustomizeTbBibliaMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbBranch Mapping

        private void TbBranchMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbBranch>().ToTable(@"tb_branch", @"posme");
            modelBuilder.Entity<TbBranch>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbBranch>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBranch>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbBranch>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBranch>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBranch>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1200).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBranch>().Property(x => x.Serie).HasColumnName(@"serie").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBranch>().HasKey(@"BranchID");
        }

        partial void CustomizeTbBranchMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCaller Mapping

        private void TbCallerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCaller>().ToTable(@"tb_caller", @"posme");
            modelBuilder.Entity<TbCaller>().Property(x => x.CallerID).HasColumnName(@"callerID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCaller>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCaller>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCaller>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCaller>().HasKey(@"CallerID");
        }

        partial void CustomizeTbCallerMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCashBox Mapping

        private void TbCashBoxMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCashBox>().ToTable(@"tb_cash_box", @"posme");
            modelBuilder.Entity<TbCashBox>().Property(x => x.CashBoxID).HasColumnName(@"cashBoxID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCashBox>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBox>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBox>().Property(x => x.CashBoxCode).HasColumnName(@"cashBoxCode").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(20).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCashBox>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCashBox>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(550).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCashBox>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBox>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCashBox>().HasKey(@"CashBoxID");
        }

        partial void CustomizeTbCashBoxMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCashBoxSession Mapping

        private void TbCashBoxSessionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCashBoxSession>().ToTable(@"tb_cash_box_session", @"posme");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.CashBoxSessionID).HasColumnName(@"cashBoxSessionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.CashBoxID).HasColumnName(@"cashBoxID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.TransactionMasterIDOpen).HasColumnName(@"transactionMasterIDOpen").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.TransactionMasterIDClosed).HasColumnName(@"transactionMasterIDClosed").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCashBoxSession>().HasKey(@"CashBoxSessionID");
        }

        partial void CustomizeTbCashBoxSessionMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCashBoxSessionTransactionMaster Mapping

        private void TbCashBoxSessionTransactionMasterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().ToTable(@"tb_cash_box_session_transaction_master", @"posme");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.CashBoxSessionTransactionMasterID).HasColumnName(@"cashBoxSessionTransactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.CashBoxID).HasColumnName(@"cashBoxID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.CashBoxSessionID).HasColumnName(@"cashBoxSessionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().HasKey(@"CashBoxSessionTransactionMasterID");
        }

        partial void CustomizeTbCashBoxSessionTransactionMasterMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCashBoxUser Mapping

        private void TbCashBoxUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCashBoxUser>().ToTable(@"tb_cash_box_user", @"posme");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.CashBoxUserID).HasColumnName(@"cashBoxUserID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.CashBoxID).HasColumnName(@"cashBoxID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.TypeID).HasColumnName(@"typeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.IsPrimary).HasColumnName(@"isPrimary").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().HasKey(@"CashBoxUserID");
        }

        partial void CustomizeTbCashBoxUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCatalog Mapping

        private void TbCatalogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCatalog>().ToTable(@"tb_catalog", @"posme");
            modelBuilder.Entity<TbCatalog>().Property(x => x.CatalogID).HasColumnName(@"catalogID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCatalog>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalog>().Property(x => x.Orden).HasColumnName(@"orden").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalog>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalog>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalog>().Property(x => x.PublicCatalogSystemName).HasColumnName(@"publicCatalogSystemName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalog>().HasKey(@"CatalogID");
        }

        partial void CustomizeTbCatalogMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCatalogItem Mapping

        private void TbCatalogItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCatalogItem>().ToTable(@"tb_catalog_item", @"posme");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.CatalogItemID).HasColumnName(@"catalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.CatalogID).HasColumnName(@"catalogID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Sequence).HasColumnName(@"sequence").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.ParentCatalogID).HasColumnName(@"parentCatalogID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.ParentCatalogItemID).HasColumnName(@"parentCatalogItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Ratio).HasColumnName(@"ratio").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"1.00000000");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().HasKey(@"CatalogItemID");
        }

        partial void CustomizeTbCatalogItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCatalogItemConvertion Mapping

        private void TbCatalogItemConvertionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCatalogItemConvertion>().ToTable(@"tb_catalog_item_convertion", @"posme");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.CatalogItemConvertionID).HasColumnName(@"catalogItemConvertionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.CatalogID).HasColumnName(@"catalogID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.CatalogItemID).HasColumnName(@"catalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.TargetCatalogItemID).HasColumnName(@"targetCatalogItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.Ratio).HasColumnName(@"ratio").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.RegisterDate).HasColumnName(@"registerDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItemConvertion>().HasKey(@"CatalogItemConvertionID");
        }

        partial void CustomizeTbCatalogItemConvertionMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCenterCost Mapping

        private void TbCenterCostMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCenterCost>().ToTable(@"tb_center_cost", @"posme");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCenterCost>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.AccountLevelID).HasColumnName(@"accountLevelID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.ParentAccountID).HasColumnName(@"parentAccountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.ParentClassID).HasColumnName(@"parentClassID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().HasKey(@"ClassID");
        }

        partial void CustomizeTbCenterCostMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompany Mapping

        private void TbCompanyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompany>().ToTable(@"tb_company", @"posme");
            modelBuilder.Entity<TbCompany>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompany>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbCompany>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(550).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbCompany>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompany>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbCompany>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompany>().Property(x => x.Type).HasColumnName(@"type").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255).HasDefaultValueSql(@"''");
            modelBuilder.Entity<TbCompany>().Property(x => x.Abreviature).HasColumnName(@"abreviature").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompany>().Property(x => x.NamePublic).HasColumnName(@"namePublic").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompany>().HasKey(@"CompanyID");
        }

        partial void CustomizeTbCompanyMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyComponent Mapping

        private void TbCompanyComponentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyComponent>().ToTable(@"tb_company_component", @"posme");
            modelBuilder.Entity<TbCompanyComponent>().Property(x => x.CompanyComponentID).HasColumnName(@"companyComponentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyComponent>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponent>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponent>().HasKey(@"CompanyComponentID");
        }

        partial void CustomizeTbCompanyComponentMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyComponentConcept Mapping

        private void TbCompanyComponentConceptMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyComponentConcept>().ToTable(@"tb_company_component_concept", @"posme");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.CompanyComponentConceptID).HasColumnName(@"companyComponentConceptID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.ValueIn).HasColumnName(@"valueIn").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.ValueOut).HasColumnName(@"valueOut").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentConcept>().HasKey(@"CompanyComponentConceptID");
        }

        partial void CustomizeTbCompanyComponentConceptMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyComponentFlavor Mapping

        private void TbCompanyComponentFlavorMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyComponentFlavor>().ToTable(@"tb_company_component_flavor", @"posme");
            modelBuilder.Entity<TbCompanyComponentFlavor>().Property(x => x.CompanyComponentFlavorID).HasColumnName(@"companyComponentFlavorID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyComponentFlavor>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentFlavor>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentFlavor>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentFlavor>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyComponentFlavor>().HasKey(@"CompanyComponentFlavorID");
        }

        partial void CustomizeTbCompanyComponentFlavorMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyComponentItemDataview Mapping

        private void TbCompanyComponentItemDataviewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyComponentItemDataview>().ToTable(@"tb_company_component_item_dataview", @"posme");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.CompanyComponentItemDataviewID).HasColumnName(@"companyComponentItemDataviewID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.DataViewID).HasColumnName(@"dataViewID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.CallerID).HasColumnName(@"callerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().HasKey(@"CompanyComponentItemDataviewID");
        }

        partial void CustomizeTbCompanyComponentItemDataviewMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyCurrency Mapping

        private void TbCompanyCurrencyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyCurrency>().ToTable(@"tb_company_currency", @"posme");
            modelBuilder.Entity<TbCompanyCurrency>().Property(x => x.CompanyCurrencyID).HasColumnName(@"companyCurrencyID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyCurrency>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyCurrency>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyCurrency>().Property(x => x.Simb).HasColumnName(@"simb").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(5).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyCurrency>().HasKey(@"CompanyCurrencyID");
        }

        partial void CustomizeTbCompanyCurrencyMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyDataview Mapping

        private void TbCompanyDataviewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyDataview>().ToTable(@"tb_company_dataview", @"posme");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.CompanyDataViewID).HasColumnName(@"companyDataViewID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.DataViewID).HasColumnName(@"dataViewID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.CallerID).HasColumnName(@"callerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.SqlScript).HasColumnName(@"sqlScript").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(5000).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.VisibleColumns).HasColumnName(@"visibleColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.NonVisibleColumns).HasColumnName(@"nonVisibleColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.SummaryColumns).HasColumnName(@"summaryColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.FormatColumns).HasColumnName(@"formatColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.FormatColumnsHeader).HasColumnName(@"formatColumnsHeader").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().HasKey(@"CompanyDataViewID");
        }

        partial void CustomizeTbCompanyDataviewMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyDefaultDataview Mapping

        private void TbCompanyDefaultDataviewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyDefaultDataview>().ToTable(@"tb_company_default_dataview", @"posme");
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.CompanyDefaultDataviewID).HasColumnName(@"companyDefaultDataviewID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.DataViewID).HasColumnName(@"dataViewID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.CallerID).HasColumnName(@"callerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.TargetComponentID).HasColumnName(@"targetComponentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDefaultDataview>().HasKey(@"CompanyDefaultDataviewID");
        }

        partial void CustomizeTbCompanyDefaultDataviewMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyParameter Mapping

        private void TbCompanyParameterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyParameter>().ToTable(@"tb_company_parameter", @"posme");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.CompanyParameterID).HasColumnName(@"companyParameterID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.ParameterID).HasColumnName(@"parameterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(1000).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.CustomValue).HasColumnName(@"customValue").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(300).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyParameter>().HasKey(@"CompanyParameterID");
        }

        partial void CustomizeTbCompanyParameterMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanySubelementAudit Mapping

        private void TbCompanySubelementAuditMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanySubelementAudit>().ToTable(@"tb_company_subelement_audit", @"posme");
            modelBuilder.Entity<TbCompanySubelementAudit>().Property(x => x.CompanySubelementAudiID).HasColumnName(@"companySubelementAudiID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanySubelementAudit>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementAudit>().Property(x => x.SubElementID).HasColumnName(@"subElementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementAudit>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementAudit>().HasKey(@"CompanySubelementAudiID");
        }

        partial void CustomizeTbCompanySubelementAuditMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanySubelementObligatory Mapping

        private void TbCompanySubelementObligatoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanySubelementObligatory>().ToTable(@"tb_company_subelement_obligatory", @"posme");
            modelBuilder.Entity<TbCompanySubelementObligatory>().Property(x => x.CompanySubelementObligatoryID).HasColumnName(@"companySubelementObligatoryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanySubelementObligatory>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementObligatory>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementObligatory>().Property(x => x.SubElementID).HasColumnName(@"subElementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementObligatory>().HasKey(@"CompanySubelementObligatoryID");
        }

        partial void CustomizeTbCompanySubelementObligatoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponent Mapping

        private void TbComponentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponent>().ToTable(@"tb_component", @"posme");
            modelBuilder.Entity<TbComponent>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponent>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponent>().HasKey(@"ComponentID");
        }

        partial void CustomizeTbComponentMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponentAudit Mapping

        private void TbComponentAuditMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponentAudit>().ToTable(@"tb_component_audit", @"posme");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ComponentAuditID).HasColumnName(@"componentAuditID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ElementItemID).HasColumnName(@"elementItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ModifiedOn).HasColumnName(@"modifiedOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ModifiedAt).HasColumnName(@"modifiedAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ModifiedIn).HasColumnName(@"modifiedIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ModifiedBy).HasColumnName(@"modifiedBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().HasKey(@"ComponentAuditID");
        }

        partial void CustomizeTbComponentAuditMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponentAuditDetail Mapping

        private void TbComponentAuditDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponentAuditDetail>().ToTable(@"tb_component_audit_detail", @"posme");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.ComponentAuditDetailID).HasColumnName(@"componentAuditDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.ComponentAuditID).HasColumnName(@"componentAuditID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.FieldID).HasColumnName(@"fieldID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.OldValue).HasColumnName(@"oldValue").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.NewValue).HasColumnName(@"newValue").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAuditDetail>().HasKey(@"ComponentAuditDetailID");
        }

        partial void CustomizeTbComponentAuditDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponentAutorization Mapping

        private void TbComponentAutorizationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponentAutorization>().ToTable(@"tb_component_autorization", @"posme");
            modelBuilder.Entity<TbComponentAutorization>().Property(x => x.ComponentAutorizationID).HasColumnName(@"componentAutorizationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponentAutorization>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorization>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAutorization>().HasKey(@"ComponentAutorizationID");
        }

        partial void CustomizeTbComponentAutorizationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponentAutorizationDetail Mapping

        private void TbComponentAutorizationDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponentAutorizationDetail>().ToTable(@"tb_component_autorization_detail", @"posme");
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.ComponentAurotizationDetailID).HasColumnName(@"componentAurotizationDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.ComponentAutorizationID).HasColumnName(@"componentAutorizationID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.WorkflowStageID).HasColumnName(@"workflowStageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorizationDetail>().HasKey(@"ComponentAurotizationDetailID");
        }

        partial void CustomizeTbComponentAutorizationDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponentElement Mapping

        private void TbComponentElementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponentElement>().ToTable(@"tb_component_element", @"posme");
            modelBuilder.Entity<TbComponentElement>().Property(x => x.ComponentElementID).HasColumnName(@"componentElementID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponentElement>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentElement>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentElement>().HasKey(@"ComponentElementID");
        }

        partial void CustomizeTbComponentElementMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCounter Mapping

        private void TbCounterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCounter>().ToTable(@"tb_counter", @"posme");
            modelBuilder.Entity<TbCounter>().Property(x => x.CounterID).HasColumnName(@"counterID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCounter>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCounter>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCounter>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCounter>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().Property(x => x.InitialValue).HasColumnName(@"initialValue").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().Property(x => x.CurrentValue).HasColumnName(@"currentValue").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().Property(x => x.Seed).HasColumnName(@"seed").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().Property(x => x.Serie).HasColumnName(@"serie").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().Property(x => x.Length).HasColumnName(@"length").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().HasKey(@"CounterID");
        }

        partial void CustomizeTbCounterMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCreditLine Mapping

        private void TbCreditLineMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCreditLine>().ToTable(@"tb_credit_line", @"posme");
            modelBuilder.Entity<TbCreditLine>().Property(x => x.CreditLineID).HasColumnName(@"creditLineID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCreditLine>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCreditLine>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCreditLine>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(400).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCreditLine>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCreditLine>().HasKey(@"CreditLineID");
        }

        partial void CustomizeTbCreditLineMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCurrency Mapping

        private void TbCurrencyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCurrency>().ToTable(@"tb_currency", @"posme");
            modelBuilder.Entity<TbCurrency>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCurrency>().Property(x => x.Simbol).HasColumnName(@"simbol").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCurrency>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCurrency>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCurrency>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCurrency>().HasKey(@"CurrencyID");
        }

        partial void CustomizeTbCurrencyMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomer Mapping

        private void TbCustomerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomer>().ToTable(@"tb_customer", @"posme");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CustomerID).HasColumnName(@"customerID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomer>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomer>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomer>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CustomerNumber).HasColumnName(@"customerNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomer>().Property(x => x.IdentificationType).HasColumnName(@"identificationType").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Identification).HasColumnName(@"identification").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CountryID).HasColumnName(@"countryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.StateID).HasColumnName(@"stateID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CityID).HasColumnName(@"cityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Location).HasColumnName(@"location").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.ClasificationID).HasColumnName(@"clasificationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CategoryID).HasColumnName(@"categoryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.SubCategoryID).HasColumnName(@"subCategoryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CustomerTypeID).HasColumnName(@"customerTypeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.BirthDate).HasColumnName(@"birthDate").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.TypePay).HasColumnName(@"typePay").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.PayConditionID).HasColumnName(@"payConditionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.SexoID).HasColumnName(@"sexoID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.TypeFirm).HasColumnName(@"typeFirm").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.BalancePoint).HasColumnName(@"balancePoint").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.PhoneNumber).HasColumnName(@"phoneNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.DateContract).HasColumnName(@"dateContract").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.EntityContactID).HasColumnName(@"entityContactID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference5).HasColumnName(@"reference5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Budget).HasColumnName(@"budget").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomer>().Property(x => x.ModifiedOn).HasColumnName(@"modifiedOn").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.FormContactID).HasColumnName(@"formContactID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomer>().Property(x => x.BalanceDol).HasColumnName(@"balanceDol").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomer>().Property(x => x.BalanceCor).HasColumnName(@"balanceCor").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomer>().Property(x => x.EntityReferenceID).HasColumnName(@"entityReferenceID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.AllowWhatsappPromotions).HasColumnName(@"allowWhatsappPromotions").HasColumnType(@"bit").ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomer>().Property(x => x.AllowWhatsappCollection).HasColumnName(@"allowWhatsappCollection").HasColumnType(@"bit").ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomer>().HasKey(@"CustomerID");
        }

        partial void CustomizeTbCustomerMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerConsultasSinRiesgo Mapping

        private void TbCustomerConsultasSinRiesgoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().ToTable(@"tb_customer_consultas_sin_riesgo", @"posme");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.RequestID).HasColumnName(@"requestID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.File).HasColumnName(@"file").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.ModifiedOn).HasColumnName(@"modifiedOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.IsPay).HasColumnName(@"isPay").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().HasKey(@"RequestID");
        }

        partial void CustomizeTbCustomerConsultasSinRiesgoMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCredit Mapping

        private void TbCustomerCreditMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCredit>().ToTable(@"tb_customer_credit", @"posme");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.CustomerCreditID).HasColumnName(@"customerCreditID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.LimitCreditDol).HasColumnName(@"limitCreditDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.BalanceDol).HasColumnName(@"balanceDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.IncomeDol).HasColumnName(@"incomeDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCredit>().HasKey(@"CustomerCreditID");
        }

        partial void CustomizeTbCustomerCreditMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditAmoritization Mapping

        private void TbCustomerCreditAmoritizationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditAmoritization>().ToTable(@"tb_customer_credit_amoritization", @"posme");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.CreditAmortizationID).HasColumnName(@"creditAmortizationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.CustomerCreditDocumentID).HasColumnName(@"customerCreditDocumentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.DateApply).HasColumnName(@"dateApply").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.BalanceStart).HasColumnName(@"balanceStart").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.Interest).HasColumnName(@"interest").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.Capital).HasColumnName(@"capital").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.Share).HasColumnName(@"share").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.BalanceEnd).HasColumnName(@"balanceEnd").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.Remaining).HasColumnName(@"remaining").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.ShareCapital).HasColumnName(@"shareCapital").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.DayDelay).HasColumnName(@"dayDelay").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(350).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.Sequence).HasColumnName(@"sequence").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().HasKey(@"CreditAmortizationID");
        }

        partial void CustomizeTbCustomerCreditAmoritizationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditClasification Mapping

        private void TbCustomerCreditClasificationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditClasification>().ToTable(@"tb_customer_credit_clasification", @"posme");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.ClasificationID).HasColumnName(@"clasificationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.DateHistory).HasColumnName(@"dateHistory").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.NumberShareLate).HasColumnName(@"numberShareLate").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.AmountCapitalLate).HasColumnName(@"amountCapitalLate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.AmountInterestLate).HasColumnName(@"amountInterestLate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.MaxDayMora).HasColumnName(@"maxDayMora").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.NumberCreditAbiertos).HasColumnName(@"numberCreditAbiertos").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.NumberCreditSaneados).HasColumnName(@"numberCreditSaneados").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.NumberCreditCancelados).HasColumnName(@"numberCreditCancelados").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.AmountCapitalAbierto).HasColumnName(@"amountCapitalAbierto").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.AmountCapitalSaneado).HasColumnName(@"amountCapitalSaneado").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.AmountCapitalCancelado).HasColumnName(@"amountCapitalCancelado").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.Summary).HasColumnName(@"summary").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().HasKey(@"ClasificationID");
        }

        partial void CustomizeTbCustomerCreditClasificationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditDocument Mapping

        private void TbCustomerCreditDocumentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditDocument>().ToTable(@"tb_customer_credit_document", @"posme");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.CustomerCreditDocumentID).HasColumnName(@"customerCreditDocumentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.CustomerCreditLineID).HasColumnName(@"customerCreditLineID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.DocumentNumber).HasColumnName(@"documentNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.DateOn).HasColumnName(@"dateOn").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Amount).HasColumnName(@"amount").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Interes).HasColumnName(@"interes").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Term).HasColumnName(@"term").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.BalanceProvicioned).HasColumnName(@"balanceProvicioned").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"1.0000");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(4500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.TypeAmortization).HasColumnName(@"typeAmortization").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.PeriodPay).HasColumnName(@"periodPay").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.ProviderIDCredit).HasColumnName(@"providerIDCredit").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.ReportSinRiesgo).HasColumnName(@"reportSinRiesgo").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbCustomerCreditDocument>().HasKey(@"CustomerCreditDocumentID");
        }

        partial void CustomizeTbCustomerCreditDocumentMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditDocumentEntityRelated Mapping

        private void TbCustomerCreditDocumentEntityRelatedMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().ToTable(@"tb_customer_credit_document_entity_related", @"posme");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CcEntityRelatedID).HasColumnName(@"ccEntityRelatedID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CustomerCreditDocumentID).HasColumnName(@"customerCreditDocumentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.Type).HasColumnName(@"type").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.TypeCredit).HasColumnName(@"typeCredit").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"4");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.StatusCredit).HasColumnName(@"statusCredit").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.TypeGarantia).HasColumnName(@"typeGarantia").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"4");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.TypeRecuperation).HasColumnName(@"typeRecuperation").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.RatioDesembolso).HasColumnName(@"ratioDesembolso").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.RatioBalance).HasColumnName(@"ratioBalance").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.RatioBalanceExpired).HasColumnName(@"ratioBalanceExpired").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.RatioShare).HasColumnName(@"ratioShare").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(120).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().HasKey(@"CcEntityRelatedID");
        }

        partial void CustomizeTbCustomerCreditDocumentEntityRelatedMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditExternalSharon Mapping

        private void TbCustomerCreditExternalSharonMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().HasNoKey();
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().ToView(@"tb_customer_credit_external_sharon", @"posme");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.CustomerID).HasColumnName(@"customerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.TIPODEENTIDAD).HasColumnName(@"TIPO_DE_ENTIDAD").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(5).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.NUMEROCORRELATIVO).HasColumnName(@"NUMERO_CORRELATIVO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.FECHADEREPORTE).HasColumnName(@"FECHA_DE_REPORTE").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.DEPARTAMENTO).HasColumnName(@"DEPARTAMENTO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.NUMERODECEDULAORUC).HasColumnName(@"NUMERO_DE_CEDULA_O_RUC").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.NOMBREDEPERSONA).HasColumnName(@"NOMBRE_DE_PERSONA").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.TIPODECREDITO).HasColumnName(@"TIPO_DE_CREDITO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.FECHADEDESEMBOLSO).HasColumnName(@"FECHA_DE_DESEMBOLSO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.TIPODEOBLIGACION).HasColumnName(@"TIPO_DE_OBLIGACION").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.MONTOAUTORIZADO).HasColumnName(@"MONTO_AUTORIZADO").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.PLAZO).HasColumnName(@"PLAZO").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.FRECUENCIADEPAGO).HasColumnName(@"FRECUENCIA_DE_PAGO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.SALDODEUDA).HasColumnName(@"SALDO_DEUDA").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.ESTADO).HasColumnName(@"ESTADO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(450).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.MONTOVENCIDO).HasColumnName(@"MONTO_VENCIDO").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.ANTIGUEDADDEMORA).HasColumnName(@"ANTIGUEDAD_DE_MORA").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.TIPODEGARANTIA).HasColumnName(@"TIPO_DE_GARANTIA").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.FORMADERECUPERACION).HasColumnName(@"FORMA_DE_RECUPERACION").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.NUMERODECREDITO).HasColumnName(@"NUMERO_DE_CREDITO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.VALORDELACUOTA).HasColumnName(@"VALOR_DE_LA_CUOTA").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'1'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
        }

        partial void CustomizeTbCustomerCreditExternalSharonMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditExternalSharonTmp Mapping

        private void TbCustomerCreditExternalSharonTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().HasNoKey();
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().ToView(@"tb_customer_credit_external_sharon_tmp", @"posme");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CompanyName).HasColumnName(@"companyName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CustomerID).HasColumnName(@"customerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.DateCredit).HasColumnName(@"dateCredit").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.DocumentNumber).HasColumnName(@"documentNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CustomerName).HasColumnName(@"customerName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CustomerIdentification).HasColumnName(@"customerIdentification").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CustomerPhone).HasColumnName(@"customerPhone").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.AmountAurotize).HasColumnName(@"amountAurotize").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.Plazo).HasColumnName(@"plazo").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.FormPay).HasColumnName(@"formPay").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.AmountShare).HasColumnName(@"amountShare").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.AmountBalance).HasColumnName(@"amountBalance").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.DayMora).HasColumnName(@"dayMora").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(450).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'1'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
        }

        partial void CustomizeTbCustomerCreditExternalSharonTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditLine Mapping

        private void TbCustomerCreditLineMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditLine>().ToTable(@"tb_customer_credit_line", @"posme");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.CustomerCreditLineID).HasColumnName(@"customerCreditLineID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.CreditLineID).HasColumnName(@"creditLineID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.AccountNumber).HasColumnName(@"accountNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.TypeAmortization).HasColumnName(@"typeAmortization").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.LimitCredit).HasColumnName(@"limitCredit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.InterestYear).HasColumnName(@"interestYear").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.InterestPay).HasColumnName(@"interestPay").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.TotalPay).HasColumnName(@"totalPay").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.TotalDefeated).HasColumnName(@"totalDefeated").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.DateOpen).HasColumnName(@"dateOpen").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.PeriodPay).HasColumnName(@"periodPay").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.DateLastPay).HasColumnName(@"dateLastPay").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.Term).HasColumnName(@"term").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(550).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.DayExcluded).HasColumnName(@"dayExcluded").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditLine>().HasKey(@"CustomerCreditLineID");
        }

        partial void CustomizeTbCustomerCreditLineMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerFrecuencyActuation Mapping

        private void TbCustomerFrecuencyActuationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().ToTable(@"tb_customer_frecuency_actuations", @"posme");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.CustomerFrecuencyActuations).HasColumnName(@"customerFrecuencyActuations").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.SituationID).HasColumnName(@"situationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.FrecuencyContactID).HasColumnName(@"frecuencyContactID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.IsApply).HasColumnName(@"isApply").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().HasKey(@"CustomerFrecuencyActuations");
        }

        partial void CustomizeTbCustomerFrecuencyActuationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerPaymentMethod Mapping

        private void TbCustomerPaymentMethodMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerPaymentMethod>().ToTable(@"tb_customer_payment_method", @"posme");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.CustomerPaymentMethod).HasColumnName(@"customerPaymentMethod").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.ExpirationDate).HasColumnName(@"expirationDate").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.Cvc).HasColumnName(@"cvc").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.TypeId).HasColumnName(@"typeId").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().HasKey(@"CustomerPaymentMethod");
        }

        partial void CustomizeTbCustomerPaymentMethodMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbDataview Mapping

        private void TbDataviewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbDataview>().ToTable(@"tb_dataview", @"posme");
            modelBuilder.Entity<TbDataview>().Property(x => x.DataViewID).HasColumnName(@"dataViewID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbDataview>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.SqlScript).HasColumnName(@"sqlScript").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(5000).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.VisibleColumns).HasColumnName(@"visibleColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.NonVisibleColumns).HasColumnName(@"nonVisibleColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.CallerID).HasColumnName(@"callerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbDataview>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbDataview>().HasKey(@"DataViewID");
        }

        partial void CustomizeTbDataviewMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbElement Mapping

        private void TbElementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbElement>().ToTable(@"tb_element", @"posme");
            modelBuilder.Entity<TbElement>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbElement>().Property(x => x.ElementTypeID).HasColumnName(@"elementTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbElement>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbElement>().Property(x => x.ColumnAutoIncrement).HasColumnName(@"columnAutoIncrement").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<TbElement>().HasKey(@"ElementID");
        }

        partial void CustomizeTbElementMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbElementType Mapping

        private void TbElementTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbElementType>().ToTable(@"tb_element_type", @"posme");
            modelBuilder.Entity<TbElementType>().Property(x => x.ElementTypeID).HasColumnName(@"elementTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbElementType>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbElementType>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbElementType>().HasKey(@"ElementTypeID");
        }

        partial void CustomizeTbElementTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEmployee Mapping

        private void TbEmployeeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEmployee>().ToTable(@"tb_employee", @"posme");
            modelBuilder.Entity<TbEmployee>().Property(x => x.EmployeeID).HasColumnName(@"employeeID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEmployee>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployee>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployee>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployee>().Property(x => x.EmployeNumber).HasColumnName(@"employeNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEmployee>().Property(x => x.NumberIdentification).HasColumnName(@"numberIdentification").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.IdentificationTypeID).HasColumnName(@"identificationTypeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.SocialSecurityNumber).HasColumnName(@"socialSecurityNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CountryID).HasColumnName(@"countryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.StateID).HasColumnName(@"stateID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CityID).HasColumnName(@"cityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.DepartamentID).HasColumnName(@"departamentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.AreaID).HasColumnName(@"areaID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.ClasificationID).HasColumnName(@"clasificationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CategoryID).HasColumnName(@"categoryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.TypeEmployeeID).HasColumnName(@"typeEmployeeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.HourCost).HasColumnName(@"hourCost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbEmployee>().Property(x => x.ComissionPorcentage).HasColumnName(@"comissionPorcentage").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbEmployee>().Property(x => x.ParentEmployeeID).HasColumnName(@"parentEmployeeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.VacationBalanceDay).HasColumnName(@"vacationBalanceDay").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.AmountSaving).HasColumnName(@"amountSaving").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().HasKey(@"EmployeeID");
        }

        partial void CustomizeTbEmployeeMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEmployeeCalendarPay Mapping

        private void TbEmployeeCalendarPayMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEmployeeCalendarPay>().ToTable(@"tb_employee_calendar_pay", @"posme");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CalendarID).HasColumnName(@"calendarID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.AccountingCycleID).HasColumnName(@"accountingCycleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(300).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(15).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.TypeID).HasColumnName(@"typeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.WeekID).HasColumnName(@"weekID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbEmployeeCalendarPay>().HasKey(@"CalendarID");
        }

        partial void CustomizeTbEmployeeCalendarPayMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEmployeeCalendarPayDetail Mapping

        private void TbEmployeeCalendarPayDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().ToTable(@"tb_employee_calendar_pay_detail", @"posme");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.CalendarDetailID).HasColumnName(@"calendarDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.CalendarID).HasColumnName(@"calendarID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.EmployeeID).HasColumnName(@"employeeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.PlusSalary).HasColumnName(@"plus_salary").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.PlusCommission).HasColumnName(@"plus_commission").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.PlusBonus).HasColumnName(@"plus_bonus").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.MinusAdelantos).HasColumnName(@"minus_adelantos").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.MinusDeductionForLoans).HasColumnName(@"minus_deduction_for_loans").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.MinusDeductionForLateArrival).HasColumnName(@"minus_deduction_for_late_arrival").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.MinusInss).HasColumnName(@"minus_inss").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.InssPatronal).HasColumnName(@"inss_patronal").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.MinusIr).HasColumnName(@"minus_ir").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.Saving).HasColumnName(@"saving").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.EqualNeto).HasColumnName(@"equal_neto").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().HasKey(@"CalendarDetailID");
        }

        partial void CustomizeTbEmployeeCalendarPayDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEntity Mapping

        private void TbEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEntity>().ToTable(@"tb_entity", @"posme");
            modelBuilder.Entity<TbEntity>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEntity>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntity>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntity>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntity>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntity>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"bigint").ValueGeneratedOnAdd().HasPrecision(20, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntity>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntity>().Property(x => x.ImagenBiometric).HasColumnName(@"imagenBiometric").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntity>().HasKey(@"EntityID");
        }

        partial void CustomizeTbEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEntityAccount Mapping

        private void TbEntityAccountMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEntityAccount>().ToTable(@"tb_entity_account", @"posme");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.EntityAccountID).HasColumnName(@"entityAccountID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.AccountTypeID).HasColumnName(@"accountTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CreditLimit).HasColumnName(@"creditLimit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.MaxCredit).HasColumnName(@"maxCredit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.DebitLimit).HasColumnName(@"debitLimit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.MaxDebit).HasColumnName(@"maxDebit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbEntityAccount>().HasKey(@"EntityAccountID");
        }

        partial void CustomizeTbEntityAccountMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEntityEmail Mapping

        private void TbEntityEmailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEntityEmail>().ToTable(@"tb_entity_email", @"posme");
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.EntityEmailID).HasColumnName(@"entityEmailID").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd().HasPrecision(20, 0);
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.IsPrimary).HasColumnName(@"isPrimary").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityEmail>().HasKey(@"EntityEmailID");
        }

        partial void CustomizeTbEntityEmailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEntityLocation Mapping

        private void TbEntityLocationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEntityLocation>().ToTable(@"tb_entity_location", @"posme");
            modelBuilder.Entity<TbEntityLocation>().Property(x => x.EntityLocationID).HasColumnName(@"entityLocationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEntityLocation>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityLocation>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityLocation>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityLocation>().Property(x => x.Latituded).HasColumnName(@"latituded").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityLocation>().Property(x => x.Longituded).HasColumnName(@"longituded").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityLocation>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityLocation>().Property(x => x.UserName).HasColumnName(@"userName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityLocation>().Property(x => x.CompanyName).HasColumnName(@"companyName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(600).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityLocation>().HasKey(@"EntityLocationID");
        }

        partial void CustomizeTbEntityLocationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEntityPhone Mapping

        private void TbEntityPhoneMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEntityPhone>().ToTable(@"tb_entity_phone", @"posme");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.EntityPhoneID).HasColumnName(@"entityPhoneID").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd().HasPrecision(20, 0);
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.TypeID).HasColumnName(@"typeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.IsPrimary).HasColumnName(@"isPrimary").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityPhone>().HasKey(@"EntityPhoneID");
        }

        partial void CustomizeTbEntityPhoneMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbError Mapping

        private void TbErrorMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbError>().ToTable(@"tb_error", @"posme");
            modelBuilder.Entity<TbError>().Property(x => x.ErrorID).HasColumnName(@"errorID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbError>().Property(x => x.TagID).HasColumnName(@"tagID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.Notificated).HasColumnName(@"notificated").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.Message).HasColumnName(@"message").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.IsRead).HasColumnName(@"isRead").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.ReadOn).HasColumnName(@"readOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().HasKey(@"ErrorID");
        }

        partial void CustomizeTbErrorMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEstadisticaCategoria Mapping

        private void TbEstadisticaCategoriaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEstadisticaCategoria>().ToTable(@"tb_estadistica_categorias", @"posme");
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.CategoriaID).HasColumnName(@"categoriaID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.ClaseID).HasColumnName(@"claseID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.StartValue).HasColumnName(@"startValue").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 5).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.EndValue).HasColumnName(@"endValue").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 5).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbEstadisticaCategoria>().HasKey(@"CategoriaID");
        }

        partial void CustomizeTbEstadisticaCategoriaMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEstadisticaClase Mapping

        private void TbEstadisticaClaseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEstadisticaClase>().ToTable(@"tb_estadistica_clases", @"posme");
            modelBuilder.Entity<TbEstadisticaClase>().Property(x => x.ClaseID).HasColumnName(@"claseID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEstadisticaClase>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEstadisticaClase>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEstadisticaClase>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'1'");
            modelBuilder.Entity<TbEstadisticaClase>().HasKey(@"ClaseID");
        }

        partial void CustomizeTbEstadisticaClaseMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbExchangeRate Mapping

        private void TbExchangeRateMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbExchangeRate>().ToTable(@"tb_exchange_rate", @"posme");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.ExchangeRateID).HasColumnName(@"exchangeRateID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.Date).HasColumnName(@"date").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.TargetCurrencyID).HasColumnName(@"targetCurrencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.Ratio).HasColumnName(@"ratio").HasColumnType(@"double").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbExchangeRate>().HasKey(@"ExchangeRateID");
        }

        partial void CustomizeTbExchangeRateMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbFixedAssent Mapping

        private void TbFixedAssentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbFixedAssent>().ToTable(@"tb_fixed_assent", @"posme");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.FixedAssentID).HasColumnName(@"fixedAssentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.FixedAssentCode).HasColumnName(@"fixedAssentCode").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.ModelNumber).HasColumnName(@"modelNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Marca).HasColumnName(@"marca").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.ColorID).HasColumnName(@"colorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.ChasisNumber).HasColumnName(@"chasisNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Year).HasColumnName(@"year").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.AsignedEmployeeID).HasColumnName(@"asignedEmployeeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CategoryID).HasColumnName(@"categoryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.TypeID).HasColumnName(@"typeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.TypeDepresiationID).HasColumnName(@"typeDepresiationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.YearOfUtility).HasColumnName(@"yearOfUtility").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.PriceStart).HasColumnName(@"priceStart").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(28, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.IsForaneo).HasColumnName(@"isForaneo").HasColumnType(@"tinyint").ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CountryID).HasColumnName(@"countryID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CityID).HasColumnName(@"cityID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.MunicipalityID).HasColumnName(@"municipalityID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.AreaID).HasColumnName(@"areaID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.ProjectID).HasColumnName(@"projectID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Duration).HasColumnName(@"duration").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.TypeFixedAssentID).HasColumnName(@"typeFixedAssentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Ratio).HasColumnName(@"ratio").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CurrentAmount).HasColumnName(@"currentAmount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.SettlementAmount).HasColumnName(@"settlementAmount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbFixedAssent>().HasKey(@"FixedAssentID");
        }

        partial void CustomizeTbFixedAssentMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbIndicator Mapping

        private void TbIndicatorMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbIndicator>().ToTable(@"tb_indicator", @"posme");
            modelBuilder.Entity<TbIndicator>().Property(x => x.IndicadorID).HasColumnName(@"indicadorID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbIndicator>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Code).HasColumnName(@"code").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Label).HasColumnName(@"label").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(500).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Order).HasColumnName(@"order").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Script).HasColumnName(@"script").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5000).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Posfix).HasColumnName(@"posfix").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Prefix).HasColumnName(@"prefix").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.IsGroup).HasColumnName(@"isGroup").HasColumnType(@"bit").ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbIndicator>().HasKey(@"IndicadorID");
        }

        partial void CustomizeTbIndicatorMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbIndicatorHistory Mapping

        private void TbIndicatorHistoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbIndicatorHistory>().ToTable(@"tb_indicator_history", @"posme");
            modelBuilder.Entity<TbIndicatorHistory>().Property(x => x.IndicatorHistoryID).HasColumnName(@"indicatorHistoryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbIndicatorHistory>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorHistory>().Property(x => x.IndicatorID).HasColumnName(@"indicatorID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorHistory>().Property(x => x.DateOn).HasColumnName(@"dateOn").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbIndicatorHistory>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbIndicatorHistory>().HasKey(@"IndicatorHistoryID");
        }

        partial void CustomizeTbIndicatorHistoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbIndicatorTmp Mapping

        private void TbIndicatorTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbIndicatorTmp>().ToTable(@"tb_indicator_tmp", @"posme");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.IndicatorTmpID).HasColumnName(@"indicatorTmpID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.TokenID).HasColumnName(@"tokenID").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.IndicadorID).HasColumnName(@"indicadorID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbIndicatorTmp>().HasKey(@"IndicatorTmpID");
        }

        partial void CustomizeTbIndicatorTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItem Mapping

        private void TbItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItem>().ToTable(@"tb_item", @"posme");
            modelBuilder.Entity<TbItem>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItem>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.InventoryCategoryID).HasColumnName(@"inventoryCategoryID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.FamilyID).HasColumnName(@"familyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.ItemNumber).HasColumnName(@"itemNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbItem>().Property(x => x.BarCode).HasColumnName(@"barCode").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1200).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbItem>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1000).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.UnitMeasureID).HasColumnName(@"unitMeasureID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.DisplayID).HasColumnName(@"displayID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.Capacity).HasColumnName(@"capacity").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.DisplayUnitMeasureID).HasColumnName(@"displayUnitMeasureID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.DefaultWarehouseID).HasColumnName(@"defaultWarehouseID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItem>().Property(x => x.QuantityMax).HasColumnName(@"quantityMax").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItem>().Property(x => x.QuantityMin).HasColumnName(@"quantityMin").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItem>().Property(x => x.Cost).HasColumnName(@"cost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItem>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.IsPerishable).HasColumnName(@"isPerishable").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.FactorBox).HasColumnName(@"factorBox").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.FactorProgram).HasColumnName(@"factorProgram").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.IsInvoiceQuantityZero).HasColumnName(@"isInvoiceQuantityZero").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.IsServices).HasColumnName(@"isServices").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbItem>().Property(x => x.IsInvoice).HasColumnName(@"isInvoice").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateWallInCloset).HasColumnName(@"realStateWallInCloset").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStatePiscinaPrivate).HasColumnName(@"realStatePiscinaPrivate").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateClubPiscina).HasColumnName(@"realStateClubPiscina").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateAceptanMascota).HasColumnName(@"realStateAceptanMascota").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateContractCorrentaje).HasColumnName(@"realStateContractCorrentaje").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStatePlanReference).HasColumnName(@"realStatePlanReference").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateLinkYoutube).HasColumnName(@"realStateLinkYoutube").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateLinkPaginaWeb).HasColumnName(@"realStateLinkPaginaWeb").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateLinkPhontos).HasColumnName(@"realStateLinkPhontos").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateLinkGoogleMaps).HasColumnName(@"realStateLinkGoogleMaps").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateLinkOther).HasColumnName(@"realStateLinkOther").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateStyleKitchen).HasColumnName(@"realStateStyleKitchen").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateRoomServices).HasColumnName(@"realStateRoomServices").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateRoomBatchServices).HasColumnName(@"realStateRoomBatchServices").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateReferenceUbicacion).HasColumnName(@"realStateReferenceUbicacion").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateReferenceZone).HasColumnName(@"realStateReferenceZone").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateReferenceCondominio).HasColumnName(@"realStateReferenceCondominio").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateEmployerAgentID).HasColumnName(@"realStateEmployerAgentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateCountryID).HasColumnName(@"realStateCountryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateStateID).HasColumnName(@"realStateStateID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateCityID).HasColumnName(@"realStateCityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.ModifiedOn).HasColumnName(@"modifiedOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateRooBatchVisit).HasColumnName(@"realStateRooBatchVisit").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateGerenciaExclusive).HasColumnName(@"realStateGerenciaExclusive").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStatePhone).HasColumnName(@"realStatePhone").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateEmail).HasColumnName(@"realStateEmail").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.DateLastUse).HasColumnName(@"dateLastUse").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.QuantityInvoice).HasColumnName(@"quantityInvoice").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().HasKey(@"ItemID");
        }

        partial void CustomizeTbItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemCategory Mapping

        private void TbItemCategoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemCategory>().ToTable(@"tb_item_category", @"posme");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.InventoryCategoryID).HasColumnName(@"inventoryCategoryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemCategory>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().HasKey(@"InventoryCategoryID");
        }

        partial void CustomizeTbItemCategoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemConfigLoto Mapping

        private void TbItemConfigLotoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemConfigLoto>().ToTable(@"tb_item_config_loto", @"posme");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.ItemConfigLotoID).HasColumnName(@"itemConfigLotoID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.MaxSale).HasColumnName(@"maxSale").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"1.00");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno1Inicio).HasColumnName(@"turno1Inicio").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno1Fin).HasColumnName(@"turno1Fin").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"9");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno2Inicio).HasColumnName(@"turno2Inicio").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"9");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno2Fin).HasColumnName(@"turno2Fin").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"14");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno3Inicio).HasColumnName(@"turno3Inicio").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"14");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno3Fin).HasColumnName(@"turno3Fin").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"22");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbItemConfigLoto>().HasKey(@"ItemConfigLotoID");
        }

        partial void CustomizeTbItemConfigLotoMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemDataSheet Mapping

        private void TbItemDataSheetMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemDataSheet>().ToTable(@"tb_item_data_sheet", @"posme");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.ItemDataSheetID).HasColumnName(@"itemDataSheetID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.Version).HasColumnName(@"version").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbItemDataSheet>().HasKey(@"ItemDataSheetID");
        }

        partial void CustomizeTbItemDataSheetMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemDataSheetDetail Mapping

        private void TbItemDataSheetDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemDataSheetDetail>().ToTable(@"tb_item_data_sheet_detail", @"posme");
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.ItemDataSheetDetailID).HasColumnName(@"itemDataSheetDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.ItemDataSheetID).HasColumnName(@"itemDataSheetID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.RelatedItemID).HasColumnName(@"relatedItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbItemDataSheetDetail>().HasKey(@"ItemDataSheetDetailID");
        }

        partial void CustomizeTbItemDataSheetDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemImport Mapping

        private void TbItemImportMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemImport>().HasNoKey();
            modelBuilder.Entity<TbItemImport>().ToView(@"tb_item_import", @"posme");
            modelBuilder.Entity<TbItemImport>().Property(x => x.ItemNumber).HasColumnName(@"itemNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemImport>().Property(x => x.Fisico).HasColumnName(@"fisico").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemImport>().Property(x => x.Sistema).HasColumnName(@"sistema").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
        }

        partial void CustomizeTbItemImportMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemSku Mapping

        private void TbItemSkuMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemSku>().ToTable(@"tb_item_sku", @"posme");
            modelBuilder.Entity<TbItemSku>().Property(x => x.SkuID).HasColumnName(@"skuID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemSku>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemSku>().Property(x => x.CatalogItemID).HasColumnName(@"catalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemSku>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2);
            modelBuilder.Entity<TbItemSku>().Property(x => x.Price).HasColumnName(@"price").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbItemSku>().Property(x => x.Predeterminado).HasColumnName(@"predeterminado").HasColumnType(@"tinyint").ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemSku>().HasKey(@"SkuID");
        }

        partial void CustomizeTbItemSkuMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemWarehouse Mapping

        private void TbItemWarehouseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemWarehouse>().ToTable(@"tb_item_warehouse", @"posme");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.ItemWarehouseId).HasColumnName(@"itemWarehouseId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.WarehouseID).HasColumnName(@"warehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.Cost).HasColumnName(@"cost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.QuantityMax).HasColumnName(@"quantityMax").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.QuantityMin).HasColumnName(@"quantityMin").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItemWarehouse>().HasKey(@"ItemWarehouseId");
        }

        partial void CustomizeTbItemWarehouseMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemWarehouseExpired Mapping

        private void TbItemWarehouseExpiredMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemWarehouseExpired>().ToTable(@"tb_item_warehouse_expired", @"posme");
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.ItemWarehouseExpiredID).HasColumnName(@"itemWarehouseExpiredID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.WarehouseID).HasColumnName(@"warehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.Lote).HasColumnName(@"lote").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.DateExpired).HasColumnName(@"dateExpired").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TbItemWarehouseExpired>().HasKey(@"ItemWarehouseExpiredID");
        }

        partial void CustomizeTbItemWarehouseExpiredMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbJournalEntry Mapping

        private void TbJournalEntryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbJournalEntry>().ToTable(@"tb_journal_entry", @"posme");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.JournalEntryID).HasColumnName(@"journalEntryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.JournalNumber).HasColumnName(@"journalNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.JournalDate).HasColumnName(@"journalDate").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.TbExchangeRate).HasColumnName(@"tb_exchange_rate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.IsApplied).HasColumnName(@"isApplied").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.TitleTemplated).HasColumnName(@"titleTemplated").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/A'");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.IsTemplated).HasColumnName(@"isTemplated").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(550).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.JournalTypeID).HasColumnName(@"journalTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.AccountingCycleID).HasColumnName(@"accountingCycleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.EntryName).HasColumnName(@"entryName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(500).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.IsModule).HasColumnName(@"isModule").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().HasKey(@"JournalEntryID");
        }

        partial void CustomizeTbJournalEntryMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbJournalEntryDetail Mapping

        private void TbJournalEntryDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbJournalEntryDetail>().ToTable(@"tb_journal_entry_detail", @"posme");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.JournalEntryDetailID).HasColumnName(@"journalEntryDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.JournalEntryID).HasColumnName(@"journalEntryID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.IsApplied).HasColumnName(@"isApplied").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.TbExchangeRate).HasColumnName(@"tb_exchange_rate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbJournalEntryDetail>().HasKey(@"JournalEntryDetailID");
        }

        partial void CustomizeTbJournalEntryDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbJournalEntryDetailSummary Mapping

        private void TbJournalEntryDetailSummaryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbJournalEntryDetailSummary>().ToTable(@"tb_journal_entry_detail_summary", @"posme");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.JournalEntryDetailSummaryID).HasColumnName(@"journalEntryDetailSummaryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.Tocken).HasColumnName(@"tocken").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.JournalEntryID).HasColumnName(@"journalEntryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.ParentAccountID).HasColumnName(@"parentAccountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().HasKey(@"JournalEntryDetailSummaryID");
        }

        partial void CustomizeTbJournalEntryDetailSummaryMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbKardex Mapping

        private void TbKardexMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbKardex>().ToTable(@"tb_kardex", @"posme");
            modelBuilder.Entity<TbKardex>().Property(x => x.KardexID).HasColumnName(@"kardexID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbKardex>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbKardex>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbKardex>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbKardex>().Property(x => x.WarehouseID).HasColumnName(@"warehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbKardex>().Property(x => x.KardexCode).HasColumnName(@"kardexCode").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.KardexDate).HasColumnName(@"kardexDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.Sign).HasColumnName(@"sign").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbKardex>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.TransactionDetailID).HasColumnName(@"transactionDetailID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.MovementOn).HasColumnName(@"movementOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbKardex>().Property(x => x.OldQuantity).HasColumnName(@"oldQuantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.OldQuantityWarehouse).HasColumnName(@"oldQuantityWarehouse").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.OldCost).HasColumnName(@"oldCost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.OldCostWarehouse).HasColumnName(@"oldCostWarehouse").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.TransactionQuantity).HasColumnName(@"transactionQuantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.TransactionCost).HasColumnName(@"transactionCost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.NewQuantity).HasColumnName(@"newQuantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.NewQuantityWarehouse).HasColumnName(@"newQuantityWarehouse").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.NewCost).HasColumnName(@"newCost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.NewCostWarehouse).HasColumnName(@"newCostWarehouse").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.QuantityInWarehouseCurrent).HasColumnName(@"quantityInWarehouseCurrent").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.QuantityInCurrent).HasColumnName(@"quantityInCurrent").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().HasKey(@"KardexID");
        }

        partial void CustomizeTbKardexMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbLegal Mapping

        private void TbLegalMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbLegal>().ToTable(@"tb_legal", @"posme");
            modelBuilder.Entity<TbLegal>().Property(x => x.LegalID).HasColumnName(@"legalID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbLegal>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLegal>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLegal>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLegal>().Property(x => x.ComercialName).HasColumnName(@"comercialName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbLegal>().Property(x => x.LegalName).HasColumnName(@"legalName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbLegal>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbLegal>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbLegal>().HasKey(@"LegalID");
        }

        partial void CustomizeTbLegalMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbListPrice Mapping

        private void TbListPriceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbListPrice>().ToTable(@"tb_list_price", @"posme");
            modelBuilder.Entity<TbListPrice>().Property(x => x.ListPriceID).HasColumnName(@"listPriceID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbListPrice>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbListPrice>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbListPrice>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbListPrice>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(200).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbListPrice>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(550).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbListPrice>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbListPrice>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbListPrice>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbListPrice>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbListPrice>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbListPrice>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbListPrice>().HasKey(@"ListPriceID");
        }

        partial void CustomizeTbListPriceMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbLog Mapping

        private void TbLogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbLog>().ToTable(@"tb_log", @"posme");
            modelBuilder.Entity<TbLog>().Property(x => x.LogID).HasColumnName(@"logID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbLog>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLog>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLog>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLog>().Property(x => x.Token).HasColumnName(@"token").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLog>().Property(x => x.ProcedureName).HasColumnName(@"procedureName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLog>().Property(x => x.Code).HasColumnName(@"code").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLog>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(350).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLog>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbLog>().HasKey(@"LogID");
        }

        partial void CustomizeTbLogMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbLogMesseger Mapping

        private void TbLogMessegerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbLogMesseger>().ToTable(@"tb_log_messeger", @"posme");
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Errno).HasColumnName(@"errno").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Errtype).HasColumnName(@"errtype").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Errstr).HasColumnName(@"errstr").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Errfile).HasColumnName(@"errfile").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Errline).HasColumnName(@"errline").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.UserAgent).HasColumnName(@"user_agent").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.IpAddress).HasColumnName(@"ip_address").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(45).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Time).HasColumnName(@"time").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TbLogMesseger>().HasKey(@"Id");
        }

        partial void CustomizeTbLogMessegerMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbLogSession Mapping

        private void TbLogSessionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbLogSession>().ToTable(@"tb_log_session", @"posme");
            modelBuilder.Entity<TbLogSession>().Property(x => x.SessionId).HasColumnName(@"session_id").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(40).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLogSession>().Property(x => x.IpAddress).HasColumnName(@"ip_address").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(45).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLogSession>().Property(x => x.UserAgent).HasColumnName(@"user_agent").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(120).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLogSession>().Property(x => x.LastActivity).HasColumnName(@"last_activity").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(15).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLogSession>().Property(x => x.UserData).HasColumnName(@"user_data").HasColumnType(@"text").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbLogSession>().HasKey(@"SessionId");
        }

        partial void CustomizeTbLogSessionMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbMasterKardexTemp Mapping

        private void TbMasterKardexTempMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbMasterKardexTemp>().ToTable(@"tb_master_kardex_temp", @"posme");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.MasterKardexTempID).HasColumnName(@"masterKardexTempID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.TokenID).HasColumnName(@"tokenID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.ItemNumber).HasColumnName(@"itemNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.ItemName).HasColumnName(@"itemName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.MinKardexID).HasColumnName(@"minKardexID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.QuantityInicial).HasColumnName(@"quantityInicial").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.CostInicial).HasColumnName(@"costInicial").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.QuantityInput).HasColumnName(@"quantityInput").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.CostInput).HasColumnName(@"costInput").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.QuantityOutput).HasColumnName(@"quantityOutput").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.CostOutput).HasColumnName(@"costOutput").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.ItemCategoryName).HasColumnName(@"itemCategoryName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMasterKardexTemp>().HasKey(@"MasterKardexTempID");
        }

        partial void CustomizeTbMasterKardexTempMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbMembership Mapping

        private void TbMembershipMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbMembership>().ToTable(@"tb_membership", @"posme");
            modelBuilder.Entity<TbMembership>().Property(x => x.MembershipID).HasColumnName(@"membershipID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbMembership>().Property(x => x.RoleID).HasColumnName(@"roleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMembership>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMembership>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMembership>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMembership>().HasKey(@"MembershipID");
        }

        partial void CustomizeTbMembershipMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbMenuElement Mapping

        private void TbMenuElementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbMenuElement>().ToTable(@"tb_menu_element", @"posme");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.MenuElementID).HasColumnName(@"menuElementID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbMenuElement>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.ParentMenuElementID).HasColumnName(@"parentMenuElementID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Orden).HasColumnName(@"orden").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(40).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Icon).HasColumnName(@"icon").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Template).HasColumnName(@"template").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Nivel).HasColumnName(@"nivel").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.TypeMenuElementID).HasColumnName(@"typeMenuElementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.IconWindowForm).HasColumnName(@"iconWindowForm").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1200).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.FormRedirectWindowForm).HasColumnName(@"formRedirectWindowForm").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.TypeUrlRedirect).HasColumnName(@"typeUrlRedirect").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().HasKey(@"MenuElementID");
        }

        partial void CustomizeTbMenuElementMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbNaturale Mapping

        private void TbNaturaleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbNaturale>().ToTable(@"tb_naturales", @"posme");
            modelBuilder.Entity<TbNaturale>().Property(x => x.NaturalesID).HasColumnName(@"naturalesID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbNaturale>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNaturale>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNaturale>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNaturale>().Property(x => x.FirstName).HasColumnName(@"firstName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNaturale>().Property(x => x.LastName).HasColumnName(@"lastName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNaturale>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNaturale>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNaturale>().Property(x => x.ProfesionID).HasColumnName(@"profesionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNaturale>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNaturale>().HasKey(@"NaturalesID");
        }

        partial void CustomizeTbNaturaleMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbNotification Mapping

        private void TbNotificationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbNotification>().ToTable(@"tb_notification", @"posme");
            modelBuilder.Entity<TbNotification>().Property(x => x.NotificationID).HasColumnName(@"notificationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbNotification>().Property(x => x.ErrorID).HasColumnName(@"errorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.From).HasColumnName(@"from").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.To).HasColumnName(@"to").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.Subject).HasColumnName(@"subject").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.Message).HasColumnName(@"message").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(5000).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.Summary).HasColumnName(@"summary").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.Title).HasColumnName(@"title").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.TagID).HasColumnName(@"tagID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.PhoneFrom).HasColumnName(@"phoneFrom").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.PhoneTo).HasColumnName(@"phoneTo").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.ProgramDate).HasColumnName(@"programDate").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.ProgramHour).HasColumnName(@"programHour").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.SendOn).HasColumnName(@"sendOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.SendEmailOn).HasColumnName(@"sendEmailOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.SendWhatsappOn).HasColumnName(@"sendWhatsappOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.AddedCalendarGoogle).HasColumnName(@"addedCalendarGoogle").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.QuantityOcupation).HasColumnName(@"quantityOcupation").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNotification>().Property(x => x.QuantityDisponible).HasColumnName(@"quantityDisponible").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNotification>().Property(x => x.GoogleCalendarEventID).HasColumnName(@"googleCalendarEventID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().HasKey(@"NotificationID");
        }

        partial void CustomizeTbNotificationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbParameter Mapping

        private void TbParameterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbParameter>().ToTable(@"tb_parameter", @"posme");
            modelBuilder.Entity<TbParameter>().Property(x => x.ParameterID).HasColumnName(@"parameterID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbParameter>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbParameter>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbParameter>().Property(x => x.IsRequiered).HasColumnName(@"isRequiered").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbParameter>().Property(x => x.IsEdited).HasColumnName(@"isEdited").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbParameter>().HasKey(@"ParameterID");
        }

        partial void CustomizeTbParameterMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbPrice Mapping

        private void TbPriceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbPrice>().ToTable(@"tb_price", @"posme");
            modelBuilder.Entity<TbPrice>().Property(x => x.PriceID).HasColumnName(@"priceID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbPrice>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbPrice>().Property(x => x.ListPriceID).HasColumnName(@"listPriceID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbPrice>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbPrice>().Property(x => x.TypePriceID).HasColumnName(@"typePriceID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbPrice>().Property(x => x.Percentage).HasColumnName(@"percentage").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbPrice>().Property(x => x.Price).HasColumnName(@"price").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbPrice>().Property(x => x.PercentageCommision).HasColumnName(@"percentageCommision").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbPrice>().HasKey(@"PriceID");
        }

        partial void CustomizeTbPriceMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbProvider Mapping

        private void TbProviderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbProvider>().ToTable(@"tb_provider", @"posme");
            modelBuilder.Entity<TbProvider>().Property(x => x.ProviderID).HasColumnName(@"providerID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbProvider>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProvider>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProvider>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProvider>().Property(x => x.ProviderNumber).HasColumnName(@"providerNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbProvider>().Property(x => x.NumberIdentification).HasColumnName(@"numberIdentification").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.IdentificationTypeID).HasColumnName(@"identificationTypeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.ProviderType).HasColumnName(@"providerType").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.ProviderCategoryID).HasColumnName(@"providerCategoryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.ProviderClasificationID).HasColumnName(@"providerClasificationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.PayConditionID).HasColumnName(@"payConditionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.IsLocal).HasColumnName(@"isLocal").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CountryID).HasColumnName(@"countryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.StateID).HasColumnName(@"stateID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CityID).HasColumnName(@"cityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.DeleveryDay).HasColumnName(@"deleveryDay").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.DeleveryDayReal).HasColumnName(@"deleveryDayReal").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.Distancia).HasColumnName(@"distancia").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.BalanceDol).HasColumnName(@"balanceDol").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbProvider>().Property(x => x.BalanceCor).HasColumnName(@"balanceCor").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbProvider>().HasKey(@"ProviderID");
        }

        partial void CustomizeTbProviderMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbProviderItem Mapping

        private void TbProviderItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbProviderItem>().ToTable(@"tb_provider_item", @"posme");
            modelBuilder.Entity<TbProviderItem>().Property(x => x.ProviderItemID).HasColumnName(@"providerItemID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbProviderItem>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProviderItem>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProviderItem>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProviderItem>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProviderItem>().HasKey(@"ProviderItemID");
        }

        partial void CustomizeTbProviderItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbPublicCatalog Mapping

        private void TbPublicCatalogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbPublicCatalog>().ToTable(@"tb_public_catalog", @"posme");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.PublicCatalogID).HasColumnName(@"publicCatalogID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.SystemName).HasColumnName(@"systemName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.Orden).HasColumnName(@"orden").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbPublicCatalog>().HasKey(@"PublicCatalogID");
        }

        partial void CustomizeTbPublicCatalogMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbPublicCatalogDetail Mapping

        private void TbPublicCatalogDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbPublicCatalogDetail>().ToTable(@"tb_public_catalog_detail", @"posme");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.PublicCatalogDetailID).HasColumnName(@"publicCatalogDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.PublicCatalogID).HasColumnName(@"publicCatalogID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Sequence).HasColumnName(@"sequence").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.ParentCatalogDetailID).HasColumnName(@"parentCatalogDetailID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Ratio).HasColumnName(@"ratio").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.ParentName).HasColumnName(@"parentName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference5).HasColumnName(@"reference5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference7).HasColumnName(@"reference7").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference8).HasColumnName(@"reference8").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference9).HasColumnName(@"reference9").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference10).HasColumnName(@"reference10").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference11).HasColumnName(@"reference11").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference12).HasColumnName(@"reference12").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference13).HasColumnName(@"reference13").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference14).HasColumnName(@"reference14").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference15).HasColumnName(@"reference15").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference16).HasColumnName(@"reference16").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference17).HasColumnName(@"reference17").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference18).HasColumnName(@"reference18").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference19).HasColumnName(@"reference19").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference20).HasColumnName(@"reference20").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference21).HasColumnName(@"reference21").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference22).HasColumnName(@"reference22").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference23).HasColumnName(@"reference23").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Refecence24).HasColumnName(@"refecence24").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference25).HasColumnName(@"reference25").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().HasKey(@"PublicCatalogDetailID");
        }

        partial void CustomizeTbPublicCatalogDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbRazonesFinancierasTmp Mapping

        private void TbRazonesFinancierasTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbRazonesFinancierasTmp>().ToTable(@"tb_razones_financieras_tmp", @"posme");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.RzID).HasColumnName(@"rzID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Token).HasColumnName(@"token").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Sequence).HasColumnName(@"sequence").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Simbol).HasColumnName(@"simbol").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(500).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().HasKey(@"RzID");
        }

        partial void CustomizeTbRazonesFinancierasTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbRelationship Mapping

        private void TbRelationshipMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbRelationship>().ToTable(@"tb_relationship", @"posme");
            modelBuilder.Entity<TbRelationship>().Property(x => x.RelationshipID).HasColumnName(@"relationshipID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbRelationship>().Property(x => x.EmployeeID).HasColumnName(@"employeeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRelationship>().Property(x => x.CustomerID).HasColumnName(@"customerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRelationship>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbRelationship>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbRelationship>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbRelationship>().Property(x => x.OrderNo).HasColumnName(@"orderNo").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRelationship>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRelationship>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRelationship>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRelationship>().Property(x => x.CustomerIDAfter).HasColumnName(@"customerIDAfter").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRelationship>().HasKey(@"RelationshipID");
        }

        partial void CustomizeTbRelationshipMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbRemember Mapping

        private void TbRememberMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbRemember>().ToTable(@"tb_remember", @"posme");
            modelBuilder.Entity<TbRemember>().Property(x => x.RememberID).HasColumnName(@"rememberID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbRemember>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.Title).HasColumnName(@"title").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRemember>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(500).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRemember>().Property(x => x.Period).HasColumnName(@"period").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.Day).HasColumnName(@"day").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.LastNotificationOn).HasColumnName(@"lastNotificationOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRemember>().Property(x => x.IsTemporal).HasColumnName(@"isTemporal").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbRemember>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbRemember>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRemember>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbRemember>().Property(x => x.TagID).HasColumnName(@"tagID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.LeerFile).HasColumnName(@"leerFile").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().HasKey(@"RememberID");
        }

        partial void CustomizeTbRememberMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbRole Mapping

        private void TbRoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbRole>().ToTable(@"tb_role", @"posme");
            modelBuilder.Entity<TbRole>().Property(x => x.RoleID).HasColumnName(@"roleID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbRole>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRole>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRole>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRole>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRole>().Property(x => x.IsAdmin).HasColumnName(@"isAdmin").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRole>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRole>().Property(x => x.UrlDefault).HasColumnName(@"urlDefault").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRole>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRole>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRole>().HasKey(@"RoleID");
        }

        partial void CustomizeTbRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbRoleAutorization Mapping

        private void TbRoleAutorizationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbRoleAutorization>().ToTable(@"tb_role_autorization", @"posme");
            modelBuilder.Entity<TbRoleAutorization>().Property(x => x.RoleAurotizationID).HasColumnName(@"roleAurotizationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbRoleAutorization>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRoleAutorization>().Property(x => x.ComponentAutorizationID).HasColumnName(@"componentAutorizationID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRoleAutorization>().Property(x => x.RoleID).HasColumnName(@"roleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRoleAutorization>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRoleAutorization>().HasKey(@"RoleAurotizationID");
        }

        partial void CustomizeTbRoleAutorizationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbSubelement Mapping

        private void TbSubelementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbSubelement>().ToTable(@"tb_subelement", @"posme");
            modelBuilder.Entity<TbSubelement>().Property(x => x.SubElementID).HasColumnName(@"subElementID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbSubelement>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbSubelement>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbSubelement>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbSubelement>().Property(x => x.CatalogID).HasColumnName(@"catalogID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbSubelement>().HasKey(@"SubElementID");
        }

        partial void CustomizeTbSubelementMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTag Mapping

        private void TbTagMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTag>().ToTable(@"tb_tag", @"posme");
            modelBuilder.Entity<TbTag>().Property(x => x.TagID).HasColumnName(@"tagID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTag>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().Property(x => x.SendEmail).HasColumnName(@"sendEmail").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().Property(x => x.SendNotificationApp).HasColumnName(@"sendNotificationApp").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().Property(x => x.SendSMS).HasColumnName(@"sendSMS").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().HasKey(@"TagID");
        }

        partial void CustomizeTbTagMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransaction Mapping

        private void TbTransactionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransaction>().ToTable(@"tb_transaction", @"posme");
            modelBuilder.Entity<TbTransaction>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransaction>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransaction>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransaction>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.IsCountable).HasColumnName(@"isCountable").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.GenerateTransactionNumber).HasColumnName(@"generateTransactionNumber").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.DecimalPlaces).HasColumnName(@"decimalPlaces").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.JournalTypeID).HasColumnName(@"journalTypeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.SignInventory).HasColumnName(@"signInventory").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.IsRevert).HasColumnName(@"isRevert").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().HasKey(@"TransactionID");
        }

        partial void CustomizeTbTransactionMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionCausal Mapping

        private void TbTransactionCausalMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionCausal>().ToTable(@"tb_transaction_causal", @"posme");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.TransactionCausalID).HasColumnName(@"transactionCausalID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.WarehouseSourceID).HasColumnName(@"warehouseSourceID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.WarehouseTargetID).HasColumnName(@"warehouseTargetID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.IsDefault).HasColumnName(@"isDefault").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbTransactionCausal>().HasKey(@"TransactionCausalID");
        }

        partial void CustomizeTbTransactionCausalMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionConcept Mapping

        private void TbTransactionConceptMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionConcept>().ToTable(@"tb_transaction_concept", @"posme");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.ConceptID).HasColumnName(@"conceptID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.Orden).HasColumnName(@"orden").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.Sign).HasColumnName(@"sign").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.Visible).HasColumnName(@"visible").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.Base).HasColumnName(@"base").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().HasKey(@"ConceptID");
        }

        partial void CustomizeTbTransactionConceptMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMaster Mapping

        private void TbTransactionMasterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMaster>().ToTable(@"tb_transaction_master", @"posme");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionNumber).HasColumnName(@"transactionNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionCausalID).HasColumnName(@"transactionCausalID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionOn).HasColumnName(@"transactionOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionOn2).HasColumnName(@"transactionOn2").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.StatusIDChangeOn).HasColumnName(@"statusIDChangeOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(3500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Sign).HasColumnName(@"sign").HasColumnType(@"smallint").ValueGeneratedOnAdd().HasPrecision(6, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CurrencyID2).HasColumnName(@"currencyID2").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.DescriptionReference).HasColumnName(@"descriptionReference").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(4000).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Amount).HasColumnName(@"amount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Tax1).HasColumnName(@"tax1").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Tax2).HasColumnName(@"tax2").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Tax3).HasColumnName(@"tax3").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Tax4).HasColumnName(@"tax4").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Discount).HasColumnName(@"discount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.SubAmount).HasColumnName(@"subAmount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.IsApplied).HasColumnName(@"isApplied").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.JournalEntryID).HasColumnName(@"journalEntryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.AreaID).HasColumnName(@"areaID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.PriorityID).HasColumnName(@"priorityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.SourceWarehouseID).HasColumnName(@"sourceWarehouseID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TargetWarehouseID).HasColumnName(@"targetWarehouseID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.IsTemplate).HasColumnName(@"isTemplate").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.PeriodPay).HasColumnName(@"periodPay").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.NextVisit).HasColumnName(@"nextVisit").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.NumberPhone).HasColumnName(@"numberPhone").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.NotificationID).HasColumnName(@"notificationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.PrinterQuantity).HasColumnName(@"printerQuantity").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.EntityIDSecondary).HasColumnName(@"entityIDSecondary").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.DayExcluded).HasColumnName(@"dayExcluded").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().HasKey(@"TransactionMasterID");
        }

        partial void CustomizeTbTransactionMasterMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterConcept Mapping

        private void TbTransactionMasterConceptMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterConcept>().ToTable(@"tb_transaction_master_concept", @"posme");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.TransactionMasterConceptID).HasColumnName(@"transactionMasterConceptID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.ConceptID).HasColumnName(@"conceptID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterConcept>().HasKey(@"TransactionMasterConceptID");
        }

        partial void CustomizeTbTransactionMasterConceptMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterDenomination Mapping

        private void TbTransactionMasterDenominationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterDenomination>().ToTable(@"tb_transaction_master_denomination", @"posme");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.TransactionMasterDenominationID).HasColumnName(@"transactionMasterDenominationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.CatalogItemID).HasColumnName(@"catalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"1.00000000");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.Ratio).HasColumnName(@"ratio").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"1.00000000");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDenomination>().HasKey(@"TransactionMasterDenominationID");
        }

        partial void CustomizeTbTransactionMasterDenominationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterDetail Mapping

        private void TbTransactionMasterDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterDetail>().ToTable(@"tb_transaction_master_detail", @"posme");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.TransactionMasterDetailID).HasColumnName(@"transactionMasterDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.PromotionID).HasColumnName(@"promotionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Amount).HasColumnName(@"amount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Cost).HasColumnName(@"cost").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Discount).HasColumnName(@"discount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.UnitaryAmount).HasColumnName(@"unitaryAmount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Tax1).HasColumnName(@"tax1").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Tax2).HasColumnName(@"tax2").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Tax3).HasColumnName(@"tax3").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Tax4).HasColumnName(@"tax4").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.UnitaryCost).HasColumnName(@"unitaryCost").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.UnitaryPrice).HasColumnName(@"unitaryPrice").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference5).HasColumnName(@"reference5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference7).HasColumnName(@"reference7").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.DescriptionReference).HasColumnName(@"descriptionReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(800).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ExchangeRateReference).HasColumnName(@"exchangeRateReference").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.CatalogStatusID).HasColumnName(@"catalogStatusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.InventoryStatusID).HasColumnName(@"inventoryStatusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.QuantityStock).HasColumnName(@"quantityStock").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.QuantiryStockInTraffic).HasColumnName(@"quantiryStockInTraffic").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.QuantityStockUnaswared).HasColumnName(@"quantityStockUnaswared").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.RemaingStock).HasColumnName(@"remaingStock").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Lote).HasColumnName(@"lote").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ExpirationDate).HasColumnName(@"expirationDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.InventoryWarehouseSourceID).HasColumnName(@"inventoryWarehouseSourceID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.InventoryWarehouseTargetID).HasColumnName(@"inventoryWarehouseTargetID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ItemFormulatedApplied).HasColumnName(@"itemFormulatedApplied").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.TypePriceID).HasColumnName(@"typePriceID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.SkuCatalogItemID).HasColumnName(@"skuCatalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.SkuQuantity).HasColumnName(@"skuQuantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.SkuQuantityBySku).HasColumnName(@"skuQuantityBySku").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.SkuFormatoDescription).HasColumnName(@"skuFormatoDescription").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ItemNameLog).HasColumnName(@"itemNameLog").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.AmountCommision).HasColumnName(@"amountCommision").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ItemNameDescriptionLog).HasColumnName(@"itemNameDescriptionLog").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().HasKey(@"TransactionMasterDetailID");
        }

        partial void CustomizeTbTransactionMasterDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterDetailCredit Mapping

        private void TbTransactionMasterDetailCreditMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().ToTable(@"tb_transaction_master_detail_credit", @"posme");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.TransactionMasterDetailCreditID).HasColumnName(@"transactionMasterDetailCreditID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.TransactionMasterDetailID).HasColumnName(@"transactionMasterDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Capital).HasColumnName(@"capital").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Interest).HasColumnName(@"interest").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.DayDalay).HasColumnName(@"dayDalay").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.InterestMora).HasColumnName(@"interestMora").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference5).HasColumnName(@"reference5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference7).HasColumnName(@"reference7").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference8).HasColumnName(@"reference8").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference9).HasColumnName(@"reference9").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().HasKey(@"TransactionMasterDetailCreditID");
        }

        partial void CustomizeTbTransactionMasterDetailCreditMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterDetailReference Mapping

        private void TbTransactionMasterDetailReferenceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterDetailReference>().ToTable(@"tb_transaction_master_detail_references", @"posme");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.TransactionMasterDetailRefereceID).HasColumnName(@"transactionMasterDetailRefereceID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.TransactionMasterDetailID).HasColumnName(@"transactionMasterDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.Sales).HasColumnName(@"sales").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"smallint").ValueGeneratedOnAdd().HasPrecision(6, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.Precio1).HasColumnName(@"precio1").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.Precio2).HasColumnName(@"precio2").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.Precio3).HasColumnName(@"precio3").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.Precio4).HasColumnName(@"precio4").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.Precio5).HasColumnName(@"precio5").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().Property(x => x.Precio6).HasColumnName(@"precio6").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetailReference>().HasKey(@"TransactionMasterDetailRefereceID");
        }

        partial void CustomizeTbTransactionMasterDetailReferenceMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterDetailTemp Mapping

        private void TbTransactionMasterDetailTempMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().ToTable(@"tb_transaction_master_detail_temp", @"posme");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.TransactionMasterDetailTemporalID).HasColumnName(@"transactionMasterDetailTemporalID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Token).HasColumnName(@"token").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.TransactionMasterDetailID).HasColumnName(@"transactionMasterDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.PromotionID).HasColumnName(@"promotionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Amount).HasColumnName(@"amount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Cost).HasColumnName(@"cost").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Discount).HasColumnName(@"discount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.UnitaryAmount).HasColumnName(@"unitaryAmount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Tax1).HasColumnName(@"tax1").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Tax2).HasColumnName(@"tax2").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Tax3).HasColumnName(@"tax3").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Tax4).HasColumnName(@"tax4").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.UnitaryCost).HasColumnName(@"unitaryCost").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.UnitaryPrice).HasColumnName(@"unitaryPrice").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference5).HasColumnName(@"reference5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference7).HasColumnName(@"reference7").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.DescriptionReference).HasColumnName(@"descriptionReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(800).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.ExchangeRateReference).HasColumnName(@"exchangeRateReference").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.CatalogStatusID).HasColumnName(@"catalogStatusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.InventoryStatusID).HasColumnName(@"inventoryStatusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.QuantityStock).HasColumnName(@"quantityStock").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.QuantiryStockInTraffic).HasColumnName(@"quantiryStockInTraffic").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.QuantityStockUnaswared).HasColumnName(@"quantityStockUnaswared").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.RemaingStock).HasColumnName(@"remaingStock").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.ExpirationDate).HasColumnName(@"expirationDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.InventoryWarehouseSourceID).HasColumnName(@"inventoryWarehouseSourceID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.InventoryWarehouseTargetID).HasColumnName(@"inventoryWarehouseTargetID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.ItemFormulatedApplied).HasColumnName(@"itemFormulatedApplied").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.TypePriceID).HasColumnName(@"typePriceID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.SkuCatalogItemID).HasColumnName(@"skuCatalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.SkuQuantity).HasColumnName(@"skuQuantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.SkuQuantityBySku).HasColumnName(@"skuQuantityBySku").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.SkuFormatoDescription).HasColumnName(@"skuFormatoDescription").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.ItemNameLog).HasColumnName(@"itemNameLog").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(450).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().HasKey(@"TransactionMasterDetailTemporalID");
        }

        partial void CustomizeTbTransactionMasterDetailTempMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterInfo Mapping

        private void TbTransactionMasterInfoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterInfo>().ToTable(@"tb_transaction_master_info", @"posme");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.TransactionMasterInfoID).HasColumnName(@"transactionMasterInfoID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ZoneID).HasColumnName(@"zoneID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.RouteID).HasColumnName(@"routeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.MesaID).HasColumnName(@"mesaID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReferenceClientName).HasColumnName(@"referenceClientName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReferenceClientIdentifier).HasColumnName(@"referenceClientIdentifier").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ChangeAmount).HasColumnName(@"changeAmount").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountPoint).HasColumnName(@"receiptAmountPoint").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmount).HasColumnName(@"receiptAmount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(19, 9).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountDol).HasColumnName(@"receiptAmountDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 5).HasDefaultValueSql(@"0.00000");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBank).HasColumnName(@"receiptAmountBank").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBankID).HasColumnName(@"receiptAmountBankID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBankReference).HasColumnName(@"receiptAmountBankReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBankDol).HasColumnName(@"receiptAmountBankDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBankDolID).HasColumnName(@"receiptAmountBankDolID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBankDolReference).HasColumnName(@"receiptAmountBankDolReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCard).HasColumnName(@"receiptAmountCard").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCardBankID).HasColumnName(@"receiptAmountCardBankID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCardBankReference).HasColumnName(@"receiptAmountCardBankReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCardDol).HasColumnName(@"receiptAmountCardDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCardBankDolID).HasColumnName(@"receiptAmountCardBankDolID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCardBankDolReference).HasColumnName(@"receiptAmountCardBankDolReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().HasKey(@"TransactionMasterInfoID");
        }

        partial void CustomizeTbTransactionMasterInfoMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterPurchase Mapping

        private void TbTransactionMasterPurchaseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterPurchase>().ToTable(@"tb_transaction_master_purchase", @"posme");
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.TransactionMasterPurchaseID).HasColumnName(@"transactionMasterPurchaseID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.PurchaseTypeID).HasColumnName(@"purchaseTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.TransportTypeID).HasColumnName(@"transportTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterPurchase>().HasKey(@"TransactionMasterPurchaseID");
        }

        partial void CustomizeTbTransactionMasterPurchaseMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterReference Mapping

        private void TbTransactionMasterReferenceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterReference>().ToTable(@"tb_transaction_master_references", @"posme");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.TransactionMasterReferenceID).HasColumnName(@"transactionMasterReferenceID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.TransactionReferenceNumber).HasColumnName(@"transactionReferenceNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Refernece4).HasColumnName(@"refernece4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Refernece5).HasColumnName(@"refernece5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference7).HasColumnName(@"reference7").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference8).HasColumnName(@"reference8").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Referecne9).HasColumnName(@"referecne9").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference10).HasColumnName(@"reference10").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference11).HasColumnName(@"reference11").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference12).HasColumnName(@"reference12").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference13).HasColumnName(@"reference13").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference14).HasColumnName(@"reference14").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference15).HasColumnName(@"reference15").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference16).HasColumnName(@"reference16").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference17).HasColumnName(@"reference17").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference18).HasColumnName(@"reference18").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference19).HasColumnName(@"reference19").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference20).HasColumnName(@"reference20").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference21).HasColumnName(@"reference21").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference22).HasColumnName(@"reference22").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().HasKey(@"TransactionMasterReferenceID");
        }

        partial void CustomizeTbTransactionMasterReferenceMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterSummaryConceptTmp Mapping

        private void TbTransactionMasterSummaryConceptTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().ToTable(@"tb_transaction_master_summary_concept_tmp", @"posme");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.TransactionMasterCausalID).HasColumnName(@"transactionMasterCausalID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.JournalEntryID).HasColumnName(@"journalEntryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.TransactionNumber).HasColumnName(@"transactionNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.TransactionDate).HasColumnName(@"transactionDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(26, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.ConceptID).HasColumnName(@"conceptID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(26, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().HasKey(@"ID");
        }

        partial void CustomizeTbTransactionMasterSummaryConceptTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionProfileDetail Mapping

        private void TbTransactionProfileDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionProfileDetail>().ToTable(@"tb_transaction_profile_detail", @"posme");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.ProfileDetailID).HasColumnName(@"profileDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.TransactionCausalID).HasColumnName(@"transactionCausalID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.ConceptID).HasColumnName(@"conceptID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.Sign).HasColumnName(@"sign").HasColumnType(@"char").IsRequired().ValueGeneratedNever().HasMaxLength(1).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransactionProfileDetail>().HasKey(@"ProfileDetailID");
        }

        partial void CustomizeTbTransactionProfileDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionProfileDetailTmp Mapping

        private void TbTransactionProfileDetailTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().ToTable(@"tb_transaction_profile_detail_tmp", @"posme");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.TransactionProfileDetailTmpID).HasColumnName(@"transactionProfileDetailTmpID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.TransactionCausalID).HasColumnName(@"transactionCausalID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.ConceptID).HasColumnName(@"conceptID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(26, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(26, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().HasKey(@"TransactionProfileDetailTmpID");
        }

        partial void CustomizeTbTransactionProfileDetailTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTypeMenuElement Mapping

        private void TbTypeMenuElementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTypeMenuElement>().ToTable(@"tb_type_menu_element", @"posme");
            modelBuilder.Entity<TbTypeMenuElement>().Property(x => x.TypeMenuElementID).HasColumnName(@"typeMenuElementID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTypeMenuElement>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTypeMenuElement>().HasKey(@"TypeMenuElementID");
        }

        partial void CustomizeTbTypeMenuElementMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbUser Mapping

        private void TbUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbUser>().ToTable(@"tb_user", @"posme");
            modelBuilder.Entity<TbUser>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbUser>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUser>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUser>().Property(x => x.Nickname).HasColumnName(@"nickname").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.Password).HasColumnName(@"password").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbUser>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUser>().Property(x => x.EmployeeID).HasColumnName(@"employeeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUser>().Property(x => x.UseMobile).HasColumnName(@"useMobile").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUser>().Property(x => x.Phone).HasColumnName(@"phone").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.LastPayment).HasColumnName(@"lastPayment").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.Comercio).HasColumnName(@"comercio").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.Foto).HasColumnName(@"foto").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.TokenGoogleCalendar).HasColumnName(@"token_google_calendar").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1200).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.LocationID).HasColumnName(@"locationID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUser>().HasKey(@"UserID");
        }

        partial void CustomizeTbUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbUserPermission Mapping

        private void TbUserPermissionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbUserPermission>().ToTable(@"tb_user_permission", @"posme");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.UserPermissionID).HasColumnName(@"userPermissionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbUserPermission>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.RoleID).HasColumnName(@"roleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.Selected).HasColumnName(@"selected").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.Inserted).HasColumnName(@"inserted").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.Deleted).HasColumnName(@"deleted").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.Edited).HasColumnName(@"edited").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUserPermission>().HasKey(@"UserPermissionID");
        }

        partial void CustomizeTbUserPermissionMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbUserTag Mapping

        private void TbUserTagMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbUserTag>().ToTable(@"tb_user_tag", @"posme");
            modelBuilder.Entity<TbUserTag>().Property(x => x.UserTagID).HasColumnName(@"userTagID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbUserTag>().Property(x => x.TagID).HasColumnName(@"tagID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserTag>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserTag>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserTag>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserTag>().HasKey(@"UserTagID");
        }

        partial void CustomizeTbUserTagMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbUserWarehouse Mapping

        private void TbUserWarehouseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbUserWarehouse>().ToTable(@"tb_user_warehouse", @"posme");
            modelBuilder.Entity<TbUserWarehouse>().Property(x => x.UserWarehouseID).HasColumnName(@"userWarehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbUserWarehouse>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserWarehouse>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserWarehouse>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserWarehouse>().Property(x => x.WarehouseID).HasColumnName(@"warehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserWarehouse>().HasKey(@"UserWarehouseID");
        }

        partial void CustomizeTbUserWarehouseMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbWarehouse Mapping

        private void TbWarehouseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbWarehouse>().ToTable(@"tb_warehouse", @"posme");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.WarehouseID).HasColumnName(@"warehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbWarehouse>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.TypeWarehouse).HasColumnName(@"typeWarehouse").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.EmailResponsability).HasColumnName(@"emailResponsability").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWarehouse>().HasKey(@"WarehouseID");
        }

        partial void CustomizeTbWarehouseMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbWorkflow Mapping

        private void TbWorkflowMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbWorkflow>().ToTable(@"tb_workflow", @"posme");
            modelBuilder.Entity<TbWorkflow>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbWorkflow>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflow>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflow>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflow>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflow>().HasKey(@"WorkflowID");
        }

        partial void CustomizeTbWorkflowMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbWorkflowStage Mapping

        private void TbWorkflowStageMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbWorkflowStage>().ToTable(@"tb_workflow_stage", @"posme");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.WorkflowStageID).HasColumnName(@"workflowStageID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.EditableParcial).HasColumnName(@"editableParcial").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.EditableTotal).HasColumnName(@"editableTotal").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Eliminable).HasColumnName(@"eliminable").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Aplicable).HasColumnName(@"aplicable").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Vinculable).HasColumnName(@"vinculable").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.IsInit).HasColumnName(@"isInit").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStage>().HasKey(@"WorkflowStageID");
        }

        partial void CustomizeTbWorkflowStageMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbWorkflowStageAffect Mapping

        private void TbWorkflowStageAffectMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbWorkflowStageAffect>().ToTable(@"tb_workflow_stage_affect", @"posme");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.WorkflowStageAffectID).HasColumnName(@"workflowStageAffectID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.TransactionCausalID).HasColumnName(@"transactionCausalID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.ComponentSourceID).HasColumnName(@"componentSourceID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.WorkflowSourceID).HasColumnName(@"workflowSourceID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.WorkflowSourceStageID).HasColumnName(@"workflowSourceStageID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.ComponentTargetID).HasColumnName(@"componentTargetID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.WorkflowTargetID).HasColumnName(@"workflowTargetID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.WorkflowTargetStageID).HasColumnName(@"workflowTargetStageID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.Condition1).HasColumnName(@"condition1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.Condition2).HasColumnName(@"condition2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.Condition3).HasColumnName(@"condition3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageAffect>().HasKey(@"WorkflowStageAffectID");
        }

        partial void CustomizeTbWorkflowStageAffectMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbWorkflowStageChangeLog Mapping

        private void TbWorkflowStageChangeLogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbWorkflowStageChangeLog>().ToTable(@"tb_workflow_stage_change_log", @"posme");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.WorkflowStageChangeLogID).HasColumnName(@"workflowStageChangeLogID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.WorkflowStageID).HasColumnName(@"workflowStageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().HasKey(@"WorkflowStageChangeLogID");
        }

        partial void CustomizeTbWorkflowStageChangeLogMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbWorkflowStageRelation Mapping

        private void TbWorkflowStageRelationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbWorkflowStageRelation>().ToTable(@"tb_workflow_stage_relation", @"posme");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.WorkflowStageRelationID).HasColumnName(@"workflowStageRelationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.WorkflowStageID).HasColumnName(@"workflowStageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.WorkflowStageTargetID).HasColumnName(@"workflowStageTargetID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.NecesitaAuth).HasColumnName(@"necesitaAuth").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.AuthRolID).HasColumnName(@"AuthRolID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageRelation>().HasKey(@"WorkflowStageRelationID");
        }

        partial void CustomizeTbWorkflowStageRelationMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwContabilidadComprobante Mapping

        private void VwContabilidadComprobanteMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwContabilidadComprobante>().HasNoKey();
            modelBuilder.Entity<VwContabilidadComprobante>().ToView(@"vw_contabilidad_comprobantes", @"posme");
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.CodigoComprobante).HasColumnName(@"CodigoComprobante").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.FechaComprobante).HasColumnName(@"FechaComprobante").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.TipoCambioComprobante).HasColumnName(@"TipoCambioComprobante").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.EstadoComprobante).HasColumnName(@"EstadoComprobante").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.DebitoComprobante).HasColumnName(@"DebitoComprobante").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.CrditoComprobante).HasColumnName(@"CrditoComprobante").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.TipoComprobante).HasColumnName(@"TipoComprobante").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.MonedaComprobante).HasColumnName(@"MonedaComprobante").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.CentroCostoCuenta).HasColumnName(@"CentroCostoCuenta").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.CodigoCuenta).HasColumnName(@"CodigoCuenta").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(251);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.NombreCuenta).HasColumnName(@"NombreCuenta").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.DebitoCuenta).HasColumnName(@"DebitoCuenta").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.CreditoCuenta).HasColumnName(@"CreditoCuenta").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.TipoCuenta).HasColumnName(@"TipoCuenta").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(350);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.BeneficiarioComprobante).HasColumnName(@"BeneficiarioComprobante").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.NotaComprobante).HasColumnName(@"NotaComprobante").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(550);
        }

        partial void CustomizeVwContabilidadComprobanteMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwCxcCustomerListRealEstate Mapping

        private void VwCxcCustomerListRealEstateMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().HasNoKey();
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().ToView(@"vw_cxc_customer_list_real_estate", @"posme");
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Codigo).HasColumnName(@"Codigo").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(305);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Contacto).HasColumnName(@"Contacto").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Modificacion).HasColumnName(@"Modificacion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(65);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Cliente).HasColumnName(@"Cliente").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(310);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Sexo).HasColumnName(@"Sexo").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(305);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Email).HasColumnName(@"Email").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(305);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Estado).HasColumnName(@"Estado").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(305);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Clasificacion).HasColumnName(@"Clasificacion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(305);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Categoria).HasColumnName(@"Categoria").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(305);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Presupuesto).HasColumnName(@"Presupuesto").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(67);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Telefono).HasColumnName(@"Telefono").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(310);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.UbicacionInteres).HasColumnName(@"Ubicacion Interes").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(305);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Agente).HasColumnName(@"Agente").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(310);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Encuentra24).HasColumnName(@"Encuentra 24").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(305);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Mensaje).HasColumnName(@"Mensaje").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(305);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Comentario1).HasColumnName(@"Comentario 1").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(310);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Comentario2).HasColumnName(@"Comentario 2").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(310);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Ubicacion).HasColumnName(@"Ubicacion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(310);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Formadecontacto).HasColumnName(@"Forma de contacto").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(305);
        }

        partial void CustomizeVwCxcCustomerListRealEstateMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaBalance Mapping

        private void VwGerenciaBalanceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaBalance>().HasNoKey();
            modelBuilder.Entity<VwGerenciaBalance>().ToView(@"vw_gerencia_balance", @"posme");
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.CentroCosto).HasColumnName(@"CentroCosto").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.Cuenta).HasColumnName(@"Cuenta").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(503);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.Ano).HasColumnName(@"Ano").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.Mes).HasColumnName(@"Mes").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.MesOnly).HasColumnName(@"MesOnly").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.CsaldoInicial).HasColumnName(@"C$saldoInicial").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 8);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.CsaldoFinal).HasColumnName(@"C$saldoFinal").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(20, 8);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.CsaldoMensual).HasColumnName(@"C$saldoMensual").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8);
        }

        partial void CustomizeVwGerenciaBalanceMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaCustomer Mapping

        private void VwGerenciaCustomerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaCustomer>().HasNoKey();
            modelBuilder.Entity<VwGerenciaCustomer>().ToView(@"vw_gerencia_customer", @"posme");
            modelBuilder.Entity<VwGerenciaCustomer>().Property(x => x.CustomerNumber).HasColumnName(@"customerNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaCustomer>().Property(x => x.FirstName).HasColumnName(@"firstName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwGerenciaCustomer>().Property(x => x.Identification).HasColumnName(@"identification").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaCustomer>().Property(x => x.BirthDate).HasColumnName(@"birthDate").HasColumnType(@"date").ValueGeneratedNever();
        }

        partial void CustomizeVwGerenciaCustomerMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaDesembolsosDetalle Mapping

        private void VwGerenciaDesembolsosDetalleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().HasNoKey();
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().ToView(@"vw_gerencia_desembolsos_detalle", @"posme");
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Colaborador).HasColumnName(@"Colaborador").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.NombreColaborador).HasColumnName(@"NombreColaborador").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Cliente).HasColumnName(@"Cliente").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.NombreCliente).HasColumnName(@"NombreCliente").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Factura).HasColumnName(@"Factura").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CreditAmortizationID).HasColumnName(@"creditAmortizationID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.FechaCuota).HasColumnName(@"FechaCuota").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.AnoCuota).HasColumnName(@"AnoCuota").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Mes1Cuota).HasColumnName(@"Mes1Cuota").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Mes2Cuota).HasColumnName(@"Mes2Cuota").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CBalanceStartCuota).HasColumnName(@"C$BalanceStartCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CInteresCuota).HasColumnName(@"C$InteresCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CCapitalCuota).HasColumnName(@"C$CapitalCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CBalanceEndCuota).HasColumnName(@"C$BalanceEndCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CShareCuota).HasColumnName(@"C$ShareCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CRemainingCuota).HasColumnName(@"C$RemainingCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CshareCapital).HasColumnName(@"C$shareCapital").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.EstadoCuota).HasColumnName(@"EstadoCuota").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.DiasAtrazoCuota).HasColumnName(@"diasAtrazoCuota").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Moneda).HasColumnName(@"Moneda").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.TipoCambioActual).HasColumnName(@"TipoCambioActual").HasColumnType(@"double").ValueGeneratedNever();
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CCapitalPagado).HasColumnName(@"C$CapitalPagado").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CCapitalPendiente).HasColumnName(@"C$CapitalPendiente").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CIntaresPagado).HasColumnName(@"C$IntaresPagado").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CInteresPendiente).HasColumnName(@"C$InteresPendiente").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
        }

        partial void CustomizeVwGerenciaDesembolsosDetalleMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaDesembolsosResuman Mapping

        private void VwGerenciaDesembolsosResumanMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().HasNoKey();
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().ToView(@"vw_gerencia_desembolsos_resumen", @"posme");
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.CodigoCliente).HasColumnName(@"CodigoCliente").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Moneda).HasColumnName(@"Moneda").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Edad).HasColumnName(@"Edad").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(5, 0);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.CMonto).HasColumnName(@"C$Monto").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(17, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.CBalance).HasColumnName(@"C$Balance").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(17, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.CProvisionado).HasColumnName(@"C$Provisionado").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(17, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Estado).HasColumnName(@"Estado").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Interes).HasColumnName(@"Interes").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Plazo).HasColumnName(@"Plazo").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.TipoCambio).HasColumnName(@"TipoCambio").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.TipoAmortizacion).HasColumnName(@"TipoAmortizacion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.PeriodoPago).HasColumnName(@"PeriodoPago").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Anio).HasColumnName(@"Anio").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Mes).HasColumnName(@"Mes").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.MesUnicamente).HasColumnName(@"MesUnicamente").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Factura).HasColumnName(@"Factura").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
        }

        partial void CustomizeVwGerenciaDesembolsosResumanMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaEstadoResultado001 Mapping

        private void VwGerenciaEstadoResultado001Mapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().HasNoKey();
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().ToView(@"vw_gerencia_estado_resultado_001", @"posme");
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.Cuenta).HasColumnName(@"Cuenta").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(503);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.Ano).HasColumnName(@"Ano").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.Mes).HasColumnName(@"Mes").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.MesOnly).HasColumnName(@"MesOnly").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.CsaldoInicial).HasColumnName(@"C$saldoInicial").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(19, 8);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.CsaldoFinal).HasColumnName(@"C$saldoFinal").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(21, 8);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.CsaldoMensual).HasColumnName(@"C$saldoMensual").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(20, 8);
        }

        partial void CustomizeVwGerenciaEstadoResultado001Mapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaEstadoResultado002 Mapping

        private void VwGerenciaEstadoResultado002Mapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().HasNoKey();
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().ToView(@"vw_gerencia_estado_resultado_002", @"posme");
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.Ano).HasColumnName(@"Ano").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.Mes).HasColumnName(@"Mes").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.MesOnly).HasColumnName(@"MesOnly").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.CsaldoInicial).HasColumnName(@"C$saldoInicial").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(41, 8);
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.CsaldoFinal).HasColumnName(@"C$saldoFinal").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(43, 8);
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.CsaldoMensual).HasColumnName(@"C$saldoMensual").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(42, 8);
        }

        partial void CustomizeVwGerenciaEstadoResultado002Mapping(ModelBuilder modelBuilder);

        #endregion

        #region VwInventoryListItemRealEstate Mapping

        private void VwInventoryListItemRealEstateMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwInventoryListItemRealEstate>().HasNoKey();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().ToView(@"vw_inventory_list_item_real_estate", @"posme");
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Codigointerno).HasColumnName(@"Codigo interno").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(121);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Codigo).HasColumnName(@"Codigo").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PaginaWebUrl).HasColumnName(@"Pagina Web Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(1200);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PaginaWeb).HasColumnName(@"Pagina Web").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Amueblado).HasColumnName(@"Amueblado").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Aires).HasColumnName(@"Aires").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Niveles).HasColumnName(@"Niveles").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Horadevisita).HasColumnName(@"Hora de visita").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Baños).HasColumnName(@"Baños").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Habitaciones).HasColumnName(@"Habitaciones").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Diseñodepropiedad).HasColumnName(@"Diseño de propiedad").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Tipodecasa).HasColumnName(@"Tipo de casa").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Proposito).HasColumnName(@"Proposito").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Moneda).HasColumnName(@"Moneda").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Fechadeenlistamiento).HasColumnName(@"Fecha de enlistamiento").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Fechadeactualizacion).HasColumnName(@"Fecha de actualizacion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PrecioVenta).HasColumnName(@"Precio Venta").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(19, 8);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PrecioRenta).HasColumnName(@"Precio Renta").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(19, 8);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Disponible).HasColumnName(@"Disponible").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.AreadecontruccionM2).HasColumnName(@"Area de contruccion M2").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.AreadeterrenoV2).HasColumnName(@"Area de terreno V2").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.IDEncuentra24).HasColumnName(@"ID Encuentra 24").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Bañodeservicio).HasColumnName(@"Baño de servicio").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Bañodevisita).HasColumnName(@"Baño de visita").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Cuartodeservicio).HasColumnName(@"Cuarto de servicio").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Walkincloset).HasColumnName(@"Walk in closet").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Piscinaprivada).HasColumnName(@"Piscina privada").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Areaclubconpiscina).HasColumnName(@"Area club con piscina").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Aceptamascota).HasColumnName(@"Acepta mascota").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Corretaje).HasColumnName(@"Corretaje").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Plandereferido).HasColumnName(@"Plan de referido").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.LinkYoutubeUrl).HasColumnName(@"Link Youtube Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.LinkYoutube).HasColumnName(@"Link Youtube").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PaginaWebLinkUrl).HasColumnName(@"Pagina Web Link Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PaginaWebLink).HasColumnName(@"Pagina Web Link").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.FotoUrl).HasColumnName(@"Foto Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Foto).HasColumnName(@"Foto").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.GoogleUrl).HasColumnName(@"Google Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Google).HasColumnName(@"Google").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.OtrosLinkUrl).HasColumnName(@"Otros Link Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.OtrosLink).HasColumnName(@"Otros Link").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Estilodecocina).HasColumnName(@"Estilo de cocina").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Agente).HasColumnName(@"Agente").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Zona).HasColumnName(@"Zona").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Condominio).HasColumnName(@"Condominio").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Ubicacion).HasColumnName(@"Ubicacion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Exclusividaddeagente).HasColumnName(@"Exclusividad de agente").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Pais).HasColumnName(@"Pais").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Estado).HasColumnName(@"Estado").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Ciudad).HasColumnName(@"Ciudad").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Telefono).HasColumnName(@"Telefono").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedNever().HasPrecision(1, 0);
        }

        partial void CustomizeVwInventoryListItemRealEstateMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwSalesInventory Mapping

        private void VwSalesInventoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwSalesInventory>().HasNoKey();
            modelBuilder.Entity<VwSalesInventory>().ToView(@"vw_sales_inventory", @"posme");
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.CreatedOnDay).HasColumnName(@"createdOnDay").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(3, 0);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Currency).HasColumnName(@"currency").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Tipo).HasColumnName(@"tipo").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Causal).HasColumnName(@"causal").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.TransactionNumber).HasColumnName(@"transactionNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.StatusName).HasColumnName(@"statusName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.CompaniaName).HasColumnName(@"companiaName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.WarehouseName).HasColumnName(@"warehouseName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.CustomerNumber).HasColumnName(@"customerNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.FirstName).HasColumnName(@"firstName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.ItemNumber).HasColumnName(@"itemNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.CategoryName).HasColumnName(@"categoryName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.TipoCambio).HasColumnName(@"tipoCambio").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(9, 4);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.UnitaryCost).HasColumnName(@"unitaryCost").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Cost).HasColumnName(@"cost").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(36, 8);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.UnitaryAmount).HasColumnName(@"unitaryAmount").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(27, 8);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Amount).HasColumnName(@"amount").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(27, 8);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Utility).HasColumnName(@"utility").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(37, 8);
        }

        partial void CustomizeVwSalesInventoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwSinRiesgoReporteCliente Mapping

        private void VwSinRiesgoReporteClienteMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().HasNoKey();
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().ToView(@"vw_sin_riesgo_reporte_clientes", @"posme");
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.FECHAREPORTE).HasColumnName(@"FECHA REPORTE").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.IDENTIFICACION).HasColumnName(@"IDENTIFICACION").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.TIPODEPERSONA).HasColumnName(@"TIPO DE PERSONA").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.NACIONALIDAD).HasColumnName(@"NACIONALIDAD").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(12);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.SEXO).HasColumnName(@"SEXO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.FECHADENACIMIENTO).HasColumnName(@"FECHA DE NACIMIENTO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.ESTADOCIVIL).HasColumnName(@"ESTADO CIVIL").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.DIRECCION).HasColumnName(@"DIRECCION").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(1500);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.DEPARTAMENTO).HasColumnName(@"DEPARTAMENTO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.MUNICIPIO).HasColumnName(@"MUNICIPIO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.DIRECCIONDETRABAJO).HasColumnName(@"DIRECCION DE TRABAJO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(1500);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.DEPARTAMENTODETRABAJO).HasColumnName(@"DEPARTAMENTO DE TRABAJO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.MUNICIPIODETRABAJO).HasColumnName(@"MUNICIPIO DE TRABAJO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.TELEFONODOMICILIAR).HasColumnName(@"TELEFONO DOMICILIAR").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.TELEFONOTRABAJO).HasColumnName(@"TELEFONO TRABAJO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.CELULAR).HasColumnName(@"CELULAR").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.CORREOELECTRONICO).HasColumnName(@"CORREO ELECTRONICO").HasColumnType(@"char").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.OCUPACION).HasColumnName(@"OCUPACION").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.ACTIVIDADECONOMICA).HasColumnName(@"ACTIVIDAD ECONOMICA").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(8);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.SECTOR).HasColumnName(@"SECTOR").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(7);
        }

        partial void CustomizeVwSinRiesgoReporteClienteMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwSinRiesgoReporteCredito Mapping

        private void VwSinRiesgoReporteCreditoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().HasNoKey();
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().ToView(@"vw_sin_riesgo_reporte_creditos", @"posme");
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.CustomerCreditDocumentID).HasColumnName(@"customerCreditDocumentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.TIPODEENTIDAD).HasColumnName(@"TIPO DE ENTIDAD").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.NUMEROCORRELATIVO).HasColumnName(@"NUMERO CORRELATIVO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.FECHADEREPORTE).HasColumnName(@"FECHA DE REPORTE").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.DEPARTAMENTO).HasColumnName(@"DEPARTAMENTO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.NUMERODECEDULAORUC).HasColumnName(@"NUMERO DE CEDULA O RUC").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.NOMBREDEPERSONA).HasColumnName(@"NOMBRE DE PERSONA").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(506);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.TIPODECREDITO).HasColumnName(@"TIPO DE CREDITO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.FECHADEDESEMBOLSO).HasColumnName(@"FECHA DE DESEMBOLSO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.TIPODEOBLIGACION).HasColumnName(@"TIPO DE OBLIGACION").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.MONTOAUTORIZADO).HasColumnName(@"MONTO AUTORIZADO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(11, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.PLAZO).HasColumnName(@"PLAZO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(13, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.FRECUENCIADEPAGO).HasColumnName(@"FRECUENCIA DE PAGO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.SALDODEUDA).HasColumnName(@"SALDO DEUDA").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(11, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.ESTADO).HasColumnName(@"ESTADO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.MONTOVENCIDO).HasColumnName(@"MONTO VENCIDO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(34, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.ANTIGUEDADDEMORA).HasColumnName(@"ANTIGUEDAD DE MORA").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(7, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.TIPODEGARANTIA).HasColumnName(@"TIPO DE GARANTIA").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.FORMADERECUPERACION).HasColumnName(@"FORMA DE RECUPERACION").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.NUMERODECREDITO).HasColumnName(@"NUMERO DE CREDITO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.VALORDELACUOTA).HasColumnName(@"VALOR DE LA CUOTA").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(32, 2);
        }

        partial void CustomizeVwSinRiesgoReporteCreditoMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwSinRiesgoReporteCreditosToSystema Mapping

        private void VwSinRiesgoReporteCreditosToSystemaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().HasNoKey();
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().ToView(@"vw_sin_riesgo_reporte_creditos_to_systema", @"posme");
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.TIPODEENTIDAD).HasColumnName(@"TIPO_DE_ENTIDAD").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.NUMEROCORRELATIVO).HasColumnName(@"NUMERO_CORRELATIVO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.FECHADEREPORTE).HasColumnName(@"FECHA_DE_REPORTE").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.DEPARTAMENTO).HasColumnName(@"DEPARTAMENTO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.NUMERODECEDULAORUC).HasColumnName(@"NUMERO_DE_CEDULA_O_RUC").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.NOMBREDEPERSONA).HasColumnName(@"NOMBRE_DE_PERSONA").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(506);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.TIPODECREDITO).HasColumnName(@"TIPO_DE_CREDITO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.FECHADEDESEMBOLSO).HasColumnName(@"FECHA_DE_DESEMBOLSO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.TIPODEOBLIGACION).HasColumnName(@"TIPO_DE_OBLIGACION").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.MONTOAUTORIZADO).HasColumnName(@"MONTO_AUTORIZADO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(11, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.PLAZO).HasColumnName(@"PLAZO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(13, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.FRECUENCIADEPAGO).HasColumnName(@"FRECUENCIA_DE_PAGO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.SALDODEUDA).HasColumnName(@"SALDO_DEUDA").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(11, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.ESTADO).HasColumnName(@"ESTADO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.MONTOVENCIDO).HasColumnName(@"MONTO_VENCIDO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(34, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.ANTIGUEDADDEMORA).HasColumnName(@"ANTIGUEDAD_DE_MORA").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(7, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.TIPODEGARANTIA).HasColumnName(@"TIPO_DE_GARANTIA").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.FORMADERECUPERACION).HasColumnName(@"FORMA_DE_RECUPERACION").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.NUMERODECREDITO).HasColumnName(@"NUMERO_DE_CREDITO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.VALORDELACUOTA).HasColumnName(@"VALOR_DE_LA_CUOTA").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(32, 2);
        }

        partial void CustomizeVwSinRiesgoReporteCreditosToSystemaMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwTransaccionMasterConcept232425 Mapping

        private void VwTransaccionMasterConcept232425Mapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().HasNoKey();
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().ToView(@"vw_transaccion_master_concept_232425", @"posme");
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Descripcion).HasColumnName(@"Descripcion").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Documento).HasColumnName(@"Documento").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Moneda).HasColumnName(@"Moneda").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Concepto).HasColumnName(@"Concepto").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Valor).HasColumnName(@"Valor").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Componente).HasColumnName(@"Componente").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Referencia1).HasColumnName(@"Referencia1").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
        }

        partial void CustomizeVwTransaccionMasterConcept232425Mapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyComponentRelation Mapping

        private void TbCompanyComponentRelationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyComponentRelation>().ToTable(@"tb_company_component_relation", @"posme");
            modelBuilder.Entity<TbCompanyComponentRelation>().Property(x => x.CompanyComponentRelationID).HasColumnName(@"companyComponentRelationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyComponentRelation>().Property(x => x.ComponentIDSource).HasColumnName(@"componentIDSource").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentRelation>().Property(x => x.ComponentItemIDSource).HasColumnName(@"componentItemIDSource").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentRelation>().Property(x => x.ComponentIDTarget).HasColumnName(@"componentIDTarget").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentRelation>().Property(x => x.ComponentItemIDTarget).HasColumnName(@"componentItemIDTarget").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentRelation>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentRelation>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1000).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentRelation>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentRelation>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentRelation>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentRelation>().HasKey(@"CompanyComponentRelationID");
        }

        partial void CustomizeTbCompanyComponentRelationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyPageSetting Mapping

        private void TbCompanyPageSettingMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyPageSetting>().ToTable(@"tb_company_page_setting", @"posme");
            modelBuilder.Entity<TbCompanyPageSetting>().Property(x => x.CustomPageID).HasColumnName(@"customPageID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyPageSetting>().Property(x => x.Namei).HasColumnName(@"namei").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSetting>().Property(x => x.Keyi).HasColumnName(@"keyi").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSetting>().Property(x => x.Controller).HasColumnName(@"controller").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSetting>().Property(x => x.Method).HasColumnName(@"method").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSetting>().Property(x => x.Type).HasColumnName(@"type").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSetting>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSetting>().Property(x => x.Element).HasColumnName(@"element").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSetting>().Property(x => x.Valuei).HasColumnName(@"valuei").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(4000).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSetting>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSetting>().HasKey(@"CustomPageID");
        }

        partial void CustomizeTbCompanyPageSettingMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyPageSettingLarge Mapping

        private void TbCompanyPageSettingLargeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyPageSettingLarge>().ToTable(@"tb_company_page_setting_large", @"posme");
            modelBuilder.Entity<TbCompanyPageSettingLarge>().Property(x => x.CustomPageLargeID).HasColumnName(@"customPageLargeID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyPageSettingLarge>().Property(x => x.Namei).HasColumnName(@"namei").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSettingLarge>().Property(x => x.Keyi).HasColumnName(@"keyi").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSettingLarge>().Property(x => x.Controller).HasColumnName(@"controller").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSettingLarge>().Property(x => x.Method).HasColumnName(@"method").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSettingLarge>().Property(x => x.Type).HasColumnName(@"type").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSettingLarge>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSettingLarge>().Property(x => x.Element).HasColumnName(@"element").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSettingLarge>().Property(x => x.Valuei).HasColumnName(@"valuei").HasColumnType(@"blob").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSettingLarge>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyPageSettingLarge>().HasKey(@"CustomPageLargeID");
        }

        partial void CustomizeTbCompanyPageSettingLargeMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbReporting Mapping

        private void TbReportingMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbReporting>().ToTable(@"tb_reporting", @"posme");
            modelBuilder.Entity<TbReporting>().Property(x => x.ReportID).HasColumnName(@"reportID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbReporting>().Property(x => x.Keyi).HasColumnName(@"keyi").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReporting>().Property(x => x.Namei).HasColumnName(@"namei").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReporting>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReporting>().Property(x => x.UrlReport).HasColumnName(@"urlReport").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReporting>().Property(x => x.UrlReportProcess).HasColumnName(@"urlReportProcess").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReporting>().Property(x => x.Ranking).HasColumnName(@"ranking").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReporting>().Property(x => x.IsMobile).HasColumnName(@"isMobile").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReporting>().Property(x => x.Queryi).HasColumnName(@"queryi").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(5000).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReporting>().Property(x => x.NeedAutenticated).HasColumnName(@"needAutenticated").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReporting>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReporting>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbReporting>().HasKey(@"ReportID");
        }

        partial void CustomizeTbReportingMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbReportingParameter Mapping

        private void TbReportingParameterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbReportingParameter>().ToTable(@"tb_reporting_parameter", @"posme");
            modelBuilder.Entity<TbReportingParameter>().Property(x => x.ReportParameterID).HasColumnName(@"reportParameterID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbReportingParameter>().Property(x => x.ReportID).HasColumnName(@"reportID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingParameter>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingParameter>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingParameter>().Property(x => x.Orden).HasColumnName(@"orden").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingParameter>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingParameter>().Property(x => x.Type).HasColumnName(@"type").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingParameter>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingParameter>().Property(x => x.Datasource).HasColumnName(@"datasource").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingParameter>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingParameter>().HasKey(@"ReportParameterID");
        }

        partial void CustomizeTbReportingParameterMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbReportingResult Mapping

        private void TbReportingResultMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbReportingResult>().ToTable(@"tb_reporting_result", @"posme");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.ReportResultID).HasColumnName(@"reportResultID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbReportingResult>().Property(x => x.ReportID).HasColumnName(@"reportID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.ResultNumber).HasColumnName(@"resultNumber").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.Title).HasColumnName(@"title").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.Source).HasColumnName(@"source").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.Prefix).HasColumnName(@"prefix").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.Sumary).HasColumnName(@"sumary").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.Type).HasColumnName(@"type").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.ReportStyle).HasColumnName(@"reportStyle").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.Width).HasColumnName(@"width").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.Sufix).HasColumnName(@"sufix").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.IsSequence).HasColumnName(@"isSequence").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.Sequence).HasColumnName(@"sequence").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.TableTitle).HasColumnName(@"tableTitle").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.TableWidth).HasColumnName(@"tableWidth").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.TableNumberColumn).HasColumnName(@"tableNumberColumn").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbReportingResult>().HasKey(@"ReportResultID");
        }

        partial void CustomizeTbReportingResultMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }

    public class PrAccountingGetReportAuxiliarAccountMultipleResult
    {

        public PrAccountingGetReportAuxiliarAccountMultipleResult()
        {
          PrAccountingGetReportAuxiliarAccountResults = new List<PrAccountingGetReportAuxiliarAccountResult>();
          PrAccountingGetReportAuxiliarAccountResult1s = new List<PrAccountingGetReportAuxiliarAccountResult1>();
          PrAccountingGetReportAuxiliarAccountResult2s = new List<PrAccountingGetReportAuxiliarAccountResult2>();
          PrAccountingGetReportAuxiliarAccountResult3s = new List<PrAccountingGetReportAuxiliarAccountResult3>();
        }

        public List<PrAccountingGetReportAuxiliarAccountResult> PrAccountingGetReportAuxiliarAccountResults { get; private set; }
        public List<PrAccountingGetReportAuxiliarAccountResult1> PrAccountingGetReportAuxiliarAccountResult1s { get; private set; }
        public List<PrAccountingGetReportAuxiliarAccountResult2> PrAccountingGetReportAuxiliarAccountResult2s { get; private set; }
        public List<PrAccountingGetReportAuxiliarAccountResult3> PrAccountingGetReportAuxiliarAccountResult3s { get; private set; }
    }

    public class PrAccountingGetReportBalanzaDeComprobacionMultipleResult
    {

        public PrAccountingGetReportBalanzaDeComprobacionMultipleResult()
        {
          PrAccountingAccountBalanceResults = new List<PrAccountingAccountBalanceResult>();
          PrAccountingGetReportBalanzaDeComprobacionResults = new List<PrAccountingGetReportBalanzaDeComprobacionResult>();
        }

        public List<PrAccountingAccountBalanceResult> PrAccountingAccountBalanceResults { get; private set; }
        public List<PrAccountingGetReportBalanzaDeComprobacionResult> PrAccountingGetReportBalanzaDeComprobacionResults { get; private set; }
    }

    public class PrBoxGetReportClosedOperationMultipleResult
    {

        public PrBoxGetReportClosedOperationMultipleResult()
        {
          PrBoxGetReportClosedOperationResults = new List<PrBoxGetReportClosedOperationResult>();
          PrBoxGetReportClosedOperationResults1 = new List<PrBoxGetReportClosedOperationResult>();
          PrBoxGetReportClosedOperationResults2 = new List<PrBoxGetReportClosedOperationResult>();
          PrBoxGetReportClosedOperationResults3 = new List<PrBoxGetReportClosedOperationResult>();
          PrBoxGetReportClosedOperationResults4 = new List<PrBoxGetReportClosedOperationResult>();
        }

        public List<PrBoxGetReportClosedOperationResult> PrBoxGetReportClosedOperationResults { get; private set; }
        public List<PrBoxGetReportClosedOperationResult> PrBoxGetReportClosedOperationResults1 { get; private set; }
        public List<PrBoxGetReportClosedOperationResult> PrBoxGetReportClosedOperationResults2 { get; private set; }
        public List<PrBoxGetReportClosedOperationResult> PrBoxGetReportClosedOperationResults3 { get; private set; }
        public List<PrBoxGetReportClosedOperationResult> PrBoxGetReportClosedOperationResults4 { get; private set; }
    }

    public class PrCxcGetReportCustomerExpensaMultipleResult
    {

        public PrCxcGetReportCustomerExpensaMultipleResult()
        {
          PrCxcGetReportCustomerExpensaResults = new List<PrCxcGetReportCustomerExpensaResult>();
          PrCxcGetReportCustomerExpensaResult1s = new List<PrCxcGetReportCustomerExpensaResult1>();
          PrCxcGetReportCustomerExpensaResult2s = new List<PrCxcGetReportCustomerExpensaResult2>();
        }

        public List<PrCxcGetReportCustomerExpensaResult> PrCxcGetReportCustomerExpensaResults { get; private set; }
        public List<PrCxcGetReportCustomerExpensaResult1> PrCxcGetReportCustomerExpensaResult1s { get; private set; }
        public List<PrCxcGetReportCustomerExpensaResult2> PrCxcGetReportCustomerExpensaResult2s { get; private set; }
    }

    public class PrCxcGetReportCustomerPayByInvoiceMultipleResult
    {

        public PrCxcGetReportCustomerPayByInvoiceMultipleResult()
        {
          PrCxcGetReportCustomerPayByInvoiceResults = new List<PrCxcGetReportCustomerPayByInvoiceResult>();
          PrCxcGetReportCustomerPayByInvoiceResult1s = new List<PrCxcGetReportCustomerPayByInvoiceResult1>();
        }

        public List<PrCxcGetReportCustomerPayByInvoiceResult> PrCxcGetReportCustomerPayByInvoiceResults { get; private set; }
        public List<PrCxcGetReportCustomerPayByInvoiceResult1> PrCxcGetReportCustomerPayByInvoiceResult1s { get; private set; }
    }

    public class PrCxcGetReportCustomerStatusMultipleResult
    {

        public PrCxcGetReportCustomerStatusMultipleResult()
        {
          PrCxcGetReportCustomerStatusResults = new List<PrCxcGetReportCustomerStatusResult>();
          PrCxcGetReportCustomerStatusResult1s = new List<PrCxcGetReportCustomerStatusResult1>();
          PrCxcGetReportCustomerStatusResult2s = new List<PrCxcGetReportCustomerStatusResult2>();
          PrCxcGetReportCustomerStatusResult3s = new List<PrCxcGetReportCustomerStatusResult3>();
        }

        public List<PrCxcGetReportCustomerStatusResult> PrCxcGetReportCustomerStatusResults { get; private set; }
        public List<PrCxcGetReportCustomerStatusResult1> PrCxcGetReportCustomerStatusResult1s { get; private set; }
        public List<PrCxcGetReportCustomerStatusResult2> PrCxcGetReportCustomerStatusResult2s { get; private set; }
        public List<PrCxcGetReportCustomerStatusResult3> PrCxcGetReportCustomerStatusResult3s { get; private set; }
    }

    public class PrAppInvoiceSurveryGetReportMultipleResult
    {

        public PrAppInvoiceSurveryGetReportMultipleResult()
        {
          PrAppInvoiceSurveryGetReportResults = new List<PrAppInvoiceSurveryGetReportResult>();
          PrAppInvoiceSurveryGetReportResult1s = new List<PrAppInvoiceSurveryGetReportResult1>();
          PrAppInvoiceSurveryGetReportResult2s = new List<PrAppInvoiceSurveryGetReportResult2>();
          PrAppInvoiceSurveryGetReportResult3s = new List<PrAppInvoiceSurveryGetReportResult3>();
        }

        public List<PrAppInvoiceSurveryGetReportResult> PrAppInvoiceSurveryGetReportResults { get; private set; }
        public List<PrAppInvoiceSurveryGetReportResult1> PrAppInvoiceSurveryGetReportResult1s { get; private set; }
        public List<PrAppInvoiceSurveryGetReportResult2> PrAppInvoiceSurveryGetReportResult2s { get; private set; }
        public List<PrAppInvoiceSurveryGetReportResult3> PrAppInvoiceSurveryGetReportResult3s { get; private set; }
    }

    public class PrCxcGetReportInvoiceByCustomerMultipleResult
    {

        public PrCxcGetReportInvoiceByCustomerMultipleResult()
        {
          PrCxcGetReportInvoiceByCustomerResults = new List<PrCxcGetReportInvoiceByCustomerResult>();
          PrCxcGetReportInvoiceByCustomerResult1s = new List<PrCxcGetReportInvoiceByCustomerResult1>();
        }

        public List<PrCxcGetReportInvoiceByCustomerResult> PrCxcGetReportInvoiceByCustomerResults { get; private set; }
        public List<PrCxcGetReportInvoiceByCustomerResult1> PrCxcGetReportInvoiceByCustomerResult1s { get; private set; }
    }
}

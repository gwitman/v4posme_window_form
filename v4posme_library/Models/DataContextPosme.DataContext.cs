//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 4/10/2024 4:53:03 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using MySql.EntityFrameworkCore.Extensions;

namespace v4posme_library.Models
{

    public partial class DataContext : DbContext
    {

        public DataContext() :
            base()
        {
            OnCreated();
        }

        public DataContext(DbContextOptions<DataContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseMySQL(GetConnectionString("Posmeconnectionstring"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<TbAccount> TbAccounts
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountingBalance> TbAccountingBalances
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountingBalanceTemp> TbAccountingBalanceTemps
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountingCycle> TbAccountingCycles
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountingPeriod> TbAccountingPeriods
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountLevel> TbAccountLevels
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountTmp> TbAccountTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbAccountType> TbAccountTypes
        {
            get;
            set;
        }

        public virtual DbSet<TbBank> TbBanks
        {
            get;
            set;
        }

        public virtual DbSet<TbBiblia> TbBiblias
        {
            get;
            set;
        }

        public virtual DbSet<TbBranch> TbBranches
        {
            get;
            set;
        }

        public virtual DbSet<TbCaller> TbCallers
        {
            get;
            set;
        }

        public virtual DbSet<TbCashBox> TbCashBoxes
        {
            get;
            set;
        }

        public virtual DbSet<TbCashBoxSession> TbCashBoxSessions
        {
            get;
            set;
        }

        public virtual DbSet<TbCashBoxSessionTransactionMaster> TbCashBoxSessionTransactionMasters
        {
            get;
            set;
        }

        public virtual DbSet<TbCashBoxUser> TbCashBoxUsers
        {
            get;
            set;
        }

        public virtual DbSet<TbCatalog> TbCatalogs
        {
            get;
            set;
        }

        public virtual DbSet<TbCatalogItem> TbCatalogItems
        {
            get;
            set;
        }

        public virtual DbSet<TbCatalogItemConvertion> TbCatalogItemConvertions
        {
            get;
            set;
        }

        public virtual DbSet<TbCenterCost> TbCenterCosts
        {
            get;
            set;
        }

        public virtual DbSet<TbCompany> TbCompanies
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyComponent> TbCompanyComponents
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyComponentConcept> TbCompanyComponentConcepts
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyComponentFlavor> TbCompanyComponentFlavors
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyComponentItemDataview> TbCompanyComponentItemDataviews
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyCurrency> TbCompanyCurrencies
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyDataview> TbCompanyDataviews
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyDefaultDataview> TbCompanyDefaultDataviews
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanyParameter> TbCompanyParameters
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanySubelementAudit> TbCompanySubelementAudits
        {
            get;
            set;
        }

        public virtual DbSet<TbCompanySubelementObligatory> TbCompanySubelementObligatories
        {
            get;
            set;
        }

        public virtual DbSet<TbComponent> TbComponents
        {
            get;
            set;
        }

        public virtual DbSet<TbComponentAudit> TbComponentAudits
        {
            get;
            set;
        }

        public virtual DbSet<TbComponentAuditDetail> TbComponentAuditDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbComponentAutorization> TbComponentAutorizations
        {
            get;
            set;
        }

        public virtual DbSet<TbComponentAutorizationDetail> TbComponentAutorizationDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbComponentElement> TbComponentElements
        {
            get;
            set;
        }

        public virtual DbSet<TbCounter> TbCounters
        {
            get;
            set;
        }

        public virtual DbSet<TbCreditLine> TbCreditLines
        {
            get;
            set;
        }

        public virtual DbSet<TbCurrency> TbCurrencies
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomer> TbCustomers
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerConsultasSinRiesgo> TbCustomerConsultasSinRiesgos
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCredit> TbCustomerCredits
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditAmoritization> TbCustomerCreditAmoritizations
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditClasification> TbCustomerCreditClasifications
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditDocument> TbCustomerCreditDocuments
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditDocumentEntityRelated> TbCustomerCreditDocumentEntityRelateds
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditExternalSharon> TbCustomerCreditExternalSharons
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditExternalSharonTmp> TbCustomerCreditExternalSharonTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerCreditLine> TbCustomerCreditLines
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerFrecuencyActuation> TbCustomerFrecuencyActuations
        {
            get;
            set;
        }

        public virtual DbSet<TbCustomerPaymentMethod> TbCustomerPaymentMethods
        {
            get;
            set;
        }

        public virtual DbSet<TbDataview> TbDataviews
        {
            get;
            set;
        }

        public virtual DbSet<TbElement> TbElements
        {
            get;
            set;
        }

        public virtual DbSet<TbElementType> TbElementTypes
        {
            get;
            set;
        }

        public virtual DbSet<TbEmployee> TbEmployees
        {
            get;
            set;
        }

        public virtual DbSet<TbEmployeeCalendarPay> TbEmployeeCalendarPays
        {
            get;
            set;
        }

        public virtual DbSet<TbEmployeeCalendarPayDetail> TbEmployeeCalendarPayDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbEntity> TbEntities
        {
            get;
            set;
        }

        public virtual DbSet<TbEntityAccount> TbEntityAccounts
        {
            get;
            set;
        }

        public virtual DbSet<TbEntityEmail> TbEntityEmails
        {
            get;
            set;
        }

        public virtual DbSet<TbEntityPhone> TbEntityPhones
        {
            get;
            set;
        }

        public virtual DbSet<TbError> TbErrors
        {
            get;
            set;
        }

        public virtual DbSet<TbEstadisticaCategoria> TbEstadisticaCategorias
        {
            get;
            set;
        }

        public virtual DbSet<TbEstadisticaClase> TbEstadisticaClases
        {
            get;
            set;
        }

        public virtual DbSet<TbExchangeRate> TbExchangeRates
        {
            get;
            set;
        }

        public virtual DbSet<TbFixedAssent> TbFixedAssents
        {
            get;
            set;
        }

        public virtual DbSet<TbIndicator> TbIndicators
        {
            get;
            set;
        }

        public virtual DbSet<TbIndicatorHistory> TbIndicatorHistories
        {
            get;
            set;
        }

        public virtual DbSet<TbIndicatorTmp> TbIndicatorTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbItem> TbItems
        {
            get;
            set;
        }

        public virtual DbSet<TbItemCategory> TbItemCategories
        {
            get;
            set;
        }

        public virtual DbSet<TbItemConfigLoto> TbItemConfigLotos
        {
            get;
            set;
        }

        public virtual DbSet<TbItemDataSheet> TbItemDataSheets
        {
            get;
            set;
        }

        public virtual DbSet<TbItemDataSheetDetail> TbItemDataSheetDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbItemImport> TbItemImports
        {
            get;
            set;
        }

        public virtual DbSet<TbItemSku> TbItemSkus
        {
            get;
            set;
        }

        public virtual DbSet<TbItemWarehouse> TbItemWarehouses
        {
            get;
            set;
        }

        public virtual DbSet<TbItemWarehouseExpired> TbItemWarehouseExpireds
        {
            get;
            set;
        }

        public virtual DbSet<TbJournalEntry> TbJournalEntries
        {
            get;
            set;
        }

        public virtual DbSet<TbJournalEntryDetail> TbJournalEntryDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbJournalEntryDetailSummary> TbJournalEntryDetailSummaries
        {
            get;
            set;
        }

        public virtual DbSet<TbKardex> TbKardexes
        {
            get;
            set;
        }

        public virtual DbSet<TbLegal> TbLegals
        {
            get;
            set;
        }

        public virtual DbSet<TbListPrice> TbListPrices
        {
            get;
            set;
        }

        public virtual DbSet<TbLog> TbLogs
        {
            get;
            set;
        }

        public virtual DbSet<TbLogMesseger> TbLogMessegers
        {
            get;
            set;
        }

        public virtual DbSet<TbLogSession> TbLogSessions
        {
            get;
            set;
        }

        public virtual DbSet<TbMasterKardexTemp> TbMasterKardexTemps
        {
            get;
            set;
        }

        public virtual DbSet<TbMembership> TbMemberships
        {
            get;
            set;
        }

        public virtual DbSet<TbMenuElement> TbMenuElements
        {
            get;
            set;
        }

        public virtual DbSet<TbNaturale> TbNaturales
        {
            get;
            set;
        }

        public virtual DbSet<TbNotification> TbNotifications
        {
            get;
            set;
        }

        public virtual DbSet<TbParameter> TbParameters
        {
            get;
            set;
        }

        public virtual DbSet<TbPrice> TbPrices
        {
            get;
            set;
        }

        public virtual DbSet<TbProvider> TbProviders
        {
            get;
            set;
        }

        public virtual DbSet<TbProviderItem> TbProviderItems
        {
            get;
            set;
        }

        public virtual DbSet<TbPublicCatalog> TbPublicCatalogs
        {
            get;
            set;
        }

        public virtual DbSet<TbPublicCatalogDetail> TbPublicCatalogDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbRazonesFinancierasTmp> TbRazonesFinancierasTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbRelationship> TbRelationships
        {
            get;
            set;
        }

        public virtual DbSet<TbRemember> TbRemembers
        {
            get;
            set;
        }

        public virtual DbSet<TbRole> TbRoles
        {
            get;
            set;
        }

        public virtual DbSet<TbRoleAutorization> TbRoleAutorizations
        {
            get;
            set;
        }

        public virtual DbSet<TbSubelement> TbSubelements
        {
            get;
            set;
        }

        public virtual DbSet<TbTag> TbTags
        {
            get;
            set;
        }

        public virtual DbSet<TbTransaction> TbTransactions
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionCausal> TbTransactionCausals
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionConcept> TbTransactionConcepts
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMaster> TbTransactionMasters
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterConcept> TbTransactionMasterConcepts
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterDenomination> TbTransactionMasterDenominations
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterDetail> TbTransactionMasterDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterDetailCredit> TbTransactionMasterDetailCredits
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterDetailTemp> TbTransactionMasterDetailTemps
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterInfo> TbTransactionMasterInfos
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterPurchase> TbTransactionMasterPurchases
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterReference> TbTransactionMasterReferences
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionMasterSummaryConceptTmp> TbTransactionMasterSummaryConceptTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionProfileDetail> TbTransactionProfileDetails
        {
            get;
            set;
        }

        public virtual DbSet<TbTransactionProfileDetailTmp> TbTransactionProfileDetailTmps
        {
            get;
            set;
        }

        public virtual DbSet<TbTypeMenuElement> TbTypeMenuElements
        {
            get;
            set;
        }

        public virtual DbSet<TbUser> TbUsers
        {
            get;
            set;
        }

        public virtual DbSet<TbUserPermission> TbUserPermissions
        {
            get;
            set;
        }

        public virtual DbSet<TbUserTag> TbUserTags
        {
            get;
            set;
        }

        public virtual DbSet<TbUserWarehouse> TbUserWarehouses
        {
            get;
            set;
        }

        public virtual DbSet<TbWarehouse> TbWarehouses
        {
            get;
            set;
        }

        public virtual DbSet<TbWorkflow> TbWorkflows
        {
            get;
            set;
        }

        public virtual DbSet<TbWorkflowStage> TbWorkflowStages
        {
            get;
            set;
        }

        public virtual DbSet<TbWorkflowStageChangeLog> TbWorkflowStageChangeLogs
        {
            get;
            set;
        }

        public virtual DbSet<TbWorkflowStageRelation> TbWorkflowStageRelations
        {
            get;
            set;
        }

        public virtual DbSet<VwContabilidadComprobante> VwContabilidadComprobantes
        {
            get;
            set;
        }

        public virtual DbSet<VwCxcCustomerListRealEstate> VwCxcCustomerListRealEstates
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaBalance> VwGerenciaBalances
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaCustomer> VwGerenciaCustomers
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaDesembolsosDetalle> VwGerenciaDesembolsosDetalles
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaDesembolsosResuman> VwGerenciaDesembolsosResumen
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaEstadoResultado001> VwGerenciaEstadoResultado001s
        {
            get;
            set;
        }

        public virtual DbSet<VwGerenciaEstadoResultado002> VwGerenciaEstadoResultado002s
        {
            get;
            set;
        }

        public virtual DbSet<VwInventoryListItemRealEstate> VwInventoryListItemRealEstates
        {
            get;
            set;
        }

        public virtual DbSet<VwSalesInventory> VwSalesInventories
        {
            get;
            set;
        }

        public virtual DbSet<VwSinRiesgoReporteCliente> VwSinRiesgoReporteClientes
        {
            get;
            set;
        }

        public virtual DbSet<VwSinRiesgoReporteCredito> VwSinRiesgoReporteCreditos
        {
            get;
            set;
        }

        public virtual DbSet<VwSinRiesgoReporteCreditosToSystema> VwSinRiesgoReporteCreditosToSystemas
        {
            get;
            set;
        }

        public virtual DbSet<VwTransaccionMasterConcept232425> VwTransaccionMasterConcept232425s
        {
            get;
            set;
        }

        #region Methods

        /// <summary>
        /// Procedimiento para obtener el tb_catalog de Cuenta de un Ciclo y sus Saldo
        /// </summary>
        public void PrAccountingAccountBalance (int? prCompanyID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_account_balance";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener el tb_catalog de Cuenta de un Ciclo y sus Saldo
        /// </summary>
        public async Task PrAccountingAccountBalanceAsync (int? prCompanyID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_account_balance";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Calcular Utilidades del Ciclo
        /// </summary>
        public void PrAccountingCalculateUtility (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID, out decimal? prUtility)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_calculate_utility";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prUtilityParameter = cmd.CreateParameter();
                    prUtilityParameter.ParameterName = "prUtility";
                    prUtilityParameter.Direction = ParameterDirection.Output;
                    prUtilityParameter.DbType = DbType.Decimal;
                    prUtilityParameter.Precision = 18;
                    prUtilityParameter.Scale = 8;
                    prUtilityParameter.Size = -1;
                    prUtilityParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prUtilityParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prUtility"].Value != null && !(cmd.Parameters["prUtility"].Value is System.DBNull))
                        prUtility = (decimal)Convert.ChangeType(cmd.Parameters["prUtility"].Value, typeof(decimal));
                    else
                        prUtility = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Calcular Utilidades del Ciclo
        /// </summary>
        public async Task<Tuple<decimal?>> PrAccountingCalculateUtilityAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID)
        {

            decimal? prUtility;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_calculate_utility";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prUtilityParameter = cmd.CreateParameter();
                    prUtilityParameter.ParameterName = "prUtility";
                    prUtilityParameter.Direction = ParameterDirection.Output;
                    prUtilityParameter.DbType = DbType.Decimal;
                    prUtilityParameter.Precision = 18;
                    prUtilityParameter.Scale = 8;
                    prUtilityParameter.Size = -1;
                    prUtilityParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prUtilityParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prUtility"].Value != null && !(cmd.Parameters["prUtility"].Value is System.DBNull))
                        prUtility = (decimal)Convert.ChangeType(cmd.Parameters["prUtility"].Value, typeof(decimal));
                    else
                        prUtility = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<decimal?>(prUtility);
        }

        /// <summary>
        /// Procedimiento para saber si se puede eliminar una cuenta contable
        /// </summary>
        public void PrAccountingCheckaccountToDelete (int? prCompanyID, int? prBranchID, int? prLoginID, int? prAccountID, string prApp, out string prResultMessage, out int? prResultCode)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_checkaccount_to_delete";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prAppParameter = cmd.CreateParameter();
                    prAppParameter.ParameterName = "prApp";
                    prAppParameter.Direction = ParameterDirection.Input;
                    prAppParameter.DbType = DbType.String;
                    prAppParameter.Size = 50;
                    if (prApp != null)
                    {
                        prAppParameter.Value = prApp;
                    }
                    else
                    {
                        prAppParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAppParameter);

                    DbParameter prResultMessageParameter = cmd.CreateParameter();
                    prResultMessageParameter.ParameterName = "prResultMessage";
                    prResultMessageParameter.Direction = ParameterDirection.Output;
                    prResultMessageParameter.DbType = DbType.String;
                    prResultMessageParameter.Size = 300;
                    prResultMessageParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultMessageParameter);

                    DbParameter prResultCodeParameter = cmd.CreateParameter();
                    prResultCodeParameter.ParameterName = "prResultCode";
                    prResultCodeParameter.Direction = ParameterDirection.Output;
                    prResultCodeParameter.DbType = DbType.Int32;
                    prResultCodeParameter.Precision = 10;
                    prResultCodeParameter.Scale = 0;
                    prResultCodeParameter.Size = -1;
                    prResultCodeParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultCodeParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResultMessage"].Value != null && !(cmd.Parameters["prResultMessage"].Value is System.DBNull))
                        prResultMessage = (string)Convert.ChangeType(cmd.Parameters["prResultMessage"].Value, typeof(string));
                    else
                        prResultMessage = default(string);

                    if (cmd.Parameters["prResultCode"].Value != null && !(cmd.Parameters["prResultCode"].Value is System.DBNull))
                        prResultCode = (int)Convert.ChangeType(cmd.Parameters["prResultCode"].Value, typeof(int));
                    else
                        prResultCode = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para saber si se puede eliminar una cuenta contable
        /// </summary>
        public async Task<Tuple<string, int?>> PrAccountingCheckaccountToDeleteAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prAccountID, string prApp)
        {

            string prResultMessage;
            int? prResultCode;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_checkaccount_to_delete";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prAppParameter = cmd.CreateParameter();
                    prAppParameter.ParameterName = "prApp";
                    prAppParameter.Direction = ParameterDirection.Input;
                    prAppParameter.DbType = DbType.String;
                    prAppParameter.Size = 50;
                    if (prApp != null)
                    {
                        prAppParameter.Value = prApp;
                    }
                    else
                    {
                        prAppParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAppParameter);

                    DbParameter prResultMessageParameter = cmd.CreateParameter();
                    prResultMessageParameter.ParameterName = "prResultMessage";
                    prResultMessageParameter.Direction = ParameterDirection.Output;
                    prResultMessageParameter.DbType = DbType.String;
                    prResultMessageParameter.Size = 300;
                    prResultMessageParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultMessageParameter);

                    DbParameter prResultCodeParameter = cmd.CreateParameter();
                    prResultCodeParameter.ParameterName = "prResultCode";
                    prResultCodeParameter.Direction = ParameterDirection.Output;
                    prResultCodeParameter.DbType = DbType.Int32;
                    prResultCodeParameter.Precision = 10;
                    prResultCodeParameter.Scale = 0;
                    prResultCodeParameter.Size = -1;
                    prResultCodeParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultCodeParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResultMessage"].Value != null && !(cmd.Parameters["prResultMessage"].Value is System.DBNull))
                        prResultMessage = (string)Convert.ChangeType(cmd.Parameters["prResultMessage"].Value, typeof(string));
                    else
                        prResultMessage = default(string);

                    if (cmd.Parameters["prResultCode"].Value != null && !(cmd.Parameters["prResultCode"].Value is System.DBNull))
                        prResultCode = (int)Convert.ChangeType(cmd.Parameters["prResultCode"].Value, typeof(int));
                    else
                        prResultCode = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<string, int?>(prResultMessage, prResultCode);
        }

        /// <summary>
        /// Procedimiento para Cerrar un Ciclo Contable
        /// </summary>
        public void PrAccountingClosedCycle (int? prCompanyID, int? prBranchID, int? prLoginID, string prCreatedIn, string prTocken, int? prPeriodID, int? prCycleID, out int? prCodeError, out string prMessageResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_closed_cycle";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prCreatedInParameter = cmd.CreateParameter();
                    prCreatedInParameter.ParameterName = "prCreatedIn";
                    prCreatedInParameter.Direction = ParameterDirection.Input;
                    prCreatedInParameter.DbType = DbType.String;
                    prCreatedInParameter.Size = 50;
                    if (prCreatedIn != null)
                    {
                        prCreatedInParameter.Value = prCreatedIn;
                    }
                    else
                    {
                        prCreatedInParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreatedInParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prCodeErrorParameter = cmd.CreateParameter();
                    prCodeErrorParameter.ParameterName = "prCodeError";
                    prCodeErrorParameter.Direction = ParameterDirection.Output;
                    prCodeErrorParameter.DbType = DbType.Int32;
                    prCodeErrorParameter.Precision = 10;
                    prCodeErrorParameter.Scale = 0;
                    prCodeErrorParameter.Size = -1;
                    prCodeErrorParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prCodeErrorParameter);

                    DbParameter prMessageResultParameter = cmd.CreateParameter();
                    prMessageResultParameter.ParameterName = "prMessageResult";
                    prMessageResultParameter.Direction = ParameterDirection.Output;
                    prMessageResultParameter.DbType = DbType.String;
                    prMessageResultParameter.Size = 250;
                    prMessageResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prMessageResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prCodeError"].Value != null && !(cmd.Parameters["prCodeError"].Value is System.DBNull))
                        prCodeError = (int)Convert.ChangeType(cmd.Parameters["prCodeError"].Value, typeof(int));
                    else
                        prCodeError = default(int);

                    if (cmd.Parameters["prMessageResult"].Value != null && !(cmd.Parameters["prMessageResult"].Value is System.DBNull))
                        prMessageResult = (string)Convert.ChangeType(cmd.Parameters["prMessageResult"].Value, typeof(string));
                    else
                        prMessageResult = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Cerrar un Ciclo Contable
        /// </summary>
        public async Task<Tuple<int?, string>> PrAccountingClosedCycleAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prCreatedIn, string prTocken, int? prPeriodID, int? prCycleID)
        {

            int? prCodeError;
            string prMessageResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_closed_cycle";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prCreatedInParameter = cmd.CreateParameter();
                    prCreatedInParameter.ParameterName = "prCreatedIn";
                    prCreatedInParameter.Direction = ParameterDirection.Input;
                    prCreatedInParameter.DbType = DbType.String;
                    prCreatedInParameter.Size = 50;
                    if (prCreatedIn != null)
                    {
                        prCreatedInParameter.Value = prCreatedIn;
                    }
                    else
                    {
                        prCreatedInParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreatedInParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prCodeErrorParameter = cmd.CreateParameter();
                    prCodeErrorParameter.ParameterName = "prCodeError";
                    prCodeErrorParameter.Direction = ParameterDirection.Output;
                    prCodeErrorParameter.DbType = DbType.Int32;
                    prCodeErrorParameter.Precision = 10;
                    prCodeErrorParameter.Scale = 0;
                    prCodeErrorParameter.Size = -1;
                    prCodeErrorParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prCodeErrorParameter);

                    DbParameter prMessageResultParameter = cmd.CreateParameter();
                    prMessageResultParameter.ParameterName = "prMessageResult";
                    prMessageResultParameter.Direction = ParameterDirection.Output;
                    prMessageResultParameter.DbType = DbType.String;
                    prMessageResultParameter.Size = 250;
                    prMessageResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prMessageResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prCodeError"].Value != null && !(cmd.Parameters["prCodeError"].Value is System.DBNull))
                        prCodeError = (int)Convert.ChangeType(cmd.Parameters["prCodeError"].Value, typeof(int));
                    else
                        prCodeError = default(int);

                    if (cmd.Parameters["prMessageResult"].Value != null && !(cmd.Parameters["prMessageResult"].Value is System.DBNull))
                        prMessageResult = (string)Convert.ChangeType(cmd.Parameters["prMessageResult"].Value, typeof(string));
                    else
                        prMessageResult = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?, string>(prCodeError, prMessageResult);
        }

        /// <summary>
        /// procedimiento para el calculo de razones financieras
        /// </summary>
        public void PrAccountingFinancialReason (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID, int? prMonthOnly, string prParameterName, out decimal? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_financial_reason";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 50;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prMonthOnlyParameter = cmd.CreateParameter();
                    prMonthOnlyParameter.ParameterName = "prMonthOnly";
                    prMonthOnlyParameter.Direction = ParameterDirection.Input;
                    prMonthOnlyParameter.DbType = DbType.Int32;
                    prMonthOnlyParameter.Precision = 10;
                    prMonthOnlyParameter.Scale = 0;
                    if (prMonthOnly.HasValue)
                    {
                        prMonthOnlyParameter.Value = prMonthOnly.Value;
                    }
                    else
                    {
                        prMonthOnlyParameter.Size = -1;
                        prMonthOnlyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prMonthOnlyParameter);

                    DbParameter prParameterNameParameter = cmd.CreateParameter();
                    prParameterNameParameter.ParameterName = "prParameterName";
                    prParameterNameParameter.Direction = ParameterDirection.Input;
                    prParameterNameParameter.DbType = DbType.String;
                    prParameterNameParameter.Size = 50;
                    if (prParameterName != null)
                    {
                        prParameterNameParameter.Value = prParameterName;
                    }
                    else
                    {
                        prParameterNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prParameterNameParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Decimal;
                    prResultParameter.Precision = 18;
                    prResultParameter.Scale = 5;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (decimal)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(decimal));
                    else
                        prResult = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// procedimiento para el calculo de razones financieras
        /// </summary>
        public async Task<Tuple<decimal?>> PrAccountingFinancialReasonAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID, int? prMonthOnly, string prParameterName)
        {

            decimal? prResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_financial_reason";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 50;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prMonthOnlyParameter = cmd.CreateParameter();
                    prMonthOnlyParameter.ParameterName = "prMonthOnly";
                    prMonthOnlyParameter.Direction = ParameterDirection.Input;
                    prMonthOnlyParameter.DbType = DbType.Int32;
                    prMonthOnlyParameter.Precision = 10;
                    prMonthOnlyParameter.Scale = 0;
                    if (prMonthOnly.HasValue)
                    {
                        prMonthOnlyParameter.Value = prMonthOnly.Value;
                    }
                    else
                    {
                        prMonthOnlyParameter.Size = -1;
                        prMonthOnlyParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prMonthOnlyParameter);

                    DbParameter prParameterNameParameter = cmd.CreateParameter();
                    prParameterNameParameter.ParameterName = "prParameterName";
                    prParameterNameParameter.Direction = ParameterDirection.Input;
                    prParameterNameParameter.DbType = DbType.String;
                    prParameterNameParameter.Size = 50;
                    if (prParameterName != null)
                    {
                        prParameterNameParameter.Value = prParameterName;
                    }
                    else
                    {
                        prParameterNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prParameterNameParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Decimal;
                    prResultParameter.Precision = 18;
                    prResultParameter.Scale = 5;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (decimal)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(decimal));
                    else
                        prResult = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<decimal?>(prResult);
        }

        public void PrAccountingGetHistoryBalanceByAccount (int? prCompanyID, int? prAccountID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_history_balance_by_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrAccountingGetHistoryBalanceByAccountAsync (int? prCompanyID, int? prAccountID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_history_balance_by_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener los movimientos por cuenta
        /// </summary>
        public void PrAccountingGetReportAuxiliarAccount (int? prCompanyID, int? prPeriodID, int? prCycleIDStart, int? prCycleIDEnd, int? prAccountID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_auxiliar_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDStartParameter = cmd.CreateParameter();
                    prCycleIDStartParameter.ParameterName = "prCycleIDStart";
                    prCycleIDStartParameter.Direction = ParameterDirection.Input;
                    prCycleIDStartParameter.DbType = DbType.Int32;
                    prCycleIDStartParameter.Precision = 10;
                    prCycleIDStartParameter.Scale = 0;
                    if (prCycleIDStart.HasValue)
                    {
                        prCycleIDStartParameter.Value = prCycleIDStart.Value;
                    }
                    else
                    {
                        prCycleIDStartParameter.Size = -1;
                        prCycleIDStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDStartParameter);

                    DbParameter prCycleIDEndParameter = cmd.CreateParameter();
                    prCycleIDEndParameter.ParameterName = "prCycleIDEnd";
                    prCycleIDEndParameter.Direction = ParameterDirection.Input;
                    prCycleIDEndParameter.DbType = DbType.Int32;
                    prCycleIDEndParameter.Precision = 10;
                    prCycleIDEndParameter.Scale = 0;
                    if (prCycleIDEnd.HasValue)
                    {
                        prCycleIDEndParameter.Value = prCycleIDEnd.Value;
                    }
                    else
                    {
                        prCycleIDEndParameter.Size = -1;
                        prCycleIDEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDEndParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener los movimientos por cuenta
        /// </summary>
        public async Task PrAccountingGetReportAuxiliarAccountAsync (int? prCompanyID, int? prPeriodID, int? prCycleIDStart, int? prCycleIDEnd, int? prAccountID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_auxiliar_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDStartParameter = cmd.CreateParameter();
                    prCycleIDStartParameter.ParameterName = "prCycleIDStart";
                    prCycleIDStartParameter.Direction = ParameterDirection.Input;
                    prCycleIDStartParameter.DbType = DbType.Int32;
                    prCycleIDStartParameter.Precision = 10;
                    prCycleIDStartParameter.Scale = 0;
                    if (prCycleIDStart.HasValue)
                    {
                        prCycleIDStartParameter.Value = prCycleIDStart.Value;
                    }
                    else
                    {
                        prCycleIDStartParameter.Size = -1;
                        prCycleIDStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDStartParameter);

                    DbParameter prCycleIDEndParameter = cmd.CreateParameter();
                    prCycleIDEndParameter.ParameterName = "prCycleIDEnd";
                    prCycleIDEndParameter.Direction = ParameterDirection.Input;
                    prCycleIDEndParameter.DbType = DbType.Int32;
                    prCycleIDEndParameter.Precision = 10;
                    prCycleIDEndParameter.Scale = 0;
                    if (prCycleIDEnd.HasValue)
                    {
                        prCycleIDEndParameter.Value = prCycleIDEnd.Value;
                    }
                    else
                    {
                        prCycleIDEndParameter.Size = -1;
                        prCycleIDEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDEndParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener los movimientos por tipo de comprobantes
        /// </summary>
        public void PrAccountingGetReportAuxiliarMovTipoComprobante (int? prCompanyID, int? prJournalTypeID, DateTime? prStartOn, DateTime? prEndOn, int? prExcludeSystem, string prStringContainer, int? prClassID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_auxiliar_mov_tipo_comprobantes";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prJournalTypeIDParameter = cmd.CreateParameter();
                    prJournalTypeIDParameter.ParameterName = "prJournalTypeID";
                    prJournalTypeIDParameter.Direction = ParameterDirection.Input;
                    prJournalTypeIDParameter.DbType = DbType.Int32;
                    prJournalTypeIDParameter.Precision = 10;
                    prJournalTypeIDParameter.Scale = 0;
                    if (prJournalTypeID.HasValue)
                    {
                        prJournalTypeIDParameter.Value = prJournalTypeID.Value;
                    }
                    else
                    {
                        prJournalTypeIDParameter.Size = -1;
                        prJournalTypeIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalTypeIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prExcludeSystemParameter = cmd.CreateParameter();
                    prExcludeSystemParameter.ParameterName = "prExcludeSystem";
                    prExcludeSystemParameter.Direction = ParameterDirection.Input;
                    prExcludeSystemParameter.DbType = DbType.Int32;
                    prExcludeSystemParameter.Precision = 10;
                    prExcludeSystemParameter.Scale = 0;
                    if (prExcludeSystem.HasValue)
                    {
                        prExcludeSystemParameter.Value = prExcludeSystem.Value;
                    }
                    else
                    {
                        prExcludeSystemParameter.Size = -1;
                        prExcludeSystemParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prExcludeSystemParameter);

                    DbParameter prStringContainerParameter = cmd.CreateParameter();
                    prStringContainerParameter.ParameterName = "prStringContainer";
                    prStringContainerParameter.Direction = ParameterDirection.Input;
                    prStringContainerParameter.DbType = DbType.String;
                    prStringContainerParameter.Size = 500;
                    if (prStringContainer != null)
                    {
                        prStringContainerParameter.Value = prStringContainer;
                    }
                    else
                    {
                        prStringContainerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStringContainerParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener los movimientos por tipo de comprobantes
        /// </summary>
        public async Task PrAccountingGetReportAuxiliarMovTipoComprobanteAsync (int? prCompanyID, int? prJournalTypeID, DateTime? prStartOn, DateTime? prEndOn, int? prExcludeSystem, string prStringContainer, int? prClassID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_auxiliar_mov_tipo_comprobantes";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prJournalTypeIDParameter = cmd.CreateParameter();
                    prJournalTypeIDParameter.ParameterName = "prJournalTypeID";
                    prJournalTypeIDParameter.Direction = ParameterDirection.Input;
                    prJournalTypeIDParameter.DbType = DbType.Int32;
                    prJournalTypeIDParameter.Precision = 10;
                    prJournalTypeIDParameter.Scale = 0;
                    if (prJournalTypeID.HasValue)
                    {
                        prJournalTypeIDParameter.Value = prJournalTypeID.Value;
                    }
                    else
                    {
                        prJournalTypeIDParameter.Size = -1;
                        prJournalTypeIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalTypeIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prExcludeSystemParameter = cmd.CreateParameter();
                    prExcludeSystemParameter.ParameterName = "prExcludeSystem";
                    prExcludeSystemParameter.Direction = ParameterDirection.Input;
                    prExcludeSystemParameter.DbType = DbType.Int32;
                    prExcludeSystemParameter.Precision = 10;
                    prExcludeSystemParameter.Scale = 0;
                    if (prExcludeSystem.HasValue)
                    {
                        prExcludeSystemParameter.Value = prExcludeSystem.Value;
                    }
                    else
                    {
                        prExcludeSystemParameter.Size = -1;
                        prExcludeSystemParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prExcludeSystemParameter);

                    DbParameter prStringContainerParameter = cmd.CreateParameter();
                    prStringContainerParameter.ParameterName = "prStringContainer";
                    prStringContainerParameter.Direction = ParameterDirection.Input;
                    prStringContainerParameter.DbType = DbType.String;
                    prStringContainerParameter.Size = 500;
                    if (prStringContainer != null)
                    {
                        prStringContainerParameter.Value = prStringContainer;
                    }
                    else
                    {
                        prStringContainerParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStringContainerParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener el Balance General de la Empresa
        /// </summary>
        public void PrAccountingGetReportBalanceGeneral (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_balance_general";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener el Balance General de la Empresa
        /// </summary>
        public async Task PrAccountingGetReportBalanceGeneralAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_balance_general";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener la Balanza de Comprobacion
        /// </summary>
        public void PrAccountingGetReportBalanzaDeComprobacion (int? prCompanyID, int? prPeriodID, int? prCycleID, int? prClassID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_balanza_de_comprobacion";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener la Balanza de Comprobacion
        /// </summary>
        public async Task PrAccountingGetReportBalanzaDeComprobacionAsync (int? prCompanyID, int? prPeriodID, int? prCycleID, int? prClassID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_balanza_de_comprobacion";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrAccountingGetReportCashFlow (int? prCompanyID, string prTokenID, int? prUserID, int? prCycleID, int? prPeriodID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_cash_flow";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrAccountingGetReportCashFlowAsync (int? prCompanyID, string prTokenID, int? prUserID, int? prCycleID, int? prPeriodID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_cash_flow";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener el tb_catalog de cuenta de la empresa
        /// </summary>
        public void PrAccountingGetReportCatalogoDeCuenta (int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_catalogo_de_cuenta";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener el tb_catalog de cuenta de la empresa
        /// </summary>
        public async Task PrAccountingGetReportCatalogoDeCuentaAsync (int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_catalogo_de_cuenta";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener el Estado de Resultado de la Empresa
        /// </summary>
        public void PrAccountingGetReportEstadoResultado (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID, int? prClassID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_estado_resultado";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener el Estado de Resultado de la Empresa
        /// </summary>
        public async Task PrAccountingGetReportEstadoResultadoAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID, int? prClassID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_estado_resultado";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prClassIDParameter = cmd.CreateParameter();
                    prClassIDParameter.ParameterName = "prClassID";
                    prClassIDParameter.Direction = ParameterDirection.Input;
                    prClassIDParameter.DbType = DbType.Int32;
                    prClassIDParameter.Precision = 10;
                    prClassIDParameter.Scale = 0;
                    if (prClassID.HasValue)
                    {
                        prClassIDParameter.Value = prClassID.Value;
                    }
                    else
                    {
                        prClassIDParameter.Size = -1;
                        prClassIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrAccountingGetReportPresupuestory (int? prCompanyID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_presupuestory";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrAccountingGetReportPresupuestoryAsync (int? prCompanyID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_presupuestory";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// reporte de las razones financieras
        /// </summary>
        public void PrAccountingGetReportRazonFinancial (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_razon_financial";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// reporte de las razones financieras
        /// </summary>
        public async Task PrAccountingGetReportRazonFinancialAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_get_report_razon_financial";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para importar cuentas
        /// </summary>
        public void PrAccountingImportAccount ()
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_import_account";
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para importar cuentas
        /// </summary>
        public async Task PrAccountingImportAccountAsync ()
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_import_account";
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para inicializar la tabla temporal
        /// </summary>
        public void PrAccountingInitializeAccountTmp (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_initialize_account_tmp";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para inicializar la tabla temporal
        /// </summary>
        public async Task PrAccountingInitializeAccountTmpAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_initialize_account_tmp";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar cuentas
        /// </summary>
        public void PrAccountingMayorizateAccount (int? prCompanyID, int? prPeriodID, int? prCycleID, int? prAccountID, decimal? prBalance, decimal? prDebit, decimal? prCredit)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prBalanceParameter = cmd.CreateParameter();
                    prBalanceParameter.ParameterName = "prBalance";
                    prBalanceParameter.Direction = ParameterDirection.Input;
                    prBalanceParameter.DbType = DbType.Decimal;
                    prBalanceParameter.Precision = 19;
                    prBalanceParameter.Scale = 8;
                    if (prBalance.HasValue)
                    {
                        prBalanceParameter.Value = prBalance.Value;
                    }
                    else
                    {
                        prBalanceParameter.Size = -1;
                        prBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceParameter);

                    DbParameter prDebitParameter = cmd.CreateParameter();
                    prDebitParameter.ParameterName = "prDebit";
                    prDebitParameter.Direction = ParameterDirection.Input;
                    prDebitParameter.DbType = DbType.Decimal;
                    prDebitParameter.Precision = 19;
                    prDebitParameter.Scale = 8;
                    if (prDebit.HasValue)
                    {
                        prDebitParameter.Value = prDebit.Value;
                    }
                    else
                    {
                        prDebitParameter.Size = -1;
                        prDebitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDebitParameter);

                    DbParameter prCreditParameter = cmd.CreateParameter();
                    prCreditParameter.ParameterName = "prCredit";
                    prCreditParameter.Direction = ParameterDirection.Input;
                    prCreditParameter.DbType = DbType.Decimal;
                    prCreditParameter.Precision = 19;
                    prCreditParameter.Scale = 8;
                    if (prCredit.HasValue)
                    {
                        prCreditParameter.Value = prCredit.Value;
                    }
                    else
                    {
                        prCreditParameter.Size = -1;
                        prCreditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreditParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar cuentas
        /// </summary>
        public async Task PrAccountingMayorizateAccountAsync (int? prCompanyID, int? prPeriodID, int? prCycleID, int? prAccountID, decimal? prBalance, decimal? prDebit, decimal? prCredit)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_account";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prBalanceParameter = cmd.CreateParameter();
                    prBalanceParameter.ParameterName = "prBalance";
                    prBalanceParameter.Direction = ParameterDirection.Input;
                    prBalanceParameter.DbType = DbType.Decimal;
                    prBalanceParameter.Precision = 19;
                    prBalanceParameter.Scale = 8;
                    if (prBalance.HasValue)
                    {
                        prBalanceParameter.Value = prBalance.Value;
                    }
                    else
                    {
                        prBalanceParameter.Size = -1;
                        prBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceParameter);

                    DbParameter prDebitParameter = cmd.CreateParameter();
                    prDebitParameter.ParameterName = "prDebit";
                    prDebitParameter.Direction = ParameterDirection.Input;
                    prDebitParameter.DbType = DbType.Decimal;
                    prDebitParameter.Precision = 19;
                    prDebitParameter.Scale = 8;
                    if (prDebit.HasValue)
                    {
                        prDebitParameter.Value = prDebit.Value;
                    }
                    else
                    {
                        prDebitParameter.Size = -1;
                        prDebitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDebitParameter);

                    DbParameter prCreditParameter = cmd.CreateParameter();
                    prCreditParameter.ParameterName = "prCredit";
                    prCreditParameter.Direction = ParameterDirection.Input;
                    prCreditParameter.DbType = DbType.Decimal;
                    prCreditParameter.Precision = 19;
                    prCreditParameter.Scale = 8;
                    if (prCredit.HasValue)
                    {
                        prCreditParameter.Value = prCredit.Value;
                    }
                    else
                    {
                        prCreditParameter.Size = -1;
                        prCreditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreditParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar la tabla Temporal
        /// </summary>
        public void PrAccountingMayorizateAccountTmp (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prAccountID, decimal? prBalance, decimal? prDebit, decimal? prCredit, decimal? prBalanceEnd)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_account_tmp";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prBalanceParameter = cmd.CreateParameter();
                    prBalanceParameter.ParameterName = "prBalance";
                    prBalanceParameter.Direction = ParameterDirection.Input;
                    prBalanceParameter.DbType = DbType.Decimal;
                    prBalanceParameter.Precision = 19;
                    prBalanceParameter.Scale = 8;
                    if (prBalance.HasValue)
                    {
                        prBalanceParameter.Value = prBalance.Value;
                    }
                    else
                    {
                        prBalanceParameter.Size = -1;
                        prBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceParameter);

                    DbParameter prDebitParameter = cmd.CreateParameter();
                    prDebitParameter.ParameterName = "prDebit";
                    prDebitParameter.Direction = ParameterDirection.Input;
                    prDebitParameter.DbType = DbType.Decimal;
                    prDebitParameter.Precision = 19;
                    prDebitParameter.Scale = 8;
                    if (prDebit.HasValue)
                    {
                        prDebitParameter.Value = prDebit.Value;
                    }
                    else
                    {
                        prDebitParameter.Size = -1;
                        prDebitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDebitParameter);

                    DbParameter prCreditParameter = cmd.CreateParameter();
                    prCreditParameter.ParameterName = "prCredit";
                    prCreditParameter.Direction = ParameterDirection.Input;
                    prCreditParameter.DbType = DbType.Decimal;
                    prCreditParameter.Precision = 19;
                    prCreditParameter.Scale = 8;
                    if (prCredit.HasValue)
                    {
                        prCreditParameter.Value = prCredit.Value;
                    }
                    else
                    {
                        prCreditParameter.Size = -1;
                        prCreditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreditParameter);

                    DbParameter prBalanceEndParameter = cmd.CreateParameter();
                    prBalanceEndParameter.ParameterName = "prBalanceEnd";
                    prBalanceEndParameter.Direction = ParameterDirection.Input;
                    prBalanceEndParameter.DbType = DbType.Decimal;
                    prBalanceEndParameter.Precision = 19;
                    prBalanceEndParameter.Scale = 8;
                    if (prBalanceEnd.HasValue)
                    {
                        prBalanceEndParameter.Value = prBalanceEnd.Value;
                    }
                    else
                    {
                        prBalanceEndParameter.Size = -1;
                        prBalanceEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceEndParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar la tabla Temporal
        /// </summary>
        public async Task PrAccountingMayorizateAccountTmpAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTocken, int? prAccountID, decimal? prBalance, decimal? prDebit, decimal? prCredit, decimal? prBalanceEnd)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_account_tmp";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prAccountIDParameter = cmd.CreateParameter();
                    prAccountIDParameter.ParameterName = "prAccountID";
                    prAccountIDParameter.Direction = ParameterDirection.Input;
                    prAccountIDParameter.DbType = DbType.Int32;
                    prAccountIDParameter.Precision = 10;
                    prAccountIDParameter.Scale = 0;
                    if (prAccountID.HasValue)
                    {
                        prAccountIDParameter.Value = prAccountID.Value;
                    }
                    else
                    {
                        prAccountIDParameter.Size = -1;
                        prAccountIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAccountIDParameter);

                    DbParameter prBalanceParameter = cmd.CreateParameter();
                    prBalanceParameter.ParameterName = "prBalance";
                    prBalanceParameter.Direction = ParameterDirection.Input;
                    prBalanceParameter.DbType = DbType.Decimal;
                    prBalanceParameter.Precision = 19;
                    prBalanceParameter.Scale = 8;
                    if (prBalance.HasValue)
                    {
                        prBalanceParameter.Value = prBalance.Value;
                    }
                    else
                    {
                        prBalanceParameter.Size = -1;
                        prBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceParameter);

                    DbParameter prDebitParameter = cmd.CreateParameter();
                    prDebitParameter.ParameterName = "prDebit";
                    prDebitParameter.Direction = ParameterDirection.Input;
                    prDebitParameter.DbType = DbType.Decimal;
                    prDebitParameter.Precision = 19;
                    prDebitParameter.Scale = 8;
                    if (prDebit.HasValue)
                    {
                        prDebitParameter.Value = prDebit.Value;
                    }
                    else
                    {
                        prDebitParameter.Size = -1;
                        prDebitParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDebitParameter);

                    DbParameter prCreditParameter = cmd.CreateParameter();
                    prCreditParameter.ParameterName = "prCredit";
                    prCreditParameter.Direction = ParameterDirection.Input;
                    prCreditParameter.DbType = DbType.Decimal;
                    prCreditParameter.Precision = 19;
                    prCreditParameter.Scale = 8;
                    if (prCredit.HasValue)
                    {
                        prCreditParameter.Value = prCredit.Value;
                    }
                    else
                    {
                        prCreditParameter.Size = -1;
                        prCreditParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreditParameter);

                    DbParameter prBalanceEndParameter = cmd.CreateParameter();
                    prBalanceEndParameter.ParameterName = "prBalanceEnd";
                    prBalanceEndParameter.Direction = ParameterDirection.Input;
                    prBalanceEndParameter.DbType = DbType.Decimal;
                    prBalanceEndParameter.Precision = 19;
                    prBalanceEndParameter.Scale = 8;
                    if (prBalanceEnd.HasValue)
                    {
                        prBalanceEndParameter.Value = prBalanceEnd.Value;
                    }
                    else
                    {
                        prBalanceEndParameter.Size = -1;
                        prBalanceEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBalanceEndParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar los comprobantes realizados
        /// </summary>
        public void PrAccountingMayorizateCycle (int? prCompanyID, int? prBranchID, int? prLoginID, int? prPeriodID, int? prCycleID, out int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_cycle";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para mayorizar los comprobantes realizados
        /// </summary>
        public async Task<Tuple<int?>> PrAccountingMayorizateCycleAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prPeriodID, int? prCycleID)
        {

            int? prResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_mayorizate_cycle";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prResult);
        }

        /// <summary>
        /// procedimiento para crear un comprobante a partir de un template
        /// </summary>
        public void PrAccountingTemplatedToJournal (int? prCompanyID, int? prBranchID, int? prLoginID, string prApp, int? prJournalEntryTemplated, ref int? prJournalEntryResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_templated_to_journal";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prAppParameter = cmd.CreateParameter();
                    prAppParameter.ParameterName = "prApp";
                    prAppParameter.Direction = ParameterDirection.Input;
                    prAppParameter.DbType = DbType.String;
                    prAppParameter.Size = 50;
                    if (prApp != null)
                    {
                        prAppParameter.Value = prApp;
                    }
                    else
                    {
                        prAppParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAppParameter);

                    DbParameter prJournalEntryTemplatedParameter = cmd.CreateParameter();
                    prJournalEntryTemplatedParameter.ParameterName = "prJournalEntryTemplated";
                    prJournalEntryTemplatedParameter.Direction = ParameterDirection.Input;
                    prJournalEntryTemplatedParameter.DbType = DbType.Int32;
                    prJournalEntryTemplatedParameter.Precision = 10;
                    prJournalEntryTemplatedParameter.Scale = 0;
                    if (prJournalEntryTemplated.HasValue)
                    {
                        prJournalEntryTemplatedParameter.Value = prJournalEntryTemplated.Value;
                    }
                    else
                    {
                        prJournalEntryTemplatedParameter.Size = -1;
                        prJournalEntryTemplatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalEntryTemplatedParameter);

                    DbParameter prJournalEntryResultParameter = cmd.CreateParameter();
                    prJournalEntryResultParameter.ParameterName = "prJournalEntryResult";
                    prJournalEntryResultParameter.Direction = ParameterDirection.InputOutput;
                    prJournalEntryResultParameter.DbType = DbType.Int32;
                    prJournalEntryResultParameter.Precision = 10;
                    prJournalEntryResultParameter.Scale = 0;
                    if (prJournalEntryResult.HasValue)
                    {
                        prJournalEntryResultParameter.Value = prJournalEntryResult.Value;
                    }
                    else
                    {
                        prJournalEntryResultParameter.Size = -1;
                        prJournalEntryResultParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalEntryResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prJournalEntryResult"].Value != null && !(cmd.Parameters["prJournalEntryResult"].Value is System.DBNull))
                        prJournalEntryResult = (int)Convert.ChangeType(cmd.Parameters["prJournalEntryResult"].Value, typeof(int));
                    else
                        prJournalEntryResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// procedimiento para crear un comprobante a partir de un template
        /// </summary>
        public async Task<Tuple<int?>> PrAccountingTemplatedToJournalAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prApp, int? prJournalEntryTemplated, int? prJournalEntryResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_templated_to_journal";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prAppParameter = cmd.CreateParameter();
                    prAppParameter.ParameterName = "prApp";
                    prAppParameter.Direction = ParameterDirection.Input;
                    prAppParameter.DbType = DbType.String;
                    prAppParameter.Size = 50;
                    if (prApp != null)
                    {
                        prAppParameter.Value = prApp;
                    }
                    else
                    {
                        prAppParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAppParameter);

                    DbParameter prJournalEntryTemplatedParameter = cmd.CreateParameter();
                    prJournalEntryTemplatedParameter.ParameterName = "prJournalEntryTemplated";
                    prJournalEntryTemplatedParameter.Direction = ParameterDirection.Input;
                    prJournalEntryTemplatedParameter.DbType = DbType.Int32;
                    prJournalEntryTemplatedParameter.Precision = 10;
                    prJournalEntryTemplatedParameter.Scale = 0;
                    if (prJournalEntryTemplated.HasValue)
                    {
                        prJournalEntryTemplatedParameter.Value = prJournalEntryTemplated.Value;
                    }
                    else
                    {
                        prJournalEntryTemplatedParameter.Size = -1;
                        prJournalEntryTemplatedParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalEntryTemplatedParameter);

                    DbParameter prJournalEntryResultParameter = cmd.CreateParameter();
                    prJournalEntryResultParameter.ParameterName = "prJournalEntryResult";
                    prJournalEntryResultParameter.Direction = ParameterDirection.InputOutput;
                    prJournalEntryResultParameter.DbType = DbType.Int32;
                    prJournalEntryResultParameter.Precision = 10;
                    prJournalEntryResultParameter.Scale = 0;
                    if (prJournalEntryResult.HasValue)
                    {
                        prJournalEntryResultParameter.Value = prJournalEntryResult.Value;
                    }
                    else
                    {
                        prJournalEntryResultParameter.Size = -1;
                        prJournalEntryResultParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prJournalEntryResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prJournalEntryResult"].Value != null && !(cmd.Parameters["prJournalEntryResult"].Value is System.DBNull))
                        prJournalEntryResult = (int)Convert.ChangeType(cmd.Parameters["prJournalEntryResult"].Value, typeof(int));
                    else
                        prJournalEntryResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prJournalEntryResult);
        }

        /// <summary>
        /// Este procedimiento es para contabilizar todos los documentos de los modulos que estaran involucrado a la contabilidad
        /// </summary>
        public void PrAccountingTransactionToJournal (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, string prSourceName, int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_transaction_to_journal";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prSourceNameParameter = cmd.CreateParameter();
                    prSourceNameParameter.ParameterName = "prSourceName";
                    prSourceNameParameter.Direction = ParameterDirection.Input;
                    prSourceNameParameter.DbType = DbType.String;
                    prSourceNameParameter.Size = 50;
                    if (prSourceName != null)
                    {
                        prSourceNameParameter.Value = prSourceName;
                    }
                    else
                    {
                        prSourceNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prSourceNameParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Input;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    if (prResult.HasValue)
                    {
                        prResultParameter.Value = prResult.Value;
                    }
                    else
                    {
                        prResultParameter.Size = -1;
                        prResultParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Este procedimiento es para contabilizar todos los documentos de los modulos que estaran involucrado a la contabilidad
        /// </summary>
        public async Task PrAccountingTransactionToJournalAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, string prSourceName, int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_accounting_transaction_to_journal";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prSourceNameParameter = cmd.CreateParameter();
                    prSourceNameParameter.ParameterName = "prSourceName";
                    prSourceNameParameter.Direction = ParameterDirection.Input;
                    prSourceNameParameter.DbType = DbType.String;
                    prSourceNameParameter.Size = 50;
                    if (prSourceName != null)
                    {
                        prSourceNameParameter.Value = prSourceName;
                    }
                    else
                    {
                        prSourceNameParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prSourceNameParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Input;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    if (prResult.HasValue)
                    {
                        prResultParameter.Value = prResult.Value;
                    }
                    else
                    {
                        prResultParameter.Size = -1;
                        prResultParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public void PrBoxGetReportAbono (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_abonos";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public async Task PrBoxGetReportAbonoAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_abonos";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public void PrBoxGetReportClosed (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public async Task PrBoxGetReportClosedAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public void PrBoxGetReportClosedGlamcut (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed_glamcuts";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// lista de abonos de los clientes
        /// </summary>
        public async Task PrBoxGetReportClosedGlamcutAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_closed_glamcuts";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// listado de ingresos y egresos de efectivo de la caja
        /// </summary>
        public void PrBoxGetReportInputCash (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_input_cash";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// listado de ingresos y egresos de efectivo de la caja
        /// </summary>
        public async Task PrBoxGetReportInputCashAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_input_cash";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// listado de ingresos y egresos de efectivo de la caja
        /// </summary>
        public void PrBoxGetReportOutputCash (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_output_cash";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// listado de ingresos y egresos de efectivo de la caja
        /// </summary>
        public async Task PrBoxGetReportOutputCashAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prAuthorization, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_box_get_report_output_cash";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 150;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prAuthorizationParameter = cmd.CreateParameter();
                    prAuthorizationParameter.ParameterName = "prAuthorization";
                    prAuthorizationParameter.Direction = ParameterDirection.Input;
                    prAuthorizationParameter.DbType = DbType.Int32;
                    prAuthorizationParameter.Precision = 10;
                    prAuthorizationParameter.Scale = 0;
                    if (prAuthorization.HasValue)
                    {
                        prAuthorizationParameter.Value = prAuthorization.Value;
                    }
                    else
                    {
                        prAuthorizationParameter.Size = -1;
                        prAuthorizationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAuthorizationParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener la lista de movimientos y sus comisiones.
        /// </summary>
        public void PrCollectionGetReportCommisionProvider (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStart, DateTime? prEnd, int? prProviderID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_commision_provider";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartParameter = cmd.CreateParameter();
                    prStartParameter.ParameterName = "prStart";
                    prStartParameter.Direction = ParameterDirection.Input;
                    prStartParameter.DbType = DbType.DateTime;
                    if (prStart.HasValue)
                    {
                        prStartParameter.Value = prStart.Value;
                    }
                    else
                    {
                        prStartParameter.Size = -1;
                        prStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartParameter);

                    DbParameter prEndParameter = cmd.CreateParameter();
                    prEndParameter.ParameterName = "prEnd";
                    prEndParameter.Direction = ParameterDirection.Input;
                    prEndParameter.DbType = DbType.DateTime;
                    if (prEnd.HasValue)
                    {
                        prEndParameter.Value = prEnd.Value;
                    }
                    else
                    {
                        prEndParameter.Size = -1;
                        prEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndParameter);

                    DbParameter prProviderIDParameter = cmd.CreateParameter();
                    prProviderIDParameter.ParameterName = "prProviderID";
                    prProviderIDParameter.Direction = ParameterDirection.Input;
                    prProviderIDParameter.DbType = DbType.Int32;
                    prProviderIDParameter.Precision = 10;
                    prProviderIDParameter.Scale = 0;
                    if (prProviderID.HasValue)
                    {
                        prProviderIDParameter.Value = prProviderID.Value;
                    }
                    else
                    {
                        prProviderIDParameter.Size = -1;
                        prProviderIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prProviderIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener la lista de movimientos y sus comisiones.
        /// </summary>
        public async Task PrCollectionGetReportCommisionProviderAsync (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStart, DateTime? prEnd, int? prProviderID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_commision_provider";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartParameter = cmd.CreateParameter();
                    prStartParameter.ParameterName = "prStart";
                    prStartParameter.Direction = ParameterDirection.Input;
                    prStartParameter.DbType = DbType.DateTime;
                    if (prStart.HasValue)
                    {
                        prStartParameter.Value = prStart.Value;
                    }
                    else
                    {
                        prStartParameter.Size = -1;
                        prStartParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartParameter);

                    DbParameter prEndParameter = cmd.CreateParameter();
                    prEndParameter.ParameterName = "prEnd";
                    prEndParameter.Direction = ParameterDirection.Input;
                    prEndParameter.DbType = DbType.DateTime;
                    if (prEnd.HasValue)
                    {
                        prEndParameter.Value = prEnd.Value;
                    }
                    else
                    {
                        prEndParameter.Size = -1;
                        prEndParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndParameter);

                    DbParameter prProviderIDParameter = cmd.CreateParameter();
                    prProviderIDParameter.ParameterName = "prProviderID";
                    prProviderIDParameter.Direction = ParameterDirection.Input;
                    prProviderIDParameter.DbType = DbType.Int32;
                    prProviderIDParameter.Precision = 10;
                    prProviderIDParameter.Scale = 0;
                    if (prProviderID.HasValue)
                    {
                        prProviderIDParameter.Value = prProviderID.Value;
                    }
                    else
                    {
                        prProviderIDParameter.Size = -1;
                        prProviderIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prProviderIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// lista de clientes de los gestores de credito
        /// </summary>
        public void PrCollectionGetReportCustomer (int? prUserID, string prToken, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_customer";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenParameter = cmd.CreateParameter();
                    prTokenParameter.ParameterName = "prToken";
                    prTokenParameter.Direction = ParameterDirection.Input;
                    prTokenParameter.DbType = DbType.String;
                    prTokenParameter.Size = 50;
                    if (prToken != null)
                    {
                        prTokenParameter.Value = prToken;
                    }
                    else
                    {
                        prTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// lista de clientes de los gestores de credito
        /// </summary>
        public async Task PrCollectionGetReportCustomerAsync (int? prUserID, string prToken, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_customer";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenParameter = cmd.CreateParameter();
                    prTokenParameter.ParameterName = "prToken";
                    prTokenParameter.Direction = ParameterDirection.Input;
                    prTokenParameter.DbType = DbType.String;
                    prTokenParameter.Size = 50;
                    if (prToken != null)
                    {
                        prTokenParameter.Value = prToken;
                    }
                    else
                    {
                        prTokenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Reporte para ver el calculo de comisiones de los gestores
        /// </summary>
        public void PrCollectionGetReportDetalleTransaction (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_detalle_transaction";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Reporte para ver el calculo de comisiones de los gestores
        /// </summary>
        public async Task PrCollectionGetReportDetalleTransactionAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_detalle_transaction";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrCollectionGetReportDocumentCredit (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_document_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrCollectionGetReportDocumentCreditAsync (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_collection_get_report_document_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procediminento que se utiliza para calcular los conceptos de la transaccion de otras salidas de inventario
        /// </summary>
        public void PrConceptHelperBilling (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_billing";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procediminento que se utiliza para calcular los conceptos de la transaccion de otras salidas de inventario
        /// </summary>
        public async Task PrConceptHelperBillingAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_billing";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrConceptHelperCalendarpay (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_calendarpay";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrConceptHelperCalendarpayAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_calendarpay";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Calcular los conceptos de la cancelacion de factura
        /// </summary>
        public void PrConceptHelperCancelinvoice (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_cancelinvoice";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Calcular los conceptos de la cancelacion de factura
        /// </summary>
        public async Task PrConceptHelperCancelinvoiceAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_cancelinvoice";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Entrada sin postear
        /// </summary>
        public void PrConceptHelperInputUnpost (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_input_unpost";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Entrada sin postear
        /// </summary>
        public async Task PrConceptHelperInputUnpostAsync (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_input_unpost";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para calcular los conceptos de Otras entradas a Inventario
        /// </summary>
        public void PrConceptHelperOtherInput (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_other_input";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para calcular los conceptos de Otras entradas a Inventario
        /// </summary>
        public async Task PrConceptHelperOtherInputAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_other_input";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procediminento que se utiliza para calcular los conceptos de la transaccion de otras salidas de inventario
        /// </summary>
        public void PrConceptHelperOtherOutput (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_other_output";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procediminento que se utiliza para calcular los conceptos de la transaccion de otras salidas de inventario
        /// </summary>
        public async Task PrConceptHelperOtherOutputAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_other_output";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Calculo de concepto de Provisiones
        /// </summary>
        public void PrConceptHelperProvider (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_provider";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Calculo de concepto de Provisiones
        /// </summary>
        public async Task PrConceptHelperProviderAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_provider";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para calcular los conceptos de Devolucion de Compra
        /// </summary>
        public void PrConceptHelperReturnsProvider (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_returns_provider";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para calcular los conceptos de Devolucion de Compra
        /// </summary>
        public async Task PrConceptHelperReturnsProviderAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_returns_provider";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Contabilizar Adelantos de Salario
        /// </summary>
        public void PrConceptHelperSalaryadvance (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_salaryadvance";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Contabilizar Adelantos de Salario
        /// </summary>
        public async Task PrConceptHelperSalaryadvanceAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_salaryadvance";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener los conceptos de los Abonos de Credito
        /// </summary>
        public void PrConceptHelperShare (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_share";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener los conceptos de los Abonos de Credito
        /// </summary>
        public async Task PrConceptHelperShareAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_share";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Crear los conceptos del abono al capital
        /// </summary>
        public void PrConceptHelperSharecapital (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_sharecapital";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Crear los conceptos del abono al capital
        /// </summary>
        public async Task PrConceptHelperSharecapitalAsync (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_concept_helper_sharecapital";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener la tasa de cambio del dia 
        /// </summary>
        public void PrCoreGetExchangeRate (int? prCompanyID, DateTime? prDate, byte[] prCurrencySource, byte[] prCurrencyTarget, out decimal? prExchangeRate)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_exchange_rate";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDateParameter = cmd.CreateParameter();
                    prDateParameter.ParameterName = "prDate";
                    prDateParameter.Direction = ParameterDirection.Input;
                    prDateParameter.DbType = DbType.DateTime;
                    if (prDate.HasValue)
                    {
                        prDateParameter.Value = prDate.Value;
                    }
                    else
                    {
                        prDateParameter.Size = -1;
                        prDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateParameter);

                    DbParameter prCurrencySourceParameter = cmd.CreateParameter();
                    prCurrencySourceParameter.ParameterName = "prCurrencySource";
                    prCurrencySourceParameter.Direction = ParameterDirection.Input;
                    prCurrencySourceParameter.DbType = DbType.Binary;
                    prCurrencySourceParameter.Size = 250;
                    if (prCurrencySource != null)
                    {
                        prCurrencySourceParameter.Value = prCurrencySource;
                    }
                    else
                    {
                        prCurrencySourceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencySourceParameter);

                    DbParameter prCurrencyTargetParameter = cmd.CreateParameter();
                    prCurrencyTargetParameter.ParameterName = "prCurrencyTarget";
                    prCurrencyTargetParameter.Direction = ParameterDirection.Input;
                    prCurrencyTargetParameter.DbType = DbType.Binary;
                    prCurrencyTargetParameter.Size = 250;
                    if (prCurrencyTarget != null)
                    {
                        prCurrencyTargetParameter.Value = prCurrencyTarget;
                    }
                    else
                    {
                        prCurrencyTargetParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyTargetParameter);

                    DbParameter prExchangeRateParameter = cmd.CreateParameter();
                    prExchangeRateParameter.ParameterName = "prExchangeRate";
                    prExchangeRateParameter.Direction = ParameterDirection.Output;
                    prExchangeRateParameter.DbType = DbType.Decimal;
                    prExchangeRateParameter.Precision = 18;
                    prExchangeRateParameter.Scale = 8;
                    prExchangeRateParameter.Size = -1;
                    prExchangeRateParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prExchangeRateParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prExchangeRate"].Value != null && !(cmd.Parameters["prExchangeRate"].Value is System.DBNull))
                        prExchangeRate = (decimal)Convert.ChangeType(cmd.Parameters["prExchangeRate"].Value, typeof(decimal));
                    else
                        prExchangeRate = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener la tasa de cambio del dia 
        /// </summary>
        public async Task<Tuple<decimal?>> PrCoreGetExchangeRateAsync (int? prCompanyID, DateTime? prDate, byte[] prCurrencySource, byte[] prCurrencyTarget)
        {

            decimal? prExchangeRate;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_exchange_rate";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDateParameter = cmd.CreateParameter();
                    prDateParameter.ParameterName = "prDate";
                    prDateParameter.Direction = ParameterDirection.Input;
                    prDateParameter.DbType = DbType.DateTime;
                    if (prDate.HasValue)
                    {
                        prDateParameter.Value = prDate.Value;
                    }
                    else
                    {
                        prDateParameter.Size = -1;
                        prDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateParameter);

                    DbParameter prCurrencySourceParameter = cmd.CreateParameter();
                    prCurrencySourceParameter.ParameterName = "prCurrencySource";
                    prCurrencySourceParameter.Direction = ParameterDirection.Input;
                    prCurrencySourceParameter.DbType = DbType.Binary;
                    prCurrencySourceParameter.Size = 250;
                    if (prCurrencySource != null)
                    {
                        prCurrencySourceParameter.Value = prCurrencySource;
                    }
                    else
                    {
                        prCurrencySourceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencySourceParameter);

                    DbParameter prCurrencyTargetParameter = cmd.CreateParameter();
                    prCurrencyTargetParameter.ParameterName = "prCurrencyTarget";
                    prCurrencyTargetParameter.Direction = ParameterDirection.Input;
                    prCurrencyTargetParameter.DbType = DbType.Binary;
                    prCurrencyTargetParameter.Size = 250;
                    if (prCurrencyTarget != null)
                    {
                        prCurrencyTargetParameter.Value = prCurrencyTarget;
                    }
                    else
                    {
                        prCurrencyTargetParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyTargetParameter);

                    DbParameter prExchangeRateParameter = cmd.CreateParameter();
                    prExchangeRateParameter.ParameterName = "prExchangeRate";
                    prExchangeRateParameter.Direction = ParameterDirection.Output;
                    prExchangeRateParameter.DbType = DbType.Decimal;
                    prExchangeRateParameter.Precision = 18;
                    prExchangeRateParameter.Scale = 8;
                    prExchangeRateParameter.Size = -1;
                    prExchangeRateParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prExchangeRateParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prExchangeRate"].Value != null && !(cmd.Parameters["prExchangeRate"].Value is System.DBNull))
                        prExchangeRate = (decimal)Convert.ChangeType(cmd.Parameters["prExchangeRate"].Value, typeof(decimal));
                    else
                        prExchangeRate = default(decimal);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<decimal?>(prExchangeRate);
        }

        /// <summary>
        /// Obtiene la lista de indicadores
        /// </summary>
        public void PrCoreGetIndicator (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_indicators";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Obtiene la lista de indicadores
        /// </summary>
        public async Task PrCoreGetIndicatorAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prTokenID, int? prPeriodID, int? prCycleID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_indicators";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener el siguiente numero de un Componente
        /// </summary>
        public void PrCoreGetNextNumber (int? prCompanyID, byte[] prComponent, int? prBranchID, int? prComponentItemID, out string prNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_next_number";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prComponentParameter = cmd.CreateParameter();
                    prComponentParameter.ParameterName = "prComponent";
                    prComponentParameter.Direction = ParameterDirection.Input;
                    prComponentParameter.DbType = DbType.Binary;
                    prComponentParameter.Size = 250;
                    if (prComponent != null)
                    {
                        prComponentParameter.Value = prComponent;
                    }
                    else
                    {
                        prComponentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prComponentParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prComponentItemIDParameter = cmd.CreateParameter();
                    prComponentItemIDParameter.ParameterName = "prComponentItemID";
                    prComponentItemIDParameter.Direction = ParameterDirection.Input;
                    prComponentItemIDParameter.DbType = DbType.Int32;
                    prComponentItemIDParameter.Precision = 10;
                    prComponentItemIDParameter.Scale = 0;
                    if (prComponentItemID.HasValue)
                    {
                        prComponentItemIDParameter.Value = prComponentItemID.Value;
                    }
                    else
                    {
                        prComponentItemIDParameter.Size = -1;
                        prComponentItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prComponentItemIDParameter);

                    DbParameter prNumberParameter = cmd.CreateParameter();
                    prNumberParameter.ParameterName = "prNumber";
                    prNumberParameter.Direction = ParameterDirection.Output;
                    prNumberParameter.DbType = DbType.String;
                    prNumberParameter.Size = 250;
                    prNumberParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prNumberParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prNumber"].Value != null && !(cmd.Parameters["prNumber"].Value is System.DBNull))
                        prNumber = (string)Convert.ChangeType(cmd.Parameters["prNumber"].Value, typeof(string));
                    else
                        prNumber = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Obtener el siguiente numero de un Componente
        /// </summary>
        public async Task<Tuple<string>> PrCoreGetNextNumberAsync (int? prCompanyID, byte[] prComponent, int? prBranchID, int? prComponentItemID)
        {

            string prNumber;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_next_number";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prComponentParameter = cmd.CreateParameter();
                    prComponentParameter.ParameterName = "prComponent";
                    prComponentParameter.Direction = ParameterDirection.Input;
                    prComponentParameter.DbType = DbType.Binary;
                    prComponentParameter.Size = 250;
                    if (prComponent != null)
                    {
                        prComponentParameter.Value = prComponent;
                    }
                    else
                    {
                        prComponentParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prComponentParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prComponentItemIDParameter = cmd.CreateParameter();
                    prComponentItemIDParameter.ParameterName = "prComponentItemID";
                    prComponentItemIDParameter.Direction = ParameterDirection.Input;
                    prComponentItemIDParameter.DbType = DbType.Int32;
                    prComponentItemIDParameter.Precision = 10;
                    prComponentItemIDParameter.Scale = 0;
                    if (prComponentItemID.HasValue)
                    {
                        prComponentItemIDParameter.Value = prComponentItemID.Value;
                    }
                    else
                    {
                        prComponentItemIDParameter.Size = -1;
                        prComponentItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prComponentItemIDParameter);

                    DbParameter prNumberParameter = cmd.CreateParameter();
                    prNumberParameter.ParameterName = "prNumber";
                    prNumberParameter.Direction = ParameterDirection.Output;
                    prNumberParameter.DbType = DbType.String;
                    prNumberParameter.Size = 250;
                    prNumberParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prNumberParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prNumber"].Value != null && !(cmd.Parameters["prNumber"].Value is System.DBNull))
                        prNumber = (string)Convert.ChangeType(cmd.Parameters["prNumber"].Value, typeof(string));
                    else
                        prNumber = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<string>(prNumber);
        }

        /// <summary>
        /// Procedimiento para obtener el valor de un parametro
        /// </summary>
        public void PrCoreGetParameterValue (int? prCompanyID, byte[] prParameter, out string prValue)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_parameter_value";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prParameterParameter = cmd.CreateParameter();
                    prParameterParameter.ParameterName = "prParameter";
                    prParameterParameter.Direction = ParameterDirection.Input;
                    prParameterParameter.DbType = DbType.Binary;
                    prParameterParameter.Size = 250;
                    if (prParameter != null)
                    {
                        prParameterParameter.Value = prParameter;
                    }
                    else
                    {
                        prParameterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prParameterParameter);

                    DbParameter prValueParameter = cmd.CreateParameter();
                    prValueParameter.ParameterName = "prValue";
                    prValueParameter.Direction = ParameterDirection.Output;
                    prValueParameter.DbType = DbType.String;
                    prValueParameter.Size = 250;
                    prValueParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prValueParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prValue"].Value != null && !(cmd.Parameters["prValue"].Value is System.DBNull))
                        prValue = (string)Convert.ChangeType(cmd.Parameters["prValue"].Value, typeof(string));
                    else
                        prValue = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener el valor de un parametro
        /// </summary>
        public async Task<Tuple<string>> PrCoreGetParameterValueAsync (int? prCompanyID, byte[] prParameter)
        {

            string prValue;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_parameter_value";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prParameterParameter = cmd.CreateParameter();
                    prParameterParameter.ParameterName = "prParameter";
                    prParameterParameter.Direction = ParameterDirection.Input;
                    prParameterParameter.DbType = DbType.Binary;
                    prParameterParameter.Size = 250;
                    if (prParameter != null)
                    {
                        prParameterParameter.Value = prParameter;
                    }
                    else
                    {
                        prParameterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prParameterParameter);

                    DbParameter prValueParameter = cmd.CreateParameter();
                    prValueParameter.ParameterName = "prValue";
                    prValueParameter.Direction = ParameterDirection.Output;
                    prValueParameter.DbType = DbType.String;
                    prValueParameter.Size = 250;
                    prValueParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prValueParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prValue"].Value != null && !(cmd.Parameters["prValue"].Value is System.DBNull))
                        prValue = (string)Convert.ChangeType(cmd.Parameters["prValue"].Value, typeof(string));
                    else
                        prValue = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<string>(prValue);
        }

        /// <summary>
        /// Procedimiento para obtener el estado inicial de un tb_workflow Asociado a una columna de una Tabla
        /// </summary>
        public void PrCoreGetWorkflowStageInit (int? prCompanyID, byte[] prTable, byte[] prField, out int? prWorkflowStageInit)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_workflow_stage_init";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTableParameter = cmd.CreateParameter();
                    prTableParameter.ParameterName = "prTable";
                    prTableParameter.Direction = ParameterDirection.Input;
                    prTableParameter.DbType = DbType.Binary;
                    prTableParameter.Size = 250;
                    if (prTable != null)
                    {
                        prTableParameter.Value = prTable;
                    }
                    else
                    {
                        prTableParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTableParameter);

                    DbParameter prFieldParameter = cmd.CreateParameter();
                    prFieldParameter.ParameterName = "prField";
                    prFieldParameter.Direction = ParameterDirection.Input;
                    prFieldParameter.DbType = DbType.Binary;
                    prFieldParameter.Size = 250;
                    if (prField != null)
                    {
                        prFieldParameter.Value = prField;
                    }
                    else
                    {
                        prFieldParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFieldParameter);

                    DbParameter prWorkflowStageInitParameter = cmd.CreateParameter();
                    prWorkflowStageInitParameter.ParameterName = "prWorkflowStageInit";
                    prWorkflowStageInitParameter.Direction = ParameterDirection.Output;
                    prWorkflowStageInitParameter.DbType = DbType.Int32;
                    prWorkflowStageInitParameter.Precision = 10;
                    prWorkflowStageInitParameter.Scale = 0;
                    prWorkflowStageInitParameter.Size = -1;
                    prWorkflowStageInitParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prWorkflowStageInitParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prWorkflowStageInit"].Value != null && !(cmd.Parameters["prWorkflowStageInit"].Value is System.DBNull))
                        prWorkflowStageInit = (int)Convert.ChangeType(cmd.Parameters["prWorkflowStageInit"].Value, typeof(int));
                    else
                        prWorkflowStageInit = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener el estado inicial de un tb_workflow Asociado a una columna de una Tabla
        /// </summary>
        public async Task<Tuple<int?>> PrCoreGetWorkflowStageInitAsync (int? prCompanyID, byte[] prTable, byte[] prField)
        {

            int? prWorkflowStageInit;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_core_get_workflow_stage_init";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTableParameter = cmd.CreateParameter();
                    prTableParameter.ParameterName = "prTable";
                    prTableParameter.Direction = ParameterDirection.Input;
                    prTableParameter.DbType = DbType.Binary;
                    prTableParameter.Size = 250;
                    if (prTable != null)
                    {
                        prTableParameter.Value = prTable;
                    }
                    else
                    {
                        prTableParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTableParameter);

                    DbParameter prFieldParameter = cmd.CreateParameter();
                    prFieldParameter.ParameterName = "prField";
                    prFieldParameter.Direction = ParameterDirection.Input;
                    prFieldParameter.DbType = DbType.Binary;
                    prFieldParameter.Size = 250;
                    if (prField != null)
                    {
                        prFieldParameter.Value = prField;
                    }
                    else
                    {
                        prFieldParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFieldParameter);

                    DbParameter prWorkflowStageInitParameter = cmd.CreateParameter();
                    prWorkflowStageInitParameter.ParameterName = "prWorkflowStageInit";
                    prWorkflowStageInitParameter.Direction = ParameterDirection.Output;
                    prWorkflowStageInitParameter.DbType = DbType.Int32;
                    prWorkflowStageInitParameter.Precision = 10;
                    prWorkflowStageInitParameter.Scale = 0;
                    prWorkflowStageInitParameter.Size = -1;
                    prWorkflowStageInitParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prWorkflowStageInitParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prWorkflowStageInit"].Value != null && !(cmd.Parameters["prWorkflowStageInit"].Value is System.DBNull))
                        prWorkflowStageInit = (int)Convert.ChangeType(cmd.Parameters["prWorkflowStageInit"].Value, typeof(int));
                    else
                        prWorkflowStageInit = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prWorkflowStageInit);
        }

        public void PrCxcGetReportCollectionManager (int? prUserID, string prTokenID, int? prCompanyID, string prEmployeeCode)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_collection_manager";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prEmployeeCodeParameter = cmd.CreateParameter();
                    prEmployeeCodeParameter.ParameterName = "prEmployeeCode";
                    prEmployeeCodeParameter.Direction = ParameterDirection.Input;
                    prEmployeeCodeParameter.DbType = DbType.String;
                    prEmployeeCodeParameter.Size = 50;
                    if (prEmployeeCode != null)
                    {
                        prEmployeeCodeParameter.Value = prEmployeeCode;
                    }
                    else
                    {
                        prEmployeeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployeeCodeParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrCxcGetReportCollectionManagerAsync (int? prUserID, string prTokenID, int? prCompanyID, string prEmployeeCode)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_collection_manager";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prEmployeeCodeParameter = cmd.CreateParameter();
                    prEmployeeCodeParameter.ParameterName = "prEmployeeCode";
                    prEmployeeCodeParameter.Direction = ParameterDirection.Input;
                    prEmployeeCodeParameter.DbType = DbType.String;
                    prEmployeeCodeParameter.Size = 50;
                    if (prEmployeeCode != null)
                    {
                        prEmployeeCodeParameter.Value = prEmployeeCode;
                    }
                    else
                    {
                        prEmployeeCodeParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployeeCodeParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// cartera de credito diferenciada por moneda
        /// </summary>
        public void PrCxcGetReportCustomerCredit (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// cartera de credito diferenciada por moneda
        /// </summary>
        public async Task PrCxcGetReportCustomerCreditAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// cartera de credito diferenciada por moneda
        /// </summary>
        public void PrCxcGetReportCustomerCreditByUser (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit_by_user";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// cartera de credito diferenciada por moneda
        /// </summary>
        public async Task PrCxcGetReportCustomerCreditByUserAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit_by_user";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// reporte de lista de clientes de credito
        /// </summary>
        public void PrCxcGetReportCustomerCreditDolare (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit_dolares";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// reporte de lista de clientes de credito
        /// </summary>
        public async Task PrCxcGetReportCustomerCreditDolareAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_credit_dolares";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrCxcGetReportCustomerExpensa (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_expensas";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrCxcGetReportCustomerExpensaAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_expensas";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// lista de clientes
        /// </summary>
        public void PrCxcGetReportCustomerList (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_list";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// lista de clientes
        /// </summary>
        public async Task PrCxcGetReportCustomerListAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_list";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Lista de Pagos del Cliente
        /// </summary>
        public void PrCxcGetReportCustomerPay (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_pay";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Lista de Pagos del Cliente
        /// </summary>
        public async Task PrCxcGetReportCustomerPayAsync (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_pay";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// muestra la lista de consultas elaboradas a sin riesgo
        /// </summary>
        public void PrCxcGetReportCustomerSrList (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_sr_list";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// muestra la lista de consultas elaboradas a sin riesgo
        /// </summary>
        public async Task PrCxcGetReportCustomerSrListAsync (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_sr_list";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Estado de cuenta del cliente
        /// </summary>
        public void PrCxcGetReportCustomerStatus (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_status";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Estado de cuenta del cliente
        /// </summary>
        public async Task PrCxcGetReportCustomerStatusAsync (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_customer_status";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener el contrato de credito
        /// </summary>
        public void PrCxcGetReportDocumentContract (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_document_contract";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener el contrato de credito
        /// </summary>
        public async Task PrCxcGetReportDocumentContractAsync (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_document_contract";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrCxcGetReportDocumentCredit (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_document_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrCxcGetReportDocumentCreditAsync (int? prCompanyID, string prTokenID, int? prUserID, string prDocumentNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_document_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrCxcGetReportExchangeRate (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_exchange_rate";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrCxcGetReportExchangeRateAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_exchange_rate";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrCxcGetReportInfoProyect (int? prCompanyID, string prTokenID, int? prUserID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_info_proyect";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrCxcGetReportInfoProyectAsync (int? prCompanyID, string prTokenID, int? prUserID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_info_proyect";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// reporte para ver los intereses pagado y capital pagado en un intervalo de fecha
        /// </summary>
        public void PrCxcGetReportInteresPeriodo (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_interes_periodo";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// reporte para ver los intereses pagado y capital pagado en un intervalo de fecha
        /// </summary>
        public async Task PrCxcGetReportInteresPeriodoAsync (int? prUserID, string prTokenID, int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_interes_periodo";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Estado de cuenta del cliente
        /// </summary>
        public void PrCxcGetReportMovementCustomer (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_movement_customer";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Estado de cuenta del cliente
        /// </summary>
        public async Task PrCxcGetReportMovementCustomerAsync (int? prCompanyID, string prTokenID, int? prUserID, string prCustomerNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_movement_customer";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrCxcGetReportSummaryCredit (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_summary_credit";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 250;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrCxcGetReportSummaryCreditAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_summary_credit";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 250;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Reporte para reportal al buro de credito
        /// </summary>
        public void PrCxcGetReportUploadBuro (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_upload_buro";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 250;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Reporte para reportal al buro de credito
        /// </summary>
        public async Task PrCxcGetReportUploadBuroAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_get_report_upload_buro";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 250;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para aumentar de plazo los creditos que son tipo americano y estan proximo a vencer
        /// </summary>
        public void PrCxcProcExpandinvoice (int? prCompanyID, string prDocumentNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_proc_expandinvoice";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para aumentar de plazo los creditos que son tipo americano y estan proximo a vencer
        /// </summary>
        public async Task PrCxcProcExpandinvoiceAsync (int? prCompanyID, string prDocumentNumber)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_proc_expandinvoice";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Anula una cuota
        /// </summary>
        public void PrCxcProcSuprimeShare (int? prCompanyID, string prDocumentNumber, DateTime? prCuotaModificada, bool? prAumentaMesDeGracia, decimal? prCambioInteresDelMes)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_proc_suprime_share";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);

                    DbParameter prCuotaModificadaParameter = cmd.CreateParameter();
                    prCuotaModificadaParameter.ParameterName = "prCuotaModificada";
                    prCuotaModificadaParameter.Direction = ParameterDirection.Input;
                    prCuotaModificadaParameter.DbType = DbType.DateTime;
                    if (prCuotaModificada.HasValue)
                    {
                        prCuotaModificadaParameter.Value = prCuotaModificada.Value;
                    }
                    else
                    {
                        prCuotaModificadaParameter.Size = -1;
                        prCuotaModificadaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCuotaModificadaParameter);

                    DbParameter prAumentaMesDeGraciaParameter = cmd.CreateParameter();
                    prAumentaMesDeGraciaParameter.ParameterName = "prAumentaMesDeGracia";
                    prAumentaMesDeGraciaParameter.Direction = ParameterDirection.Input;
                    prAumentaMesDeGraciaParameter.DbType = DbType.Boolean;
                    prAumentaMesDeGraciaParameter.Precision = 1;
                    if (prAumentaMesDeGracia.HasValue)
                    {
                        prAumentaMesDeGraciaParameter.Value = prAumentaMesDeGracia.Value;
                    }
                    else
                    {
                        prAumentaMesDeGraciaParameter.Size = -1;
                        prAumentaMesDeGraciaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAumentaMesDeGraciaParameter);

                    DbParameter prCambioInteresDelMesParameter = cmd.CreateParameter();
                    prCambioInteresDelMesParameter.ParameterName = "prCambioInteresDelMes";
                    prCambioInteresDelMesParameter.Direction = ParameterDirection.Input;
                    prCambioInteresDelMesParameter.DbType = DbType.Decimal;
                    prCambioInteresDelMesParameter.Precision = 19;
                    prCambioInteresDelMesParameter.Scale = 5;
                    if (prCambioInteresDelMes.HasValue)
                    {
                        prCambioInteresDelMesParameter.Value = prCambioInteresDelMes.Value;
                    }
                    else
                    {
                        prCambioInteresDelMesParameter.Size = -1;
                        prCambioInteresDelMesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCambioInteresDelMesParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Anula una cuota
        /// </summary>
        public async Task PrCxcProcSuprimeShareAsync (int? prCompanyID, string prDocumentNumber, DateTime? prCuotaModificada, bool? prAumentaMesDeGracia, decimal? prCambioInteresDelMes)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_proc_suprime_share";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDocumentNumberParameter = cmd.CreateParameter();
                    prDocumentNumberParameter.ParameterName = "prDocumentNumber";
                    prDocumentNumberParameter.Direction = ParameterDirection.Input;
                    prDocumentNumberParameter.DbType = DbType.String;
                    prDocumentNumberParameter.Size = 50;
                    if (prDocumentNumber != null)
                    {
                        prDocumentNumberParameter.Value = prDocumentNumber;
                    }
                    else
                    {
                        prDocumentNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDocumentNumberParameter);

                    DbParameter prCuotaModificadaParameter = cmd.CreateParameter();
                    prCuotaModificadaParameter.ParameterName = "prCuotaModificada";
                    prCuotaModificadaParameter.Direction = ParameterDirection.Input;
                    prCuotaModificadaParameter.DbType = DbType.DateTime;
                    if (prCuotaModificada.HasValue)
                    {
                        prCuotaModificadaParameter.Value = prCuotaModificada.Value;
                    }
                    else
                    {
                        prCuotaModificadaParameter.Size = -1;
                        prCuotaModificadaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCuotaModificadaParameter);

                    DbParameter prAumentaMesDeGraciaParameter = cmd.CreateParameter();
                    prAumentaMesDeGraciaParameter.ParameterName = "prAumentaMesDeGracia";
                    prAumentaMesDeGraciaParameter.Direction = ParameterDirection.Input;
                    prAumentaMesDeGraciaParameter.DbType = DbType.Boolean;
                    prAumentaMesDeGraciaParameter.Precision = 1;
                    if (prAumentaMesDeGracia.HasValue)
                    {
                        prAumentaMesDeGraciaParameter.Value = prAumentaMesDeGracia.Value;
                    }
                    else
                    {
                        prAumentaMesDeGraciaParameter.Size = -1;
                        prAumentaMesDeGraciaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prAumentaMesDeGraciaParameter);

                    DbParameter prCambioInteresDelMesParameter = cmd.CreateParameter();
                    prCambioInteresDelMesParameter.ParameterName = "prCambioInteresDelMes";
                    prCambioInteresDelMesParameter.Direction = ParameterDirection.Input;
                    prCambioInteresDelMesParameter.DbType = DbType.Decimal;
                    prCambioInteresDelMesParameter.Precision = 19;
                    prCambioInteresDelMesParameter.Scale = 5;
                    if (prCambioInteresDelMes.HasValue)
                    {
                        prCambioInteresDelMesParameter.Value = prCambioInteresDelMes.Value;
                    }
                    else
                    {
                        prCambioInteresDelMesParameter.Size = -1;
                        prCambioInteresDelMesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCambioInteresDelMesParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrCxcProAddSolidarioToCreditSinRiesgo (int? prCompanyID, string prInvoiceNumber, string prCustomerNumber, decimal? prRatioDesembolso, decimal? prRatioBalance, decimal? prRatioBalanceExpired, decimal? prRatioShare, int? prTipoCredito, int? prTipoObligacion, int? prFrecuenciaPago, int? prEstadoCredito, int? prRecuperacion, int? prGarantia)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_pro_add_solidario_to_credit_sin_riesgo";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prInvoiceNumberParameter = cmd.CreateParameter();
                    prInvoiceNumberParameter.ParameterName = "prInvoiceNumber";
                    prInvoiceNumberParameter.Direction = ParameterDirection.Input;
                    prInvoiceNumberParameter.DbType = DbType.String;
                    prInvoiceNumberParameter.Size = 50;
                    if (prInvoiceNumber != null)
                    {
                        prInvoiceNumberParameter.Value = prInvoiceNumber;
                    }
                    else
                    {
                        prInvoiceNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInvoiceNumberParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);

                    DbParameter prRatioDesembolsoParameter = cmd.CreateParameter();
                    prRatioDesembolsoParameter.ParameterName = "prRatioDesembolso";
                    prRatioDesembolsoParameter.Direction = ParameterDirection.Input;
                    prRatioDesembolsoParameter.DbType = DbType.Decimal;
                    prRatioDesembolsoParameter.Precision = 10;
                    prRatioDesembolsoParameter.Scale = 4;
                    if (prRatioDesembolso.HasValue)
                    {
                        prRatioDesembolsoParameter.Value = prRatioDesembolso.Value;
                    }
                    else
                    {
                        prRatioDesembolsoParameter.Size = -1;
                        prRatioDesembolsoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioDesembolsoParameter);

                    DbParameter prRatioBalanceParameter = cmd.CreateParameter();
                    prRatioBalanceParameter.ParameterName = "prRatioBalance";
                    prRatioBalanceParameter.Direction = ParameterDirection.Input;
                    prRatioBalanceParameter.DbType = DbType.Decimal;
                    prRatioBalanceParameter.Precision = 10;
                    prRatioBalanceParameter.Scale = 4;
                    if (prRatioBalance.HasValue)
                    {
                        prRatioBalanceParameter.Value = prRatioBalance.Value;
                    }
                    else
                    {
                        prRatioBalanceParameter.Size = -1;
                        prRatioBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioBalanceParameter);

                    DbParameter prRatioBalanceExpiredParameter = cmd.CreateParameter();
                    prRatioBalanceExpiredParameter.ParameterName = "prRatioBalanceExpired";
                    prRatioBalanceExpiredParameter.Direction = ParameterDirection.Input;
                    prRatioBalanceExpiredParameter.DbType = DbType.Decimal;
                    prRatioBalanceExpiredParameter.Precision = 10;
                    prRatioBalanceExpiredParameter.Scale = 4;
                    if (prRatioBalanceExpired.HasValue)
                    {
                        prRatioBalanceExpiredParameter.Value = prRatioBalanceExpired.Value;
                    }
                    else
                    {
                        prRatioBalanceExpiredParameter.Size = -1;
                        prRatioBalanceExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioBalanceExpiredParameter);

                    DbParameter prRatioShareParameter = cmd.CreateParameter();
                    prRatioShareParameter.ParameterName = "prRatioShare";
                    prRatioShareParameter.Direction = ParameterDirection.Input;
                    prRatioShareParameter.DbType = DbType.Decimal;
                    prRatioShareParameter.Precision = 10;
                    prRatioShareParameter.Scale = 4;
                    if (prRatioShare.HasValue)
                    {
                        prRatioShareParameter.Value = prRatioShare.Value;
                    }
                    else
                    {
                        prRatioShareParameter.Size = -1;
                        prRatioShareParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioShareParameter);

                    DbParameter prTipoCreditoParameter = cmd.CreateParameter();
                    prTipoCreditoParameter.ParameterName = "prTipoCredito";
                    prTipoCreditoParameter.Direction = ParameterDirection.Input;
                    prTipoCreditoParameter.DbType = DbType.Int32;
                    prTipoCreditoParameter.Precision = 10;
                    prTipoCreditoParameter.Scale = 0;
                    if (prTipoCredito.HasValue)
                    {
                        prTipoCreditoParameter.Value = prTipoCredito.Value;
                    }
                    else
                    {
                        prTipoCreditoParameter.Size = -1;
                        prTipoCreditoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoCreditoParameter);

                    DbParameter prTipoObligacionParameter = cmd.CreateParameter();
                    prTipoObligacionParameter.ParameterName = "prTipoObligacion";
                    prTipoObligacionParameter.Direction = ParameterDirection.Input;
                    prTipoObligacionParameter.DbType = DbType.Int32;
                    prTipoObligacionParameter.Precision = 10;
                    prTipoObligacionParameter.Scale = 0;
                    if (prTipoObligacion.HasValue)
                    {
                        prTipoObligacionParameter.Value = prTipoObligacion.Value;
                    }
                    else
                    {
                        prTipoObligacionParameter.Size = -1;
                        prTipoObligacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoObligacionParameter);

                    DbParameter prFrecuenciaPagoParameter = cmd.CreateParameter();
                    prFrecuenciaPagoParameter.ParameterName = "prFrecuenciaPago";
                    prFrecuenciaPagoParameter.Direction = ParameterDirection.Input;
                    prFrecuenciaPagoParameter.DbType = DbType.Int32;
                    prFrecuenciaPagoParameter.Precision = 10;
                    prFrecuenciaPagoParameter.Scale = 0;
                    if (prFrecuenciaPago.HasValue)
                    {
                        prFrecuenciaPagoParameter.Value = prFrecuenciaPago.Value;
                    }
                    else
                    {
                        prFrecuenciaPagoParameter.Size = -1;
                        prFrecuenciaPagoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFrecuenciaPagoParameter);

                    DbParameter prEstadoCreditoParameter = cmd.CreateParameter();
                    prEstadoCreditoParameter.ParameterName = "prEstadoCredito";
                    prEstadoCreditoParameter.Direction = ParameterDirection.Input;
                    prEstadoCreditoParameter.DbType = DbType.Int32;
                    prEstadoCreditoParameter.Precision = 10;
                    prEstadoCreditoParameter.Scale = 0;
                    if (prEstadoCredito.HasValue)
                    {
                        prEstadoCreditoParameter.Value = prEstadoCredito.Value;
                    }
                    else
                    {
                        prEstadoCreditoParameter.Size = -1;
                        prEstadoCreditoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEstadoCreditoParameter);

                    DbParameter prRecuperacionParameter = cmd.CreateParameter();
                    prRecuperacionParameter.ParameterName = "prRecuperacion";
                    prRecuperacionParameter.Direction = ParameterDirection.Input;
                    prRecuperacionParameter.DbType = DbType.Int32;
                    prRecuperacionParameter.Precision = 10;
                    prRecuperacionParameter.Scale = 0;
                    if (prRecuperacion.HasValue)
                    {
                        prRecuperacionParameter.Value = prRecuperacion.Value;
                    }
                    else
                    {
                        prRecuperacionParameter.Size = -1;
                        prRecuperacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRecuperacionParameter);

                    DbParameter prGarantiaParameter = cmd.CreateParameter();
                    prGarantiaParameter.ParameterName = "prGarantia";
                    prGarantiaParameter.Direction = ParameterDirection.Input;
                    prGarantiaParameter.DbType = DbType.Int32;
                    prGarantiaParameter.Precision = 10;
                    prGarantiaParameter.Scale = 0;
                    if (prGarantia.HasValue)
                    {
                        prGarantiaParameter.Value = prGarantia.Value;
                    }
                    else
                    {
                        prGarantiaParameter.Size = -1;
                        prGarantiaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prGarantiaParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrCxcProAddSolidarioToCreditSinRiesgoAsync (int? prCompanyID, string prInvoiceNumber, string prCustomerNumber, decimal? prRatioDesembolso, decimal? prRatioBalance, decimal? prRatioBalanceExpired, decimal? prRatioShare, int? prTipoCredito, int? prTipoObligacion, int? prFrecuenciaPago, int? prEstadoCredito, int? prRecuperacion, int? prGarantia)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxc_pro_add_solidario_to_credit_sin_riesgo";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prInvoiceNumberParameter = cmd.CreateParameter();
                    prInvoiceNumberParameter.ParameterName = "prInvoiceNumber";
                    prInvoiceNumberParameter.Direction = ParameterDirection.Input;
                    prInvoiceNumberParameter.DbType = DbType.String;
                    prInvoiceNumberParameter.Size = 50;
                    if (prInvoiceNumber != null)
                    {
                        prInvoiceNumberParameter.Value = prInvoiceNumber;
                    }
                    else
                    {
                        prInvoiceNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInvoiceNumberParameter);

                    DbParameter prCustomerNumberParameter = cmd.CreateParameter();
                    prCustomerNumberParameter.ParameterName = "prCustomerNumber";
                    prCustomerNumberParameter.Direction = ParameterDirection.Input;
                    prCustomerNumberParameter.DbType = DbType.String;
                    prCustomerNumberParameter.Size = 50;
                    if (prCustomerNumber != null)
                    {
                        prCustomerNumberParameter.Value = prCustomerNumber;
                    }
                    else
                    {
                        prCustomerNumberParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCustomerNumberParameter);

                    DbParameter prRatioDesembolsoParameter = cmd.CreateParameter();
                    prRatioDesembolsoParameter.ParameterName = "prRatioDesembolso";
                    prRatioDesembolsoParameter.Direction = ParameterDirection.Input;
                    prRatioDesembolsoParameter.DbType = DbType.Decimal;
                    prRatioDesembolsoParameter.Precision = 10;
                    prRatioDesembolsoParameter.Scale = 4;
                    if (prRatioDesembolso.HasValue)
                    {
                        prRatioDesembolsoParameter.Value = prRatioDesembolso.Value;
                    }
                    else
                    {
                        prRatioDesembolsoParameter.Size = -1;
                        prRatioDesembolsoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioDesembolsoParameter);

                    DbParameter prRatioBalanceParameter = cmd.CreateParameter();
                    prRatioBalanceParameter.ParameterName = "prRatioBalance";
                    prRatioBalanceParameter.Direction = ParameterDirection.Input;
                    prRatioBalanceParameter.DbType = DbType.Decimal;
                    prRatioBalanceParameter.Precision = 10;
                    prRatioBalanceParameter.Scale = 4;
                    if (prRatioBalance.HasValue)
                    {
                        prRatioBalanceParameter.Value = prRatioBalance.Value;
                    }
                    else
                    {
                        prRatioBalanceParameter.Size = -1;
                        prRatioBalanceParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioBalanceParameter);

                    DbParameter prRatioBalanceExpiredParameter = cmd.CreateParameter();
                    prRatioBalanceExpiredParameter.ParameterName = "prRatioBalanceExpired";
                    prRatioBalanceExpiredParameter.Direction = ParameterDirection.Input;
                    prRatioBalanceExpiredParameter.DbType = DbType.Decimal;
                    prRatioBalanceExpiredParameter.Precision = 10;
                    prRatioBalanceExpiredParameter.Scale = 4;
                    if (prRatioBalanceExpired.HasValue)
                    {
                        prRatioBalanceExpiredParameter.Value = prRatioBalanceExpired.Value;
                    }
                    else
                    {
                        prRatioBalanceExpiredParameter.Size = -1;
                        prRatioBalanceExpiredParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioBalanceExpiredParameter);

                    DbParameter prRatioShareParameter = cmd.CreateParameter();
                    prRatioShareParameter.ParameterName = "prRatioShare";
                    prRatioShareParameter.Direction = ParameterDirection.Input;
                    prRatioShareParameter.DbType = DbType.Decimal;
                    prRatioShareParameter.Precision = 10;
                    prRatioShareParameter.Scale = 4;
                    if (prRatioShare.HasValue)
                    {
                        prRatioShareParameter.Value = prRatioShare.Value;
                    }
                    else
                    {
                        prRatioShareParameter.Size = -1;
                        prRatioShareParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRatioShareParameter);

                    DbParameter prTipoCreditoParameter = cmd.CreateParameter();
                    prTipoCreditoParameter.ParameterName = "prTipoCredito";
                    prTipoCreditoParameter.Direction = ParameterDirection.Input;
                    prTipoCreditoParameter.DbType = DbType.Int32;
                    prTipoCreditoParameter.Precision = 10;
                    prTipoCreditoParameter.Scale = 0;
                    if (prTipoCredito.HasValue)
                    {
                        prTipoCreditoParameter.Value = prTipoCredito.Value;
                    }
                    else
                    {
                        prTipoCreditoParameter.Size = -1;
                        prTipoCreditoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoCreditoParameter);

                    DbParameter prTipoObligacionParameter = cmd.CreateParameter();
                    prTipoObligacionParameter.ParameterName = "prTipoObligacion";
                    prTipoObligacionParameter.Direction = ParameterDirection.Input;
                    prTipoObligacionParameter.DbType = DbType.Int32;
                    prTipoObligacionParameter.Precision = 10;
                    prTipoObligacionParameter.Scale = 0;
                    if (prTipoObligacion.HasValue)
                    {
                        prTipoObligacionParameter.Value = prTipoObligacion.Value;
                    }
                    else
                    {
                        prTipoObligacionParameter.Size = -1;
                        prTipoObligacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoObligacionParameter);

                    DbParameter prFrecuenciaPagoParameter = cmd.CreateParameter();
                    prFrecuenciaPagoParameter.ParameterName = "prFrecuenciaPago";
                    prFrecuenciaPagoParameter.Direction = ParameterDirection.Input;
                    prFrecuenciaPagoParameter.DbType = DbType.Int32;
                    prFrecuenciaPagoParameter.Precision = 10;
                    prFrecuenciaPagoParameter.Scale = 0;
                    if (prFrecuenciaPago.HasValue)
                    {
                        prFrecuenciaPagoParameter.Value = prFrecuenciaPago.Value;
                    }
                    else
                    {
                        prFrecuenciaPagoParameter.Size = -1;
                        prFrecuenciaPagoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prFrecuenciaPagoParameter);

                    DbParameter prEstadoCreditoParameter = cmd.CreateParameter();
                    prEstadoCreditoParameter.ParameterName = "prEstadoCredito";
                    prEstadoCreditoParameter.Direction = ParameterDirection.Input;
                    prEstadoCreditoParameter.DbType = DbType.Int32;
                    prEstadoCreditoParameter.Precision = 10;
                    prEstadoCreditoParameter.Scale = 0;
                    if (prEstadoCredito.HasValue)
                    {
                        prEstadoCreditoParameter.Value = prEstadoCredito.Value;
                    }
                    else
                    {
                        prEstadoCreditoParameter.Size = -1;
                        prEstadoCreditoParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEstadoCreditoParameter);

                    DbParameter prRecuperacionParameter = cmd.CreateParameter();
                    prRecuperacionParameter.ParameterName = "prRecuperacion";
                    prRecuperacionParameter.Direction = ParameterDirection.Input;
                    prRecuperacionParameter.DbType = DbType.Int32;
                    prRecuperacionParameter.Precision = 10;
                    prRecuperacionParameter.Scale = 0;
                    if (prRecuperacion.HasValue)
                    {
                        prRecuperacionParameter.Value = prRecuperacion.Value;
                    }
                    else
                    {
                        prRecuperacionParameter.Size = -1;
                        prRecuperacionParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRecuperacionParameter);

                    DbParameter prGarantiaParameter = cmd.CreateParameter();
                    prGarantiaParameter.ParameterName = "prGarantia";
                    prGarantiaParameter.Direction = ParameterDirection.Input;
                    prGarantiaParameter.DbType = DbType.Int32;
                    prGarantiaParameter.Precision = 10;
                    prGarantiaParameter.Scale = 0;
                    if (prGarantia.HasValue)
                    {
                        prGarantiaParameter.Value = prGarantia.Value;
                    }
                    else
                    {
                        prGarantiaParameter.Size = -1;
                        prGarantiaParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prGarantiaParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Obtener detalle de gastos 
        /// </summary>
        public void PrCxpGetReportExpensesDetail (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prTipoExpense, int? prCategoryExpenses, int? prClassExpenses)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prTipoExpenseParameter = cmd.CreateParameter();
                    prTipoExpenseParameter.ParameterName = "prTipoExpense";
                    prTipoExpenseParameter.Direction = ParameterDirection.Input;
                    prTipoExpenseParameter.DbType = DbType.Int32;
                    prTipoExpenseParameter.Precision = 10;
                    prTipoExpenseParameter.Scale = 0;
                    if (prTipoExpense.HasValue)
                    {
                        prTipoExpenseParameter.Value = prTipoExpense.Value;
                    }
                    else
                    {
                        prTipoExpenseParameter.Size = -1;
                        prTipoExpenseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoExpenseParameter);

                    DbParameter prCategoryExpensesParameter = cmd.CreateParameter();
                    prCategoryExpensesParameter.ParameterName = "prCategoryExpenses";
                    prCategoryExpensesParameter.Direction = ParameterDirection.Input;
                    prCategoryExpensesParameter.DbType = DbType.Int32;
                    prCategoryExpensesParameter.Precision = 10;
                    prCategoryExpensesParameter.Scale = 0;
                    if (prCategoryExpenses.HasValue)
                    {
                        prCategoryExpensesParameter.Value = prCategoryExpenses.Value;
                    }
                    else
                    {
                        prCategoryExpensesParameter.Size = -1;
                        prCategoryExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryExpensesParameter);

                    DbParameter prClassExpensesParameter = cmd.CreateParameter();
                    prClassExpensesParameter.ParameterName = "prClassExpenses";
                    prClassExpensesParameter.Direction = ParameterDirection.Input;
                    prClassExpensesParameter.DbType = DbType.Int32;
                    prClassExpensesParameter.Precision = 10;
                    prClassExpensesParameter.Scale = 0;
                    if (prClassExpenses.HasValue)
                    {
                        prClassExpensesParameter.Value = prClassExpenses.Value;
                    }
                    else
                    {
                        prClassExpensesParameter.Size = -1;
                        prClassExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassExpensesParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Obtener detalle de gastos 
        /// </summary>
        public async Task PrCxpGetReportExpensesDetailAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prTipoExpense, int? prCategoryExpenses, int? prClassExpenses)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prTipoExpenseParameter = cmd.CreateParameter();
                    prTipoExpenseParameter.ParameterName = "prTipoExpense";
                    prTipoExpenseParameter.Direction = ParameterDirection.Input;
                    prTipoExpenseParameter.DbType = DbType.Int32;
                    prTipoExpenseParameter.Precision = 10;
                    prTipoExpenseParameter.Scale = 0;
                    if (prTipoExpense.HasValue)
                    {
                        prTipoExpenseParameter.Value = prTipoExpense.Value;
                    }
                    else
                    {
                        prTipoExpenseParameter.Size = -1;
                        prTipoExpenseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoExpenseParameter);

                    DbParameter prCategoryExpensesParameter = cmd.CreateParameter();
                    prCategoryExpensesParameter.ParameterName = "prCategoryExpenses";
                    prCategoryExpensesParameter.Direction = ParameterDirection.Input;
                    prCategoryExpensesParameter.DbType = DbType.Int32;
                    prCategoryExpensesParameter.Precision = 10;
                    prCategoryExpensesParameter.Scale = 0;
                    if (prCategoryExpenses.HasValue)
                    {
                        prCategoryExpensesParameter.Value = prCategoryExpenses.Value;
                    }
                    else
                    {
                        prCategoryExpensesParameter.Size = -1;
                        prCategoryExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryExpensesParameter);

                    DbParameter prClassExpensesParameter = cmd.CreateParameter();
                    prClassExpensesParameter.ParameterName = "prClassExpenses";
                    prClassExpensesParameter.Direction = ParameterDirection.Input;
                    prClassExpensesParameter.DbType = DbType.Int32;
                    prClassExpensesParameter.Precision = 10;
                    prClassExpensesParameter.Scale = 0;
                    if (prClassExpenses.HasValue)
                    {
                        prClassExpensesParameter.Value = prClassExpenses.Value;
                    }
                    else
                    {
                        prClassExpensesParameter.Size = -1;
                        prClassExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassExpensesParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Obtener gastos resumidos por categoria 
        /// </summary>
        public void PrCxpGetReportExpensesSummary (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prTipoExpense, int? prCategoryExpenses, int? prClassExpenses)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prTipoExpenseParameter = cmd.CreateParameter();
                    prTipoExpenseParameter.ParameterName = "prTipoExpense";
                    prTipoExpenseParameter.Direction = ParameterDirection.Input;
                    prTipoExpenseParameter.DbType = DbType.Int32;
                    prTipoExpenseParameter.Precision = 10;
                    prTipoExpenseParameter.Scale = 0;
                    if (prTipoExpense.HasValue)
                    {
                        prTipoExpenseParameter.Value = prTipoExpense.Value;
                    }
                    else
                    {
                        prTipoExpenseParameter.Size = -1;
                        prTipoExpenseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoExpenseParameter);

                    DbParameter prCategoryExpensesParameter = cmd.CreateParameter();
                    prCategoryExpensesParameter.ParameterName = "prCategoryExpenses";
                    prCategoryExpensesParameter.Direction = ParameterDirection.Input;
                    prCategoryExpensesParameter.DbType = DbType.Int32;
                    prCategoryExpensesParameter.Precision = 10;
                    prCategoryExpensesParameter.Scale = 0;
                    if (prCategoryExpenses.HasValue)
                    {
                        prCategoryExpensesParameter.Value = prCategoryExpenses.Value;
                    }
                    else
                    {
                        prCategoryExpensesParameter.Size = -1;
                        prCategoryExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryExpensesParameter);

                    DbParameter prClassExpensesParameter = cmd.CreateParameter();
                    prClassExpensesParameter.ParameterName = "prClassExpenses";
                    prClassExpensesParameter.Direction = ParameterDirection.Input;
                    prClassExpensesParameter.DbType = DbType.Int32;
                    prClassExpensesParameter.Precision = 10;
                    prClassExpensesParameter.Scale = 0;
                    if (prClassExpenses.HasValue)
                    {
                        prClassExpensesParameter.Value = prClassExpenses.Value;
                    }
                    else
                    {
                        prClassExpensesParameter.Size = -1;
                        prClassExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassExpensesParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Obtener gastos resumidos por categoria 
        /// </summary>
        public async Task PrCxpGetReportExpensesSummaryAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prTipoExpense, int? prCategoryExpenses, int? prClassExpenses)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prTipoExpenseParameter = cmd.CreateParameter();
                    prTipoExpenseParameter.ParameterName = "prTipoExpense";
                    prTipoExpenseParameter.Direction = ParameterDirection.Input;
                    prTipoExpenseParameter.DbType = DbType.Int32;
                    prTipoExpenseParameter.Precision = 10;
                    prTipoExpenseParameter.Scale = 0;
                    if (prTipoExpense.HasValue)
                    {
                        prTipoExpenseParameter.Value = prTipoExpense.Value;
                    }
                    else
                    {
                        prTipoExpenseParameter.Size = -1;
                        prTipoExpenseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTipoExpenseParameter);

                    DbParameter prCategoryExpensesParameter = cmd.CreateParameter();
                    prCategoryExpensesParameter.ParameterName = "prCategoryExpenses";
                    prCategoryExpensesParameter.Direction = ParameterDirection.Input;
                    prCategoryExpensesParameter.DbType = DbType.Int32;
                    prCategoryExpensesParameter.Precision = 10;
                    prCategoryExpensesParameter.Scale = 0;
                    if (prCategoryExpenses.HasValue)
                    {
                        prCategoryExpensesParameter.Value = prCategoryExpenses.Value;
                    }
                    else
                    {
                        prCategoryExpensesParameter.Size = -1;
                        prCategoryExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryExpensesParameter);

                    DbParameter prClassExpensesParameter = cmd.CreateParameter();
                    prClassExpensesParameter.ParameterName = "prClassExpenses";
                    prClassExpensesParameter.Direction = ParameterDirection.Input;
                    prClassExpensesParameter.DbType = DbType.Int32;
                    prClassExpensesParameter.Precision = 10;
                    prClassExpensesParameter.Scale = 0;
                    if (prClassExpenses.HasValue)
                    {
                        prClassExpensesParameter.Value = prClassExpenses.Value;
                    }
                    else
                    {
                        prClassExpensesParameter.Size = -1;
                        prClassExpensesParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prClassExpensesParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Obtener gastos pivot por fecha
        /// </summary>
        public void PrCxpGetReportExpensesSummaryPivot (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_summary_pivot";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Obtener gastos pivot por fecha
        /// </summary>
        public async Task PrCxpGetReportExpensesSummaryPivotAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_cxp_get_report_expenses_summary_pivot";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento que se utilizara para calcular el costo de los Item cuando se registra una nueva entrada de mercaderia
        /// </summary>
        public void PrInventoryCalculateKardexNewInput (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_calculate_kardex_new_input";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento que se utilizara para calcular el costo de los Item cuando se registra una nueva entrada de mercaderia
        /// </summary>
        public async Task PrInventoryCalculateKardexNewInputAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_calculate_kardex_new_input";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento que se utiliza para restar el inventario al momento de registrar una salida de inventario
        /// </summary>
        public void PrInventoryCalculateKardexNewOutput (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_calculate_kardex_new_output";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento que se utiliza para restar el inventario al momento de registrar una salida de inventario
        /// </summary>
        public async Task PrInventoryCalculateKardexNewOutputAsync (int? prCompanyID, int? prTransactionID, long? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_calculate_kardex_new_output";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int64;
                    prTransactionMasterIDParameter.Precision = 19;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crer entradas de meraderia
        /// </summary>
        public void PrInventoryCreateTransactionInputByAjuste (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID, out int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_input_by_ajuste";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crer entradas de meraderia
        /// </summary>
        public async Task<Tuple<int?>> PrInventoryCreateTransactionInputByAjusteAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID)
        {

            int? prResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_input_by_ajuste";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prResult);
        }

        /// <summary>
        /// Procedimiento para crear facturacion de meraderia
        /// </summary>
        public void PrInventoryCreateTransactionOutputByAjuste (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID, out int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_output_by_ajuste";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crear facturacion de meraderia
        /// </summary>
        public async Task<Tuple<int?>> PrInventoryCreateTransactionOutputByAjusteAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prTransactionID, int? prTransactionMasterID)
        {

            int? prResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_output_by_ajuste";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prResult);
        }

        /// <summary>
        /// Procedimiento para crer una salida de inventario automatica, para los productos tipos formulas
        /// </summary>
        public void PrInventoryCreateTransactionOutputByFormulated (int? prCompanyID, int? prBranchID, int? prLoginID, int? prPeriodID, int? prCycleID, out int? prResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_output_by_formulated";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crer una salida de inventario automatica, para los productos tipos formulas
        /// </summary>
        public async Task<Tuple<int?>> PrInventoryCreateTransactionOutputByFormulatedAsync (int? prCompanyID, int? prBranchID, int? prLoginID, int? prPeriodID, int? prCycleID)
        {

            int? prResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_create_transaction_output_by_formulated";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prResultParameter = cmd.CreateParameter();
                    prResultParameter.ParameterName = "prResult";
                    prResultParameter.Direction = ParameterDirection.Output;
                    prResultParameter.DbType = DbType.Int32;
                    prResultParameter.Precision = 10;
                    prResultParameter.Scale = 0;
                    prResultParameter.Size = -1;
                    prResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prResult"].Value != null && !(cmd.Parameters["prResult"].Value is System.DBNull))
                        prResult = (int)Convert.ChangeType(cmd.Parameters["prResult"].Value, typeof(int));
                    else
                        prResult = default(int);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?>(prResult);
        }

        /// <summary>
        /// Lista de Productos por Vencer
        /// </summary>
        public void PrInventoryGetEportListItemExpired (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_eport_list_item_expired";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Lista de Productos por Vencer
        /// </summary>
        public async Task PrInventoryGetEportListItemExpiredAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_eport_list_item_expired";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener la lista de todos los movimientos del producto de todas las bodegas
        /// </summary>
        public void PrInventoryGetReportAuxiliarMovByAllwarehouse (int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn, int? prItemID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_auxiliar_mov_by_allwarehouse";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener la lista de todos los movimientos del producto de todas las bodegas
        /// </summary>
        public async Task PrInventoryGetReportAuxiliarMovByAllwarehouseAsync (int? prCompanyID, DateTime? prStartOn, DateTime? prEndOn, int? prItemID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_auxiliar_mov_by_allwarehouse";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener los movimientos de productos de una bodega
        /// </summary>
        public void PrInventoryGetReportAuxiliarMovByWarehouse (int? prCompanyID, int? prWarehouseID, DateTime? prStartOn, DateTime? prEndOn, int? prItemID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_auxiliar_mov_by_warehouse";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener los movimientos de productos de una bodega
        /// </summary>
        public async Task PrInventoryGetReportAuxiliarMovByWarehouseAsync (int? prCompanyID, int? prWarehouseID, DateTime? prStartOn, DateTime? prEndOn, int? prItemID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_auxiliar_mov_by_warehouse";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Lista de Productos
        /// </summary>
        public void PrInventoryGetReportListItem (int? prUserID, string prTokenID, int? prCompanyID, int? prWarehouseID, int? prCategoryID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prCategoryIDParameter = cmd.CreateParameter();
                    prCategoryIDParameter.ParameterName = "prCategoryID";
                    prCategoryIDParameter.Direction = ParameterDirection.Input;
                    prCategoryIDParameter.DbType = DbType.Int32;
                    prCategoryIDParameter.Precision = 10;
                    prCategoryIDParameter.Scale = 0;
                    if (prCategoryID.HasValue)
                    {
                        prCategoryIDParameter.Value = prCategoryID.Value;
                    }
                    else
                    {
                        prCategoryIDParameter.Size = -1;
                        prCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Lista de Productos
        /// </summary>
        public async Task PrInventoryGetReportListItemAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prWarehouseID, int? prCategoryID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prCategoryIDParameter = cmd.CreateParameter();
                    prCategoryIDParameter.ParameterName = "prCategoryID";
                    prCategoryIDParameter.Direction = ParameterDirection.Input;
                    prCategoryIDParameter.DbType = DbType.Int32;
                    prCategoryIDParameter.Precision = 10;
                    prCategoryIDParameter.Scale = 0;
                    if (prCategoryID.HasValue)
                    {
                        prCategoryIDParameter.Value = prCategoryID.Value;
                    }
                    else
                    {
                        prCategoryIDParameter.Size = -1;
                        prCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCategoryIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrInventoryGetReportListItemByWarehouse (int? prUserID, string prTokenID, int? prCompanyID, string prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item_by_warehouse";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.String;
                    prWarehouseIDParameter.Size = 150;
                    if (prWarehouseID != null)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID;
                    }
                    else
                    {
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrInventoryGetReportListItemByWarehouseAsync (int? prUserID, string prTokenID, int? prCompanyID, string prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item_by_warehouse";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.String;
                    prWarehouseIDParameter.Size = 150;
                    if (prWarehouseID != null)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID;
                    }
                    else
                    {
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Lista de Productos
        /// </summary>
        public void PrInventoryGetReportListItemWidthExist (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item_width_exists";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Lista de Productos
        /// </summary>
        public async Task PrInventoryGetReportListItemWidthExistAsync (int? prUserID, string prTokenID, int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_list_item_width_exists";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener el karde de mercaderia
        /// </summary>
        public void PrInventoryGetReportMasterKardex (int? prUserID, string prTokenID, int? prCompanyID, int? prWarehouseID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_master_kardex";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para obtener el karde de mercaderia
        /// </summary>
        public async Task PrInventoryGetReportMasterKardexAsync (int? prUserID, string prTokenID, int? prCompanyID, int? prWarehouseID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_get_report_master_kardex";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Recalcular costo de inventario
        /// </summary>
        public void PrInventoryLastItemMovement (int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_last_item_movement";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Recalcular costo de inventario
        /// </summary>
        public async Task PrInventoryLastItemMovementAsync (int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_last_item_movement";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Recalcular costo de inventario
        /// </summary>
        public void PrInventoryRecalculateCost (int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_recalculate_cost";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Recalcular costo de inventario
        /// </summary>
        public async Task PrInventoryRecalculateCostAsync (int? prCompanyID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_inventory_recalculate_cost";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public void PrNotificationBuy (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_notification_buy";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task PrNotificationBuyAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_notification_buy";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crear la transaccion de planilla
        /// </summary>
        public void PrPlanillaCreateTransaction (int? prCompanyID, int? prCalendarID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_create_transaction";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prCalendarIDParameter = cmd.CreateParameter();
                    prCalendarIDParameter.ParameterName = "prCalendarID";
                    prCalendarIDParameter.Direction = ParameterDirection.Input;
                    prCalendarIDParameter.DbType = DbType.Int32;
                    prCalendarIDParameter.Precision = 10;
                    prCalendarIDParameter.Scale = 0;
                    if (prCalendarID.HasValue)
                    {
                        prCalendarIDParameter.Value = prCalendarID.Value;
                    }
                    else
                    {
                        prCalendarIDParameter.Size = -1;
                        prCalendarIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCalendarIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para crear la transaccion de planilla
        /// </summary>
        public async Task PrPlanillaCreateTransactionAsync (int? prCompanyID, int? prCalendarID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_create_transaction";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prCalendarIDParameter = cmd.CreateParameter();
                    prCalendarIDParameter.ParameterName = "prCalendarID";
                    prCalendarIDParameter.Direction = ParameterDirection.Input;
                    prCalendarIDParameter.DbType = DbType.Int32;
                    prCalendarIDParameter.Precision = 10;
                    prCalendarIDParameter.Scale = 0;
                    if (prCalendarID.HasValue)
                    {
                        prCalendarIDParameter.Value = prCalendarID.Value;
                    }
                    else
                    {
                        prCalendarIDParameter.Size = -1;
                        prCalendarIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCalendarIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Eliminar el adelanto de planilla
        /// </summary>
        public void PrPlanillaRemoveAdelanto (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_remove_adelanto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Eliminar el adelanto de planilla
        /// </summary>
        public async Task PrPlanillaRemoveAdelantoAsync (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_remove_adelanto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para actualizar los adelantos en la planilla
        /// </summary>
        public void PrPlanillaUpdateAdelanto (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_update_adelanto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para actualizar los adelantos en la planilla
        /// </summary>
        public async Task PrPlanillaUpdateAdelantoAsync (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_planilla_update_adelanto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de Compras
        /// </summary>
        public void PrPurchaseGetReportPurchaseDetail (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prProviderID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_purchase_get_report_purchase_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prProviderIDParameter = cmd.CreateParameter();
                    prProviderIDParameter.ParameterName = "prProviderID";
                    prProviderIDParameter.Direction = ParameterDirection.Input;
                    prProviderIDParameter.DbType = DbType.Int32;
                    prProviderIDParameter.Precision = 10;
                    prProviderIDParameter.Scale = 0;
                    if (prProviderID.HasValue)
                    {
                        prProviderIDParameter.Value = prProviderID.Value;
                    }
                    else
                    {
                        prProviderIDParameter.Size = -1;
                        prProviderIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prProviderIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de Compras
        /// </summary>
        public async Task PrPurchaseGetReportPurchaseDetailAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prProviderID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_purchase_get_report_purchase_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prProviderIDParameter = cmd.CreateParameter();
                    prProviderIDParameter.ParameterName = "prProviderID";
                    prProviderIDParameter.Direction = ParameterDirection.Input;
                    prProviderIDParameter.DbType = DbType.Int32;
                    prProviderIDParameter.Precision = 10;
                    prProviderIDParameter.Scale = 0;
                    if (prProviderID.HasValue)
                    {
                        prProviderIDParameter.Value = prProviderID.Value;
                    }
                    else
                    {
                        prProviderIDParameter.Size = -1;
                        prProviderIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prProviderIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrPurchaseGetReportPurchaseTaller (int? prUserID, string prTokenID, int? prCompanyID, string prEmployerID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_purchase_get_report_purchase_taller";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prEmployerIDParameter = cmd.CreateParameter();
                    prEmployerIDParameter.ParameterName = "prEmployerID";
                    prEmployerIDParameter.Direction = ParameterDirection.Input;
                    prEmployerIDParameter.DbType = DbType.String;
                    prEmployerIDParameter.Size = 150;
                    if (prEmployerID != null)
                    {
                        prEmployerIDParameter.Value = prEmployerID;
                    }
                    else
                    {
                        prEmployerIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployerIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrPurchaseGetReportPurchaseTallerAsync (int? prUserID, string prTokenID, int? prCompanyID, string prEmployerID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_purchase_get_report_purchase_taller";

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prEmployerIDParameter = cmd.CreateParameter();
                    prEmployerIDParameter.ParameterName = "prEmployerID";
                    prEmployerIDParameter.Direction = ParameterDirection.Input;
                    prEmployerIDParameter.DbType = DbType.String;
                    prEmployerIDParameter.Size = 150;
                    if (prEmployerID != null)
                    {
                        prEmployerIDParameter.Value = prEmployerID;
                    }
                    else
                    {
                        prEmployerIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEmployerIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public void PrSalesGetReportSalesByClient (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_by_client";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task PrSalesGetReportSalesByClientAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_by_client";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public void PrSalesGetReportSalesComisssionSummary (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_comisssion_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task PrSalesGetReportSalesComisssionSummaryAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_comisssion_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public void PrSalesGetReportSalesDay (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_day";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task PrSalesGetReportSalesDayAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_day";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public void PrSalesGetReportSalesDetail (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task PrSalesGetReportSalesDetailAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID, int? prWarehouse)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);

                    DbParameter prWarehouseParameter = cmd.CreateParameter();
                    prWarehouseParameter.ParameterName = "prWarehouse";
                    prWarehouseParameter.Direction = ParameterDirection.Input;
                    prWarehouseParameter.DbType = DbType.Int32;
                    prWarehouseParameter.Precision = 10;
                    prWarehouseParameter.Scale = 0;
                    if (prWarehouse.HasValue)
                    {
                        prWarehouseParameter.Value = prWarehouse.Value;
                    }
                    else
                    {
                        prWarehouseParameter.Size = -1;
                        prWarehouseParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Resumen de venta
        /// </summary>
        public void PrSalesGetReportSalesSummary (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter, int? prWithTax1)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);

                    DbParameter prWithTax1Parameter = cmd.CreateParameter();
                    prWithTax1Parameter.ParameterName = "prWithTax1";
                    prWithTax1Parameter.Direction = ParameterDirection.Input;
                    prWithTax1Parameter.DbType = DbType.Int32;
                    prWithTax1Parameter.Precision = 10;
                    prWithTax1Parameter.Scale = 0;
                    if (prWithTax1.HasValue)
                    {
                        prWithTax1Parameter.Value = prWithTax1.Value;
                    }
                    else
                    {
                        prWithTax1Parameter.Size = -1;
                        prWithTax1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWithTax1Parameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Resumen de venta
        /// </summary>
        public async Task PrSalesGetReportSalesSummaryAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter, int? prWithTax1)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);

                    DbParameter prWithTax1Parameter = cmd.CreateParameter();
                    prWithTax1Parameter.ParameterName = "prWithTax1";
                    prWithTax1Parameter.Direction = ParameterDirection.Input;
                    prWithTax1Parameter.DbType = DbType.Int32;
                    prWithTax1Parameter.Precision = 10;
                    prWithTax1Parameter.Scale = 0;
                    if (prWithTax1.HasValue)
                    {
                        prWithTax1Parameter.Value = prWithTax1.Value;
                    }
                    else
                    {
                        prWithTax1Parameter.Size = -1;
                        prWithTax1Parameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWithTax1Parameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Resumen de venta
        /// </summary>
        public void PrSalesGetReportSalesSummaryCredit (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_summary_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Resumen de venta
        /// </summary>
        public async Task PrSalesGetReportSalesSummaryCreditAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prUserIDFilter, string prConceptFilter)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_summary_credit";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prUserIDFilterParameter = cmd.CreateParameter();
                    prUserIDFilterParameter.ParameterName = "prUserIDFilter";
                    prUserIDFilterParameter.Direction = ParameterDirection.Input;
                    prUserIDFilterParameter.DbType = DbType.Int32;
                    prUserIDFilterParameter.Precision = 10;
                    prUserIDFilterParameter.Scale = 0;
                    if (prUserIDFilter.HasValue)
                    {
                        prUserIDFilterParameter.Value = prUserIDFilter.Value;
                    }
                    else
                    {
                        prUserIDFilterParameter.Size = -1;
                        prUserIDFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDFilterParameter);

                    DbParameter prConceptFilterParameter = cmd.CreateParameter();
                    prConceptFilterParameter.ParameterName = "prConceptFilter";
                    prConceptFilterParameter.Direction = ParameterDirection.Input;
                    prConceptFilterParameter.DbType = DbType.String;
                    prConceptFilterParameter.Size = 150;
                    if (prConceptFilter != null)
                    {
                        prConceptFilterParameter.Value = prConceptFilter;
                    }
                    else
                    {
                        prConceptFilterParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prConceptFilterParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public void PrSalesGetReportSalesUtilitySummary (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prExpenditureClassification)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_utility_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prExpenditureClassificationParameter = cmd.CreateParameter();
                    prExpenditureClassificationParameter.ParameterName = "prExpenditureClassification";
                    prExpenditureClassificationParameter.Direction = ParameterDirection.Input;
                    prExpenditureClassificationParameter.DbType = DbType.Int32;
                    prExpenditureClassificationParameter.Precision = 10;
                    prExpenditureClassificationParameter.Scale = 0;
                    if (prExpenditureClassification.HasValue)
                    {
                        prExpenditureClassificationParameter.Value = prExpenditureClassification.Value;
                    }
                    else
                    {
                        prExpenditureClassificationParameter.Size = -1;
                        prExpenditureClassificationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prExpenditureClassificationParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task PrSalesGetReportSalesUtilitySummaryAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prExpenditureClassification)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_sales_utility_summary";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prExpenditureClassificationParameter = cmd.CreateParameter();
                    prExpenditureClassificationParameter.ParameterName = "prExpenditureClassification";
                    prExpenditureClassificationParameter.Direction = ParameterDirection.Input;
                    prExpenditureClassificationParameter.DbType = DbType.Int32;
                    prExpenditureClassificationParameter.Precision = 10;
                    prExpenditureClassificationParameter.Scale = 0;
                    if (prExpenditureClassification.HasValue)
                    {
                        prExpenditureClassificationParameter.Value = prExpenditureClassification.Value;
                    }
                    else
                    {
                        prExpenditureClassificationParameter.Size = -1;
                        prExpenditureClassificationParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prExpenditureClassificationParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public void PrSalesGetReportVentaDeProducto (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_venta_de_producto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de ventas
        /// </summary>
        public async Task PrSalesGetReportVentaDeProductoAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn, int? prInventoryCategoryID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_sales_get_report_venta_de_producto";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);

                    DbParameter prInventoryCategoryIDParameter = cmd.CreateParameter();
                    prInventoryCategoryIDParameter.ParameterName = "prInventoryCategoryID";
                    prInventoryCategoryIDParameter.Direction = ParameterDirection.Input;
                    prInventoryCategoryIDParameter.DbType = DbType.Int32;
                    prInventoryCategoryIDParameter.Precision = 10;
                    prInventoryCategoryIDParameter.Scale = 0;
                    if (prInventoryCategoryID.HasValue)
                    {
                        prInventoryCategoryIDParameter.Value = prInventoryCategoryID.Value;
                    }
                    else
                    {
                        prInventoryCategoryIDParameter.Size = -1;
                        prInventoryCategoryIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prInventoryCategoryIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public void PrTransactionMasterDetail (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_master_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        public async Task PrTransactionMasterDetailAsync (int? prCompanyID, int? prTransactionID, int? prTransactionMasterID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_master_detail";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDParameter = cmd.CreateParameter();
                    prTransactionIDParameter.ParameterName = "prTransactionID";
                    prTransactionIDParameter.Direction = ParameterDirection.Input;
                    prTransactionIDParameter.DbType = DbType.Int32;
                    prTransactionIDParameter.Precision = 10;
                    prTransactionIDParameter.Scale = 0;
                    if (prTransactionID.HasValue)
                    {
                        prTransactionIDParameter.Value = prTransactionID.Value;
                    }
                    else
                    {
                        prTransactionIDParameter.Size = -1;
                        prTransactionIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDParameter);

                    DbParameter prTransactionMasterIDParameter = cmd.CreateParameter();
                    prTransactionMasterIDParameter.ParameterName = "prTransactionMasterID";
                    prTransactionMasterIDParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDParameter.DbType = DbType.Int32;
                    prTransactionMasterIDParameter.Precision = 10;
                    prTransactionMasterIDParameter.Scale = 0;
                    if (prTransactionMasterID.HasValue)
                    {
                        prTransactionMasterIDParameter.Value = prTransactionMasterID.Value;
                    }
                    else
                    {
                        prTransactionMasterIDParameter.Size = -1;
                        prTransactionMasterIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de Transacciones Anuladas
        /// </summary>
        public void PrTransactionReportRegistradasAnulada (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_report_registradas_anuladas";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Detalle de Transacciones Anuladas
        /// </summary>
        public async Task PrTransactionReportRegistradasAnuladaAsync (int? prCompanyID, string prTokenID, int? prUserID, DateTime? prStartOn, DateTime? prEndOn)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_report_registradas_anuladas";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTokenIDParameter = cmd.CreateParameter();
                    prTokenIDParameter.ParameterName = "prTokenID";
                    prTokenIDParameter.Direction = ParameterDirection.Input;
                    prTokenIDParameter.DbType = DbType.String;
                    prTokenIDParameter.Size = 50;
                    if (prTokenID != null)
                    {
                        prTokenIDParameter.Value = prTokenID;
                    }
                    else
                    {
                        prTokenIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTokenIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prStartOnParameter = cmd.CreateParameter();
                    prStartOnParameter.ParameterName = "prStartOn";
                    prStartOnParameter.Direction = ParameterDirection.Input;
                    prStartOnParameter.DbType = DbType.DateTime;
                    if (prStartOn.HasValue)
                    {
                        prStartOnParameter.Value = prStartOn.Value;
                    }
                    else
                    {
                        prStartOnParameter.Size = -1;
                        prStartOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prStartOnParameter);

                    DbParameter prEndOnParameter = cmd.CreateParameter();
                    prEndOnParameter.ParameterName = "prEndOn";
                    prEndOnParameter.Direction = ParameterDirection.Input;
                    prEndOnParameter.DbType = DbType.DateTime;
                    if (prEndOn.HasValue)
                    {
                        prEndOnParameter.Value = prEndOn.Value;
                    }
                    else
                    {
                        prEndOnParameter.Size = -1;
                        prEndOnParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prEndOnParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento que se utiliza para revertir una transaccion
        /// </summary>
        public void PrTransactionRevert (int? prCompanyID, int? prTransactionIDOriginal, long? prTransactionMasterIDOriginal, int? prTransactionIDRevert, long? prTransactionMasterIDRevert)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_revert";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDOriginalParameter = cmd.CreateParameter();
                    prTransactionIDOriginalParameter.ParameterName = "prTransactionIDOriginal";
                    prTransactionIDOriginalParameter.Direction = ParameterDirection.Input;
                    prTransactionIDOriginalParameter.DbType = DbType.Int32;
                    prTransactionIDOriginalParameter.Precision = 10;
                    prTransactionIDOriginalParameter.Scale = 0;
                    if (prTransactionIDOriginal.HasValue)
                    {
                        prTransactionIDOriginalParameter.Value = prTransactionIDOriginal.Value;
                    }
                    else
                    {
                        prTransactionIDOriginalParameter.Size = -1;
                        prTransactionIDOriginalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDOriginalParameter);

                    DbParameter prTransactionMasterIDOriginalParameter = cmd.CreateParameter();
                    prTransactionMasterIDOriginalParameter.ParameterName = "prTransactionMasterIDOriginal";
                    prTransactionMasterIDOriginalParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDOriginalParameter.DbType = DbType.Int64;
                    prTransactionMasterIDOriginalParameter.Precision = 19;
                    prTransactionMasterIDOriginalParameter.Scale = 0;
                    if (prTransactionMasterIDOriginal.HasValue)
                    {
                        prTransactionMasterIDOriginalParameter.Value = prTransactionMasterIDOriginal.Value;
                    }
                    else
                    {
                        prTransactionMasterIDOriginalParameter.Size = -1;
                        prTransactionMasterIDOriginalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDOriginalParameter);

                    DbParameter prTransactionIDRevertParameter = cmd.CreateParameter();
                    prTransactionIDRevertParameter.ParameterName = "prTransactionIDRevert";
                    prTransactionIDRevertParameter.Direction = ParameterDirection.Input;
                    prTransactionIDRevertParameter.DbType = DbType.Int32;
                    prTransactionIDRevertParameter.Precision = 10;
                    prTransactionIDRevertParameter.Scale = 0;
                    if (prTransactionIDRevert.HasValue)
                    {
                        prTransactionIDRevertParameter.Value = prTransactionIDRevert.Value;
                    }
                    else
                    {
                        prTransactionIDRevertParameter.Size = -1;
                        prTransactionIDRevertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDRevertParameter);

                    DbParameter prTransactionMasterIDRevertParameter = cmd.CreateParameter();
                    prTransactionMasterIDRevertParameter.ParameterName = "prTransactionMasterIDRevert";
                    prTransactionMasterIDRevertParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDRevertParameter.DbType = DbType.Int64;
                    prTransactionMasterIDRevertParameter.Precision = 19;
                    prTransactionMasterIDRevertParameter.Scale = 0;
                    if (prTransactionMasterIDRevert.HasValue)
                    {
                        prTransactionMasterIDRevertParameter.Value = prTransactionMasterIDRevert.Value;
                    }
                    else
                    {
                        prTransactionMasterIDRevertParameter.Size = -1;
                        prTransactionMasterIDRevertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDRevertParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento que se utiliza para revertir una transaccion
        /// </summary>
        public async Task PrTransactionRevertAsync (int? prCompanyID, int? prTransactionIDOriginal, long? prTransactionMasterIDOriginal, int? prTransactionIDRevert, long? prTransactionMasterIDRevert)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_transaction_revert";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prTransactionIDOriginalParameter = cmd.CreateParameter();
                    prTransactionIDOriginalParameter.ParameterName = "prTransactionIDOriginal";
                    prTransactionIDOriginalParameter.Direction = ParameterDirection.Input;
                    prTransactionIDOriginalParameter.DbType = DbType.Int32;
                    prTransactionIDOriginalParameter.Precision = 10;
                    prTransactionIDOriginalParameter.Scale = 0;
                    if (prTransactionIDOriginal.HasValue)
                    {
                        prTransactionIDOriginalParameter.Value = prTransactionIDOriginal.Value;
                    }
                    else
                    {
                        prTransactionIDOriginalParameter.Size = -1;
                        prTransactionIDOriginalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDOriginalParameter);

                    DbParameter prTransactionMasterIDOriginalParameter = cmd.CreateParameter();
                    prTransactionMasterIDOriginalParameter.ParameterName = "prTransactionMasterIDOriginal";
                    prTransactionMasterIDOriginalParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDOriginalParameter.DbType = DbType.Int64;
                    prTransactionMasterIDOriginalParameter.Precision = 19;
                    prTransactionMasterIDOriginalParameter.Scale = 0;
                    if (prTransactionMasterIDOriginal.HasValue)
                    {
                        prTransactionMasterIDOriginalParameter.Value = prTransactionMasterIDOriginal.Value;
                    }
                    else
                    {
                        prTransactionMasterIDOriginalParameter.Size = -1;
                        prTransactionMasterIDOriginalParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDOriginalParameter);

                    DbParameter prTransactionIDRevertParameter = cmd.CreateParameter();
                    prTransactionIDRevertParameter.ParameterName = "prTransactionIDRevert";
                    prTransactionIDRevertParameter.Direction = ParameterDirection.Input;
                    prTransactionIDRevertParameter.DbType = DbType.Int32;
                    prTransactionIDRevertParameter.Precision = 10;
                    prTransactionIDRevertParameter.Scale = 0;
                    if (prTransactionIDRevert.HasValue)
                    {
                        prTransactionIDRevertParameter.Value = prTransactionIDRevert.Value;
                    }
                    else
                    {
                        prTransactionIDRevertParameter.Size = -1;
                        prTransactionIDRevertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionIDRevertParameter);

                    DbParameter prTransactionMasterIDRevertParameter = cmd.CreateParameter();
                    prTransactionMasterIDRevertParameter.ParameterName = "prTransactionMasterIDRevert";
                    prTransactionMasterIDRevertParameter.Direction = ParameterDirection.Input;
                    prTransactionMasterIDRevertParameter.DbType = DbType.Int64;
                    prTransactionMasterIDRevertParameter.Precision = 19;
                    prTransactionMasterIDRevertParameter.Scale = 0;
                    if (prTransactionMasterIDRevert.HasValue)
                    {
                        prTransactionMasterIDRevertParameter.Value = prTransactionMasterIDRevert.Value;
                    }
                    else
                    {
                        prTransactionMasterIDRevertParameter.Size = -1;
                        prTransactionMasterIDRevertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTransactionMasterIDRevertParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Reparar kardex de un producto en especifico, en una bodega 
        /// </summary>
        public void PrZerrorRepararKardex (int? prItemID, int? prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_reparar_kardex";

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Reparar kardex de un producto en especifico, en una bodega 
        /// </summary>
        public async Task PrZerrorRepararKardexAsync (int? prItemID, int? prWarehouseID)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_reparar_kardex";

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);

                    DbParameter prWarehouseIDParameter = cmd.CreateParameter();
                    prWarehouseIDParameter.ParameterName = "prWarehouseID";
                    prWarehouseIDParameter.Direction = ParameterDirection.Input;
                    prWarehouseIDParameter.DbType = DbType.Int32;
                    prWarehouseIDParameter.Precision = 10;
                    prWarehouseIDParameter.Scale = 0;
                    if (prWarehouseID.HasValue)
                    {
                        prWarehouseIDParameter.Value = prWarehouseID.Value;
                    }
                    else
                    {
                        prWarehouseIDParameter.Size = -1;
                        prWarehouseIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prWarehouseIDParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Reparar facturas, que se facturaron como semanales, y la frecuencia de pago quedo mensual
        /// </summary>
        public void PrZerrorRepararTablaAmortizationDiasParaGymRaptor (int? prItemID, int? prDay)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_reparar_tabla_amortization_dias_para_gym_raptor";

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);

                    DbParameter prDayParameter = cmd.CreateParameter();
                    prDayParameter.ParameterName = "prDay";
                    prDayParameter.Direction = ParameterDirection.Input;
                    prDayParameter.DbType = DbType.Int32;
                    prDayParameter.Precision = 10;
                    prDayParameter.Scale = 0;
                    if (prDay.HasValue)
                    {
                        prDayParameter.Value = prDay.Value;
                    }
                    else
                    {
                        prDayParameter.Size = -1;
                        prDayParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDayParameter);
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Reparar facturas, que se facturaron como semanales, y la frecuencia de pago quedo mensual
        /// </summary>
        public async Task PrZerrorRepararTablaAmortizationDiasParaGymRaptorAsync (int? prItemID, int? prDay)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_reparar_tabla_amortization_dias_para_gym_raptor";

                    DbParameter prItemIDParameter = cmd.CreateParameter();
                    prItemIDParameter.ParameterName = "prItemID";
                    prItemIDParameter.Direction = ParameterDirection.Input;
                    prItemIDParameter.DbType = DbType.Int32;
                    prItemIDParameter.Precision = 10;
                    prItemIDParameter.Scale = 0;
                    if (prItemID.HasValue)
                    {
                        prItemIDParameter.Value = prItemID.Value;
                    }
                    else
                    {
                        prItemIDParameter.Size = -1;
                        prItemIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prItemIDParameter);

                    DbParameter prDayParameter = cmd.CreateParameter();
                    prDayParameter.ParameterName = "prDay";
                    prDayParameter.Direction = ParameterDirection.Input;
                    prDayParameter.DbType = DbType.Int32;
                    prDayParameter.Precision = 10;
                    prDayParameter.Scale = 0;
                    if (prDay.HasValue)
                    {
                        prDayParameter.Value = prDay.Value;
                    }
                    else
                    {
                        prDayParameter.Size = -1;
                        prDayParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDayParameter);
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Trasladar todo a bodega despacho .. 
        /// </summary>
        public void PrZerrorTrasladarTodoABodegaDespacho ()
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_trasladar_todo_a_bodega_despacho";
                    cmd.ExecuteNonQuery();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Trasladar todo a bodega despacho .. 
        /// </summary>
        public async Task PrZerrorTrasladarTodoABodegaDespachoAsync ()
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.pr_zerror_trasladar_todo_a_bodega_despacho";
                    await cmd.ExecuteNonQueryAsync();
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Cerrar un Ciclo Contable
        /// </summary>
        public void NavicatTempStoredProc (int? prCompanyID, int? prBranchID, int? prLoginID, string prCreatedIn, string prTocken, int? prPeriodID, int? prCycleID, out int? prCodeError, out string prMessageResult)
        {

            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.`_Navicat_Temp_Stored_Proc`";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prCreatedInParameter = cmd.CreateParameter();
                    prCreatedInParameter.ParameterName = "prCreatedIn";
                    prCreatedInParameter.Direction = ParameterDirection.Input;
                    prCreatedInParameter.DbType = DbType.String;
                    prCreatedInParameter.Size = 50;
                    if (prCreatedIn != null)
                    {
                        prCreatedInParameter.Value = prCreatedIn;
                    }
                    else
                    {
                        prCreatedInParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreatedInParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prCodeErrorParameter = cmd.CreateParameter();
                    prCodeErrorParameter.ParameterName = "prCodeError";
                    prCodeErrorParameter.Direction = ParameterDirection.Output;
                    prCodeErrorParameter.DbType = DbType.Int32;
                    prCodeErrorParameter.Precision = 10;
                    prCodeErrorParameter.Scale = 0;
                    prCodeErrorParameter.Size = -1;
                    prCodeErrorParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prCodeErrorParameter);

                    DbParameter prMessageResultParameter = cmd.CreateParameter();
                    prMessageResultParameter.ParameterName = "prMessageResult";
                    prMessageResultParameter.Direction = ParameterDirection.Output;
                    prMessageResultParameter.DbType = DbType.String;
                    prMessageResultParameter.Size = 250;
                    prMessageResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prMessageResultParameter);
                    cmd.ExecuteNonQuery();

                    if (cmd.Parameters["prCodeError"].Value != null && !(cmd.Parameters["prCodeError"].Value is System.DBNull))
                        prCodeError = (int)Convert.ChangeType(cmd.Parameters["prCodeError"].Value, typeof(int));
                    else
                        prCodeError = default(int);

                    if (cmd.Parameters["prMessageResult"].Value != null && !(cmd.Parameters["prMessageResult"].Value is System.DBNull))
                        prMessageResult = (string)Convert.ChangeType(cmd.Parameters["prMessageResult"].Value, typeof(string));
                    else
                        prMessageResult = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
        }

        /// <summary>
        /// Procedimiento para Cerrar un Ciclo Contable
        /// </summary>
        public async Task<Tuple<int?, string>> NavicatTempStoredProcAsync (int? prCompanyID, int? prBranchID, int? prLoginID, string prCreatedIn, string prTocken, int? prPeriodID, int? prCycleID)
        {

            int? prCodeError;
            string prMessageResult;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.`_Navicat_Temp_Stored_Proc`";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prBranchIDParameter = cmd.CreateParameter();
                    prBranchIDParameter.ParameterName = "prBranchID";
                    prBranchIDParameter.Direction = ParameterDirection.Input;
                    prBranchIDParameter.DbType = DbType.Int32;
                    prBranchIDParameter.Precision = 10;
                    prBranchIDParameter.Scale = 0;
                    if (prBranchID.HasValue)
                    {
                        prBranchIDParameter.Value = prBranchID.Value;
                    }
                    else
                    {
                        prBranchIDParameter.Size = -1;
                        prBranchIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prBranchIDParameter);

                    DbParameter prLoginIDParameter = cmd.CreateParameter();
                    prLoginIDParameter.ParameterName = "prLoginID";
                    prLoginIDParameter.Direction = ParameterDirection.Input;
                    prLoginIDParameter.DbType = DbType.Int32;
                    prLoginIDParameter.Precision = 10;
                    prLoginIDParameter.Scale = 0;
                    if (prLoginID.HasValue)
                    {
                        prLoginIDParameter.Value = prLoginID.Value;
                    }
                    else
                    {
                        prLoginIDParameter.Size = -1;
                        prLoginIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prLoginIDParameter);

                    DbParameter prCreatedInParameter = cmd.CreateParameter();
                    prCreatedInParameter.ParameterName = "prCreatedIn";
                    prCreatedInParameter.Direction = ParameterDirection.Input;
                    prCreatedInParameter.DbType = DbType.String;
                    prCreatedInParameter.Size = 50;
                    if (prCreatedIn != null)
                    {
                        prCreatedInParameter.Value = prCreatedIn;
                    }
                    else
                    {
                        prCreatedInParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCreatedInParameter);

                    DbParameter prTockenParameter = cmd.CreateParameter();
                    prTockenParameter.ParameterName = "prTocken";
                    prTockenParameter.Direction = ParameterDirection.Input;
                    prTockenParameter.DbType = DbType.String;
                    prTockenParameter.Size = 250;
                    if (prTocken != null)
                    {
                        prTockenParameter.Value = prTocken;
                    }
                    else
                    {
                        prTockenParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prTockenParameter);

                    DbParameter prPeriodIDParameter = cmd.CreateParameter();
                    prPeriodIDParameter.ParameterName = "prPeriodID";
                    prPeriodIDParameter.Direction = ParameterDirection.Input;
                    prPeriodIDParameter.DbType = DbType.Int32;
                    prPeriodIDParameter.Precision = 10;
                    prPeriodIDParameter.Scale = 0;
                    if (prPeriodID.HasValue)
                    {
                        prPeriodIDParameter.Value = prPeriodID.Value;
                    }
                    else
                    {
                        prPeriodIDParameter.Size = -1;
                        prPeriodIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prPeriodIDParameter);

                    DbParameter prCycleIDParameter = cmd.CreateParameter();
                    prCycleIDParameter.ParameterName = "prCycleID";
                    prCycleIDParameter.Direction = ParameterDirection.Input;
                    prCycleIDParameter.DbType = DbType.Int32;
                    prCycleIDParameter.Precision = 10;
                    prCycleIDParameter.Scale = 0;
                    if (prCycleID.HasValue)
                    {
                        prCycleIDParameter.Value = prCycleID.Value;
                    }
                    else
                    {
                        prCycleIDParameter.Size = -1;
                        prCycleIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCycleIDParameter);

                    DbParameter prCodeErrorParameter = cmd.CreateParameter();
                    prCodeErrorParameter.ParameterName = "prCodeError";
                    prCodeErrorParameter.Direction = ParameterDirection.Output;
                    prCodeErrorParameter.DbType = DbType.Int32;
                    prCodeErrorParameter.Precision = 10;
                    prCodeErrorParameter.Scale = 0;
                    prCodeErrorParameter.Size = -1;
                    prCodeErrorParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prCodeErrorParameter);

                    DbParameter prMessageResultParameter = cmd.CreateParameter();
                    prMessageResultParameter.ParameterName = "prMessageResult";
                    prMessageResultParameter.Direction = ParameterDirection.Output;
                    prMessageResultParameter.DbType = DbType.String;
                    prMessageResultParameter.Size = 250;
                    prMessageResultParameter.Value = DBNull.Value;
                    cmd.Parameters.Add(prMessageResultParameter);
                    await cmd.ExecuteNonQueryAsync();

                    if (cmd.Parameters["prCodeError"].Value != null && !(cmd.Parameters["prCodeError"].Value is System.DBNull))
                        prCodeError = (int)Convert.ChangeType(cmd.Parameters["prCodeError"].Value, typeof(int));
                    else
                        prCodeError = default(int);

                    if (cmd.Parameters["prMessageResult"].Value != null && !(cmd.Parameters["prMessageResult"].Value is System.DBNull))
                        prMessageResult = (string)Convert.ChangeType(cmd.Parameters["prMessageResult"].Value, typeof(string));
                    else
                        prMessageResult = default(string);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return new Tuple<int?, string>(prCodeError, prMessageResult);
        }

        public decimal? FnCalculateExchangeRate (int? prCompanyID, DateTime? prDate, int? prCurrencySourceID, int? prCurrencyTargetID, decimal? prValorToConvert)
        {

            decimal? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_calculate_exchange_rate";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDateParameter = cmd.CreateParameter();
                    prDateParameter.ParameterName = "prDate";
                    prDateParameter.Direction = ParameterDirection.Input;
                    prDateParameter.DbType = DbType.DateTime;
                    if (prDate.HasValue)
                    {
                        prDateParameter.Value = prDate.Value;
                    }
                    else
                    {
                        prDateParameter.Size = -1;
                        prDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateParameter);

                    DbParameter prCurrencySourceIDParameter = cmd.CreateParameter();
                    prCurrencySourceIDParameter.ParameterName = "prCurrencySourceID";
                    prCurrencySourceIDParameter.Direction = ParameterDirection.Input;
                    prCurrencySourceIDParameter.DbType = DbType.Int32;
                    prCurrencySourceIDParameter.Precision = 10;
                    prCurrencySourceIDParameter.Scale = 0;
                    if (prCurrencySourceID.HasValue)
                    {
                        prCurrencySourceIDParameter.Value = prCurrencySourceID.Value;
                    }
                    else
                    {
                        prCurrencySourceIDParameter.Size = -1;
                        prCurrencySourceIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencySourceIDParameter);

                    DbParameter prCurrencyTargetIDParameter = cmd.CreateParameter();
                    prCurrencyTargetIDParameter.ParameterName = "prCurrencyTargetID";
                    prCurrencyTargetIDParameter.Direction = ParameterDirection.Input;
                    prCurrencyTargetIDParameter.DbType = DbType.Int32;
                    prCurrencyTargetIDParameter.Precision = 10;
                    prCurrencyTargetIDParameter.Scale = 0;
                    if (prCurrencyTargetID.HasValue)
                    {
                        prCurrencyTargetIDParameter.Value = prCurrencyTargetID.Value;
                    }
                    else
                    {
                        prCurrencyTargetIDParameter.Size = -1;
                        prCurrencyTargetIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyTargetIDParameter);

                    DbParameter prValorToConvertParameter = cmd.CreateParameter();
                    prValorToConvertParameter.ParameterName = "prValorToConvert";
                    prValorToConvertParameter.Direction = ParameterDirection.Input;
                    prValorToConvertParameter.DbType = DbType.Decimal;
                    prValorToConvertParameter.Precision = 21;
                    prValorToConvertParameter.Scale = 11;
                    if (prValorToConvert.HasValue)
                    {
                        prValorToConvertParameter.Value = prValorToConvert.Value;
                    }
                    else
                    {
                        prValorToConvertParameter.Size = -1;
                        prValorToConvertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prValorToConvertParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Decimal;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (decimal)Convert.ChangeType(returnValueParameter.Value, typeof(decimal));
                    else
                        result = default(decimal?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<decimal?> FnCalculateExchangeRateAsync (int? prCompanyID, DateTime? prDate, int? prCurrencySourceID, int? prCurrencyTargetID, decimal? prValorToConvert)
        {

            decimal? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_calculate_exchange_rate";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prDateParameter = cmd.CreateParameter();
                    prDateParameter.ParameterName = "prDate";
                    prDateParameter.Direction = ParameterDirection.Input;
                    prDateParameter.DbType = DbType.DateTime;
                    if (prDate.HasValue)
                    {
                        prDateParameter.Value = prDate.Value;
                    }
                    else
                    {
                        prDateParameter.Size = -1;
                        prDateParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prDateParameter);

                    DbParameter prCurrencySourceIDParameter = cmd.CreateParameter();
                    prCurrencySourceIDParameter.ParameterName = "prCurrencySourceID";
                    prCurrencySourceIDParameter.Direction = ParameterDirection.Input;
                    prCurrencySourceIDParameter.DbType = DbType.Int32;
                    prCurrencySourceIDParameter.Precision = 10;
                    prCurrencySourceIDParameter.Scale = 0;
                    if (prCurrencySourceID.HasValue)
                    {
                        prCurrencySourceIDParameter.Value = prCurrencySourceID.Value;
                    }
                    else
                    {
                        prCurrencySourceIDParameter.Size = -1;
                        prCurrencySourceIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencySourceIDParameter);

                    DbParameter prCurrencyTargetIDParameter = cmd.CreateParameter();
                    prCurrencyTargetIDParameter.ParameterName = "prCurrencyTargetID";
                    prCurrencyTargetIDParameter.Direction = ParameterDirection.Input;
                    prCurrencyTargetIDParameter.DbType = DbType.Int32;
                    prCurrencyTargetIDParameter.Precision = 10;
                    prCurrencyTargetIDParameter.Scale = 0;
                    if (prCurrencyTargetID.HasValue)
                    {
                        prCurrencyTargetIDParameter.Value = prCurrencyTargetID.Value;
                    }
                    else
                    {
                        prCurrencyTargetIDParameter.Size = -1;
                        prCurrencyTargetIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCurrencyTargetIDParameter);

                    DbParameter prValorToConvertParameter = cmd.CreateParameter();
                    prValorToConvertParameter.ParameterName = "prValorToConvert";
                    prValorToConvertParameter.Direction = ParameterDirection.Input;
                    prValorToConvertParameter.DbType = DbType.Decimal;
                    prValorToConvertParameter.Precision = 21;
                    prValorToConvertParameter.Scale = 11;
                    if (prValorToConvert.HasValue)
                    {
                        prValorToConvertParameter.Value = prValorToConvert.Value;
                    }
                    else
                    {
                        prValorToConvertParameter.Size = -1;
                        prValorToConvertParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prValorToConvertParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Decimal;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (decimal)Convert.ChangeType(returnValueParameter.Value, typeof(decimal));
                    else
                        result = default(decimal?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Obtener el nivel de acceso de un usuario
        /// </summary>
        public int? FnGetAccessReady (int? prCompanyID, int? prUserID, int? prElementID, int? prRowCreatedBy, int? prRowCreatedAt)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_get_access_ready";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prElementIDParameter = cmd.CreateParameter();
                    prElementIDParameter.ParameterName = "prElementID";
                    prElementIDParameter.Direction = ParameterDirection.Input;
                    prElementIDParameter.DbType = DbType.Int32;
                    prElementIDParameter.Precision = 10;
                    prElementIDParameter.Scale = 0;
                    if (prElementID.HasValue)
                    {
                        prElementIDParameter.Value = prElementID.Value;
                    }
                    else
                    {
                        prElementIDParameter.Size = -1;
                        prElementIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prElementIDParameter);

                    DbParameter prRowCreatedByParameter = cmd.CreateParameter();
                    prRowCreatedByParameter.ParameterName = "prRowCreatedBy";
                    prRowCreatedByParameter.Direction = ParameterDirection.Input;
                    prRowCreatedByParameter.DbType = DbType.Int32;
                    prRowCreatedByParameter.Precision = 10;
                    prRowCreatedByParameter.Scale = 0;
                    if (prRowCreatedBy.HasValue)
                    {
                        prRowCreatedByParameter.Value = prRowCreatedBy.Value;
                    }
                    else
                    {
                        prRowCreatedByParameter.Size = -1;
                        prRowCreatedByParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRowCreatedByParameter);

                    DbParameter prRowCreatedAtParameter = cmd.CreateParameter();
                    prRowCreatedAtParameter.ParameterName = "prRowCreatedAt";
                    prRowCreatedAtParameter.Direction = ParameterDirection.Input;
                    prRowCreatedAtParameter.DbType = DbType.Int32;
                    prRowCreatedAtParameter.Precision = 10;
                    prRowCreatedAtParameter.Scale = 0;
                    if (prRowCreatedAt.HasValue)
                    {
                        prRowCreatedAtParameter.Value = prRowCreatedAt.Value;
                    }
                    else
                    {
                        prRowCreatedAtParameter.Size = -1;
                        prRowCreatedAtParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRowCreatedAtParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        /// <summary>
        /// Obtener el nivel de acceso de un usuario
        /// </summary>
        public async Task<int?> FnGetAccessReadyAsync (int? prCompanyID, int? prUserID, int? prElementID, int? prRowCreatedBy, int? prRowCreatedAt)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_get_access_ready";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter prElementIDParameter = cmd.CreateParameter();
                    prElementIDParameter.ParameterName = "prElementID";
                    prElementIDParameter.Direction = ParameterDirection.Input;
                    prElementIDParameter.DbType = DbType.Int32;
                    prElementIDParameter.Precision = 10;
                    prElementIDParameter.Scale = 0;
                    if (prElementID.HasValue)
                    {
                        prElementIDParameter.Value = prElementID.Value;
                    }
                    else
                    {
                        prElementIDParameter.Size = -1;
                        prElementIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prElementIDParameter);

                    DbParameter prRowCreatedByParameter = cmd.CreateParameter();
                    prRowCreatedByParameter.ParameterName = "prRowCreatedBy";
                    prRowCreatedByParameter.Direction = ParameterDirection.Input;
                    prRowCreatedByParameter.DbType = DbType.Int32;
                    prRowCreatedByParameter.Precision = 10;
                    prRowCreatedByParameter.Scale = 0;
                    if (prRowCreatedBy.HasValue)
                    {
                        prRowCreatedByParameter.Value = prRowCreatedBy.Value;
                    }
                    else
                    {
                        prRowCreatedByParameter.Size = -1;
                        prRowCreatedByParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRowCreatedByParameter);

                    DbParameter prRowCreatedAtParameter = cmd.CreateParameter();
                    prRowCreatedAtParameter.ParameterName = "prRowCreatedAt";
                    prRowCreatedAtParameter.Direction = ParameterDirection.Input;
                    prRowCreatedAtParameter.DbType = DbType.Int32;
                    prRowCreatedAtParameter.Precision = 10;
                    prRowCreatedAtParameter.Scale = 0;
                    if (prRowCreatedAt.HasValue)
                    {
                        prRowCreatedAtParameter.Value = prRowCreatedAt.Value;
                    }
                    else
                    {
                        prRowCreatedAtParameter.Size = -1;
                        prRowCreatedAtParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prRowCreatedAtParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public int? FnGetProviderId (int? prCompanyID, int? prUserID)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                connection.Open();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_get_provider_id";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    cmd.ExecuteNonQuery();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        public async Task<int?> FnGetProviderIdAsync (int? prCompanyID, int? prUserID)
        {

            int? result;
            DbConnection connection = this.Database.GetDbConnection();
            bool needClose = false;
            if (connection.State != ConnectionState.Open)
            {
                await connection.OpenAsync();
                needClose = true;
            }

            try
            {
                using (DbCommand cmd = connection.CreateCommand())
                {
                    if (this.Database.GetCommandTimeout().HasValue)
                        cmd.CommandTimeout = this.Database.GetCommandTimeout().Value;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = @"posme.fn_get_provider_id";

                    DbParameter prCompanyIDParameter = cmd.CreateParameter();
                    prCompanyIDParameter.ParameterName = "prCompanyID";
                    prCompanyIDParameter.Direction = ParameterDirection.Input;
                    prCompanyIDParameter.DbType = DbType.Int32;
                    prCompanyIDParameter.Precision = 10;
                    prCompanyIDParameter.Scale = 0;
                    if (prCompanyID.HasValue)
                    {
                        prCompanyIDParameter.Value = prCompanyID.Value;
                    }
                    else
                    {
                        prCompanyIDParameter.Size = -1;
                        prCompanyIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prCompanyIDParameter);

                    DbParameter prUserIDParameter = cmd.CreateParameter();
                    prUserIDParameter.ParameterName = "prUserID";
                    prUserIDParameter.Direction = ParameterDirection.Input;
                    prUserIDParameter.DbType = DbType.Int32;
                    prUserIDParameter.Precision = 10;
                    prUserIDParameter.Scale = 0;
                    if (prUserID.HasValue)
                    {
                        prUserIDParameter.Value = prUserID.Value;
                    }
                    else
                    {
                        prUserIDParameter.Size = -1;
                        prUserIDParameter.Value = DBNull.Value;
                    }
                    cmd.Parameters.Add(prUserIDParameter);

                    DbParameter returnValueParameter = cmd.CreateParameter();
                    returnValueParameter.Direction = ParameterDirection.ReturnValue;
                    returnValueParameter.DbType = DbType.Int32;
                    returnValueParameter.Size = -1;
                    cmd.Parameters.Add(returnValueParameter);
                    await cmd.ExecuteNonQueryAsync();
                    if (returnValueParameter.Value != null && !(returnValueParameter.Value is System.DBNull))
                        result = (int)Convert.ChangeType(returnValueParameter.Value, typeof(int));
                    else
                        result = default(int?);
                }
            }
            finally
            {
                if (needClose)
                    connection.Close();
            }
            return result;
        }

        #endregion

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.TbAccountMapping(modelBuilder);
            this.CustomizeTbAccountMapping(modelBuilder);

            this.TbAccountingBalanceMapping(modelBuilder);
            this.CustomizeTbAccountingBalanceMapping(modelBuilder);

            this.TbAccountingBalanceTempMapping(modelBuilder);
            this.CustomizeTbAccountingBalanceTempMapping(modelBuilder);

            this.TbAccountingCycleMapping(modelBuilder);
            this.CustomizeTbAccountingCycleMapping(modelBuilder);

            this.TbAccountingPeriodMapping(modelBuilder);
            this.CustomizeTbAccountingPeriodMapping(modelBuilder);

            this.TbAccountLevelMapping(modelBuilder);
            this.CustomizeTbAccountLevelMapping(modelBuilder);

            this.TbAccountTmpMapping(modelBuilder);
            this.CustomizeTbAccountTmpMapping(modelBuilder);

            this.TbAccountTypeMapping(modelBuilder);
            this.CustomizeTbAccountTypeMapping(modelBuilder);

            this.TbBankMapping(modelBuilder);
            this.CustomizeTbBankMapping(modelBuilder);

            this.TbBibliaMapping(modelBuilder);
            this.CustomizeTbBibliaMapping(modelBuilder);

            this.TbBranchMapping(modelBuilder);
            this.CustomizeTbBranchMapping(modelBuilder);

            this.TbCallerMapping(modelBuilder);
            this.CustomizeTbCallerMapping(modelBuilder);

            this.TbCashBoxMapping(modelBuilder);
            this.CustomizeTbCashBoxMapping(modelBuilder);

            this.TbCashBoxSessionMapping(modelBuilder);
            this.CustomizeTbCashBoxSessionMapping(modelBuilder);

            this.TbCashBoxSessionTransactionMasterMapping(modelBuilder);
            this.CustomizeTbCashBoxSessionTransactionMasterMapping(modelBuilder);

            this.TbCashBoxUserMapping(modelBuilder);
            this.CustomizeTbCashBoxUserMapping(modelBuilder);

            this.TbCatalogMapping(modelBuilder);
            this.CustomizeTbCatalogMapping(modelBuilder);

            this.TbCatalogItemMapping(modelBuilder);
            this.CustomizeTbCatalogItemMapping(modelBuilder);

            this.TbCatalogItemConvertionMapping(modelBuilder);
            this.CustomizeTbCatalogItemConvertionMapping(modelBuilder);

            this.TbCenterCostMapping(modelBuilder);
            this.CustomizeTbCenterCostMapping(modelBuilder);

            this.TbCompanyMapping(modelBuilder);
            this.CustomizeTbCompanyMapping(modelBuilder);

            this.TbCompanyComponentMapping(modelBuilder);
            this.CustomizeTbCompanyComponentMapping(modelBuilder);

            this.TbCompanyComponentConceptMapping(modelBuilder);
            this.CustomizeTbCompanyComponentConceptMapping(modelBuilder);

            this.TbCompanyComponentFlavorMapping(modelBuilder);
            this.CustomizeTbCompanyComponentFlavorMapping(modelBuilder);

            this.TbCompanyComponentItemDataviewMapping(modelBuilder);
            this.CustomizeTbCompanyComponentItemDataviewMapping(modelBuilder);

            this.TbCompanyCurrencyMapping(modelBuilder);
            this.CustomizeTbCompanyCurrencyMapping(modelBuilder);

            this.TbCompanyDataviewMapping(modelBuilder);
            this.CustomizeTbCompanyDataviewMapping(modelBuilder);

            this.TbCompanyDefaultDataviewMapping(modelBuilder);
            this.CustomizeTbCompanyDefaultDataviewMapping(modelBuilder);

            this.TbCompanyParameterMapping(modelBuilder);
            this.CustomizeTbCompanyParameterMapping(modelBuilder);

            this.TbCompanySubelementAuditMapping(modelBuilder);
            this.CustomizeTbCompanySubelementAuditMapping(modelBuilder);

            this.TbCompanySubelementObligatoryMapping(modelBuilder);
            this.CustomizeTbCompanySubelementObligatoryMapping(modelBuilder);

            this.TbComponentMapping(modelBuilder);
            this.CustomizeTbComponentMapping(modelBuilder);

            this.TbComponentAuditMapping(modelBuilder);
            this.CustomizeTbComponentAuditMapping(modelBuilder);

            this.TbComponentAuditDetailMapping(modelBuilder);
            this.CustomizeTbComponentAuditDetailMapping(modelBuilder);

            this.TbComponentAutorizationMapping(modelBuilder);
            this.CustomizeTbComponentAutorizationMapping(modelBuilder);

            this.TbComponentAutorizationDetailMapping(modelBuilder);
            this.CustomizeTbComponentAutorizationDetailMapping(modelBuilder);

            this.TbComponentElementMapping(modelBuilder);
            this.CustomizeTbComponentElementMapping(modelBuilder);

            this.TbCounterMapping(modelBuilder);
            this.CustomizeTbCounterMapping(modelBuilder);

            this.TbCreditLineMapping(modelBuilder);
            this.CustomizeTbCreditLineMapping(modelBuilder);

            this.TbCurrencyMapping(modelBuilder);
            this.CustomizeTbCurrencyMapping(modelBuilder);

            this.TbCustomerMapping(modelBuilder);
            this.CustomizeTbCustomerMapping(modelBuilder);

            this.TbCustomerConsultasSinRiesgoMapping(modelBuilder);
            this.CustomizeTbCustomerConsultasSinRiesgoMapping(modelBuilder);

            this.TbCustomerCreditMapping(modelBuilder);
            this.CustomizeTbCustomerCreditMapping(modelBuilder);

            this.TbCustomerCreditAmoritizationMapping(modelBuilder);
            this.CustomizeTbCustomerCreditAmoritizationMapping(modelBuilder);

            this.TbCustomerCreditClasificationMapping(modelBuilder);
            this.CustomizeTbCustomerCreditClasificationMapping(modelBuilder);

            this.TbCustomerCreditDocumentMapping(modelBuilder);
            this.CustomizeTbCustomerCreditDocumentMapping(modelBuilder);

            this.TbCustomerCreditDocumentEntityRelatedMapping(modelBuilder);
            this.CustomizeTbCustomerCreditDocumentEntityRelatedMapping(modelBuilder);

            this.TbCustomerCreditExternalSharonMapping(modelBuilder);
            this.CustomizeTbCustomerCreditExternalSharonMapping(modelBuilder);

            this.TbCustomerCreditExternalSharonTmpMapping(modelBuilder);
            this.CustomizeTbCustomerCreditExternalSharonTmpMapping(modelBuilder);

            this.TbCustomerCreditLineMapping(modelBuilder);
            this.CustomizeTbCustomerCreditLineMapping(modelBuilder);

            this.TbCustomerFrecuencyActuationMapping(modelBuilder);
            this.CustomizeTbCustomerFrecuencyActuationMapping(modelBuilder);

            this.TbCustomerPaymentMethodMapping(modelBuilder);
            this.CustomizeTbCustomerPaymentMethodMapping(modelBuilder);

            this.TbDataviewMapping(modelBuilder);
            this.CustomizeTbDataviewMapping(modelBuilder);

            this.TbElementMapping(modelBuilder);
            this.CustomizeTbElementMapping(modelBuilder);

            this.TbElementTypeMapping(modelBuilder);
            this.CustomizeTbElementTypeMapping(modelBuilder);

            this.TbEmployeeMapping(modelBuilder);
            this.CustomizeTbEmployeeMapping(modelBuilder);

            this.TbEmployeeCalendarPayMapping(modelBuilder);
            this.CustomizeTbEmployeeCalendarPayMapping(modelBuilder);

            this.TbEmployeeCalendarPayDetailMapping(modelBuilder);
            this.CustomizeTbEmployeeCalendarPayDetailMapping(modelBuilder);

            this.TbEntityMapping(modelBuilder);
            this.CustomizeTbEntityMapping(modelBuilder);

            this.TbEntityAccountMapping(modelBuilder);
            this.CustomizeTbEntityAccountMapping(modelBuilder);

            this.TbEntityEmailMapping(modelBuilder);
            this.CustomizeTbEntityEmailMapping(modelBuilder);

            this.TbEntityPhoneMapping(modelBuilder);
            this.CustomizeTbEntityPhoneMapping(modelBuilder);

            this.TbErrorMapping(modelBuilder);
            this.CustomizeTbErrorMapping(modelBuilder);

            this.TbEstadisticaCategoriaMapping(modelBuilder);
            this.CustomizeTbEstadisticaCategoriaMapping(modelBuilder);

            this.TbEstadisticaClaseMapping(modelBuilder);
            this.CustomizeTbEstadisticaClaseMapping(modelBuilder);

            this.TbExchangeRateMapping(modelBuilder);
            this.CustomizeTbExchangeRateMapping(modelBuilder);

            this.TbFixedAssentMapping(modelBuilder);
            this.CustomizeTbFixedAssentMapping(modelBuilder);

            this.TbIndicatorMapping(modelBuilder);
            this.CustomizeTbIndicatorMapping(modelBuilder);

            this.TbIndicatorHistoryMapping(modelBuilder);
            this.CustomizeTbIndicatorHistoryMapping(modelBuilder);

            this.TbIndicatorTmpMapping(modelBuilder);
            this.CustomizeTbIndicatorTmpMapping(modelBuilder);

            this.TbItemMapping(modelBuilder);
            this.CustomizeTbItemMapping(modelBuilder);

            this.TbItemCategoryMapping(modelBuilder);
            this.CustomizeTbItemCategoryMapping(modelBuilder);

            this.TbItemConfigLotoMapping(modelBuilder);
            this.CustomizeTbItemConfigLotoMapping(modelBuilder);

            this.TbItemDataSheetMapping(modelBuilder);
            this.CustomizeTbItemDataSheetMapping(modelBuilder);

            this.TbItemDataSheetDetailMapping(modelBuilder);
            this.CustomizeTbItemDataSheetDetailMapping(modelBuilder);

            this.TbItemImportMapping(modelBuilder);
            this.CustomizeTbItemImportMapping(modelBuilder);

            this.TbItemSkuMapping(modelBuilder);
            this.CustomizeTbItemSkuMapping(modelBuilder);

            this.TbItemWarehouseMapping(modelBuilder);
            this.CustomizeTbItemWarehouseMapping(modelBuilder);

            this.TbItemWarehouseExpiredMapping(modelBuilder);
            this.CustomizeTbItemWarehouseExpiredMapping(modelBuilder);

            this.TbJournalEntryMapping(modelBuilder);
            this.CustomizeTbJournalEntryMapping(modelBuilder);

            this.TbJournalEntryDetailMapping(modelBuilder);
            this.CustomizeTbJournalEntryDetailMapping(modelBuilder);

            this.TbJournalEntryDetailSummaryMapping(modelBuilder);
            this.CustomizeTbJournalEntryDetailSummaryMapping(modelBuilder);

            this.TbKardexMapping(modelBuilder);
            this.CustomizeTbKardexMapping(modelBuilder);

            this.TbLegalMapping(modelBuilder);
            this.CustomizeTbLegalMapping(modelBuilder);

            this.TbListPriceMapping(modelBuilder);
            this.CustomizeTbListPriceMapping(modelBuilder);

            this.TbLogMapping(modelBuilder);
            this.CustomizeTbLogMapping(modelBuilder);

            this.TbLogMessegerMapping(modelBuilder);
            this.CustomizeTbLogMessegerMapping(modelBuilder);

            this.TbLogSessionMapping(modelBuilder);
            this.CustomizeTbLogSessionMapping(modelBuilder);

            this.TbMasterKardexTempMapping(modelBuilder);
            this.CustomizeTbMasterKardexTempMapping(modelBuilder);

            this.TbMembershipMapping(modelBuilder);
            this.CustomizeTbMembershipMapping(modelBuilder);

            this.TbMenuElementMapping(modelBuilder);
            this.CustomizeTbMenuElementMapping(modelBuilder);

            this.TbNaturaleMapping(modelBuilder);
            this.CustomizeTbNaturaleMapping(modelBuilder);

            this.TbNotificationMapping(modelBuilder);
            this.CustomizeTbNotificationMapping(modelBuilder);

            this.TbParameterMapping(modelBuilder);
            this.CustomizeTbParameterMapping(modelBuilder);

            this.TbPriceMapping(modelBuilder);
            this.CustomizeTbPriceMapping(modelBuilder);

            this.TbProviderMapping(modelBuilder);
            this.CustomizeTbProviderMapping(modelBuilder);

            this.TbProviderItemMapping(modelBuilder);
            this.CustomizeTbProviderItemMapping(modelBuilder);

            this.TbPublicCatalogMapping(modelBuilder);
            this.CustomizeTbPublicCatalogMapping(modelBuilder);

            this.TbPublicCatalogDetailMapping(modelBuilder);
            this.CustomizeTbPublicCatalogDetailMapping(modelBuilder);

            this.TbRazonesFinancierasTmpMapping(modelBuilder);
            this.CustomizeTbRazonesFinancierasTmpMapping(modelBuilder);

            this.TbRelationshipMapping(modelBuilder);
            this.CustomizeTbRelationshipMapping(modelBuilder);

            this.TbRememberMapping(modelBuilder);
            this.CustomizeTbRememberMapping(modelBuilder);

            this.TbRoleMapping(modelBuilder);
            this.CustomizeTbRoleMapping(modelBuilder);

            this.TbRoleAutorizationMapping(modelBuilder);
            this.CustomizeTbRoleAutorizationMapping(modelBuilder);

            this.TbSubelementMapping(modelBuilder);
            this.CustomizeTbSubelementMapping(modelBuilder);

            this.TbTagMapping(modelBuilder);
            this.CustomizeTbTagMapping(modelBuilder);

            this.TbTransactionMapping(modelBuilder);
            this.CustomizeTbTransactionMapping(modelBuilder);

            this.TbTransactionCausalMapping(modelBuilder);
            this.CustomizeTbTransactionCausalMapping(modelBuilder);

            this.TbTransactionConceptMapping(modelBuilder);
            this.CustomizeTbTransactionConceptMapping(modelBuilder);

            this.TbTransactionMasterMapping(modelBuilder);
            this.CustomizeTbTransactionMasterMapping(modelBuilder);

            this.TbTransactionMasterConceptMapping(modelBuilder);
            this.CustomizeTbTransactionMasterConceptMapping(modelBuilder);

            this.TbTransactionMasterDenominationMapping(modelBuilder);
            this.CustomizeTbTransactionMasterDenominationMapping(modelBuilder);

            this.TbTransactionMasterDetailMapping(modelBuilder);
            this.CustomizeTbTransactionMasterDetailMapping(modelBuilder);

            this.TbTransactionMasterDetailCreditMapping(modelBuilder);
            this.CustomizeTbTransactionMasterDetailCreditMapping(modelBuilder);

            this.TbTransactionMasterDetailTempMapping(modelBuilder);
            this.CustomizeTbTransactionMasterDetailTempMapping(modelBuilder);

            this.TbTransactionMasterInfoMapping(modelBuilder);
            this.CustomizeTbTransactionMasterInfoMapping(modelBuilder);

            this.TbTransactionMasterPurchaseMapping(modelBuilder);
            this.CustomizeTbTransactionMasterPurchaseMapping(modelBuilder);

            this.TbTransactionMasterReferenceMapping(modelBuilder);
            this.CustomizeTbTransactionMasterReferenceMapping(modelBuilder);

            this.TbTransactionMasterSummaryConceptTmpMapping(modelBuilder);
            this.CustomizeTbTransactionMasterSummaryConceptTmpMapping(modelBuilder);

            this.TbTransactionProfileDetailMapping(modelBuilder);
            this.CustomizeTbTransactionProfileDetailMapping(modelBuilder);

            this.TbTransactionProfileDetailTmpMapping(modelBuilder);
            this.CustomizeTbTransactionProfileDetailTmpMapping(modelBuilder);

            this.TbTypeMenuElementMapping(modelBuilder);
            this.CustomizeTbTypeMenuElementMapping(modelBuilder);

            this.TbUserMapping(modelBuilder);
            this.CustomizeTbUserMapping(modelBuilder);

            this.TbUserPermissionMapping(modelBuilder);
            this.CustomizeTbUserPermissionMapping(modelBuilder);

            this.TbUserTagMapping(modelBuilder);
            this.CustomizeTbUserTagMapping(modelBuilder);

            this.TbUserWarehouseMapping(modelBuilder);
            this.CustomizeTbUserWarehouseMapping(modelBuilder);

            this.TbWarehouseMapping(modelBuilder);
            this.CustomizeTbWarehouseMapping(modelBuilder);

            this.TbWorkflowMapping(modelBuilder);
            this.CustomizeTbWorkflowMapping(modelBuilder);

            this.TbWorkflowStageMapping(modelBuilder);
            this.CustomizeTbWorkflowStageMapping(modelBuilder);

            this.TbWorkflowStageChangeLogMapping(modelBuilder);
            this.CustomizeTbWorkflowStageChangeLogMapping(modelBuilder);

            this.TbWorkflowStageRelationMapping(modelBuilder);
            this.CustomizeTbWorkflowStageRelationMapping(modelBuilder);

            this.VwContabilidadComprobanteMapping(modelBuilder);
            this.CustomizeVwContabilidadComprobanteMapping(modelBuilder);

            this.VwCxcCustomerListRealEstateMapping(modelBuilder);
            this.CustomizeVwCxcCustomerListRealEstateMapping(modelBuilder);

            this.VwGerenciaBalanceMapping(modelBuilder);
            this.CustomizeVwGerenciaBalanceMapping(modelBuilder);

            this.VwGerenciaCustomerMapping(modelBuilder);
            this.CustomizeVwGerenciaCustomerMapping(modelBuilder);

            this.VwGerenciaDesembolsosDetalleMapping(modelBuilder);
            this.CustomizeVwGerenciaDesembolsosDetalleMapping(modelBuilder);

            this.VwGerenciaDesembolsosResumanMapping(modelBuilder);
            this.CustomizeVwGerenciaDesembolsosResumanMapping(modelBuilder);

            this.VwGerenciaEstadoResultado001Mapping(modelBuilder);
            this.CustomizeVwGerenciaEstadoResultado001Mapping(modelBuilder);

            this.VwGerenciaEstadoResultado002Mapping(modelBuilder);
            this.CustomizeVwGerenciaEstadoResultado002Mapping(modelBuilder);

            this.VwInventoryListItemRealEstateMapping(modelBuilder);
            this.CustomizeVwInventoryListItemRealEstateMapping(modelBuilder);

            this.VwSalesInventoryMapping(modelBuilder);
            this.CustomizeVwSalesInventoryMapping(modelBuilder);

            this.VwSinRiesgoReporteClienteMapping(modelBuilder);
            this.CustomizeVwSinRiesgoReporteClienteMapping(modelBuilder);

            this.VwSinRiesgoReporteCreditoMapping(modelBuilder);
            this.CustomizeVwSinRiesgoReporteCreditoMapping(modelBuilder);

            this.VwSinRiesgoReporteCreditosToSystemaMapping(modelBuilder);
            this.CustomizeVwSinRiesgoReporteCreditosToSystemaMapping(modelBuilder);

            this.VwTransaccionMasterConcept232425Mapping(modelBuilder);
            this.CustomizeVwTransaccionMasterConcept232425Mapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region TbAccount Mapping

        private void TbAccountMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccount>().ToTable(@"tb_account", @"posme");
            modelBuilder.Entity<TbAccount>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccount>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.AccountTypeID).HasColumnName(@"accountTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.AccountLevelID).HasColumnName(@"accountLevelID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.ParentAccountID).HasColumnName(@"parentAccountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.AccountNumber).HasColumnName(@"accountNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccount>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccount>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.IsOperative).HasColumnName(@"isOperative").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccount>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccount>().HasKey(@"AccountID");
        }

        partial void CustomizeTbAccountMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountingBalance Mapping

        private void TbAccountingBalanceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountingBalance>().ToTable(@"tb_accounting_balance", @"posme");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.AccountBalanceID).HasColumnName(@"accountBalanceID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.ComponentCycleID).HasColumnName(@"componentCycleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.ComponentPeriodID).HasColumnName(@"componentPeriodID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingBalance>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalance>().HasKey(@"AccountBalanceID");
        }

        partial void CustomizeTbAccountingBalanceMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountingBalanceTemp Mapping

        private void TbAccountingBalanceTempMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountingBalanceTemp>().ToTable(@"tb_accounting_balance_temp", @"posme");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.AccountingBalanceTempID).HasColumnName(@"accountingBalanceTempID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.Tocken).HasColumnName(@"tocken").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.ParentAccountID).HasColumnName(@"parentAccountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.AccountNumber).HasColumnName(@"accountNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.IsOperative).HasColumnName(@"isOperative").HasColumnType(@"bit").IsRequired().ValueGeneratedOnAdd().HasPrecision(18).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.AccountTypeID).HasColumnName(@"accountTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.Naturaleza).HasColumnName(@"naturaleza").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(1).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.BalanceStart).HasColumnName(@"balanceStart").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalanceTemp>().Property(x => x.BalanceEnd).HasColumnName(@"balanceEnd").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbAccountingBalanceTemp>().HasKey(@"AccountingBalanceTempID");
        }

        partial void CustomizeTbAccountingBalanceTempMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountingCycle Mapping

        private void TbAccountingCycleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountingCycle>().ToTable(@"tb_accounting_cycle", @"posme");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.ComponentCycleID).HasColumnName(@"componentCycleID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.ComponentPeriodID).HasColumnName(@"componentPeriodID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingCycle>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingCycle>().HasKey(@"ComponentCycleID");
        }

        partial void CustomizeTbAccountingCycleMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountingPeriod Mapping

        private void TbAccountingPeriodMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountingPeriod>().ToTable(@"tb_accounting_period", @"posme");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.ComponentPeriodID).HasColumnName(@"componentPeriodID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingPeriod>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountingPeriod>().HasKey(@"ComponentPeriodID");
        }

        partial void CustomizeTbAccountingPeriodMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountLevel Mapping

        private void TbAccountLevelMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountLevel>().ToTable(@"tb_account_level", @"posme");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.AccountLevelID).HasColumnName(@"accountLevelID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.LengthTotal).HasColumnName(@"lengthTotal").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.Split).HasColumnName(@"split").HasColumnType(@"char").ValueGeneratedOnAdd().HasMaxLength(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.LengthGroup).HasColumnName(@"lengthGroup").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.IsOperative).HasColumnName(@"isOperative").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountLevel>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountLevel>().HasKey(@"AccountLevelID");
        }

        partial void CustomizeTbAccountLevelMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountTmp Mapping

        private void TbAccountTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountTmp>().ToTable(@"tb_account_tmp", @"posme");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.AccountParentID).HasColumnName(@"accountParentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.N1).HasColumnName(@"n1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.N2).HasColumnName(@"n2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.N3).HasColumnName(@"n3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.N4).HasColumnName(@"n4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.N5).HasColumnName(@"n5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.Nivel).HasColumnName(@"nivel").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.Operative).HasColumnName(@"operative").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(30, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountTmp>().HasKey(@"AccountID");
        }

        partial void CustomizeTbAccountTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbAccountType Mapping

        private void TbAccountTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbAccountType>().ToTable(@"tb_account_type", @"posme");
            modelBuilder.Entity<TbAccountType>().Property(x => x.AccountTypeID).HasColumnName(@"accountTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbAccountType>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountType>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(350).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountType>().Property(x => x.Naturaleza).HasColumnName(@"naturaleza").HasColumnType(@"char").IsRequired().ValueGeneratedNever().HasMaxLength(1).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountType>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountType>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbAccountType>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountType>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbAccountType>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbAccountType>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbAccountType>().HasKey(@"AccountTypeID");
        }

        partial void CustomizeTbAccountTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbBank Mapping

        private void TbBankMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbBank>().ToTable(@"tb_bank", @"posme");
            modelBuilder.Entity<TbBank>().Property(x => x.BankID).HasColumnName(@"bankID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbBank>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBank>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBank>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBank>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBank>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbBank>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbBank>().HasKey(@"BankID");
        }

        partial void CustomizeTbBankMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbBiblia Mapping

        private void TbBibliaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbBiblia>().ToTable(@"tb_biblia", @"posme");
            modelBuilder.Entity<TbBiblia>().Property(x => x.VersiculoID).HasColumnName(@"versiculoID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbBiblia>().Property(x => x.Orden).HasColumnName(@"orden").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBiblia>().Property(x => x.Dia).HasColumnName(@"dia").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBiblia>().Property(x => x.Capitulo).HasColumnName(@"capitulo").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBiblia>().Property(x => x.Libro).HasColumnName(@"libro").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255).HasDefaultValueSql(@"'N'");
            modelBuilder.Entity<TbBiblia>().Property(x => x.Versiculo).HasColumnName(@"versiculo").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBiblia>().HasKey(@"VersiculoID");
        }

        partial void CustomizeTbBibliaMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbBranch Mapping

        private void TbBranchMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbBranch>().ToTable(@"tb_branch", @"posme");
            modelBuilder.Entity<TbBranch>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbBranch>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbBranch>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbBranch>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBranch>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbBranch>().HasKey(@"BranchID");
        }

        partial void CustomizeTbBranchMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCaller Mapping

        private void TbCallerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCaller>().ToTable(@"tb_caller", @"posme");
            modelBuilder.Entity<TbCaller>().Property(x => x.CallerID).HasColumnName(@"callerID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCaller>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCaller>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCaller>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCaller>().HasKey(@"CallerID");
        }

        partial void CustomizeTbCallerMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCashBox Mapping

        private void TbCashBoxMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCashBox>().ToTable(@"tb_cash_box", @"posme");
            modelBuilder.Entity<TbCashBox>().Property(x => x.CashBoxID).HasColumnName(@"cashBoxID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCashBox>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBox>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBox>().Property(x => x.CashBoxCode).HasColumnName(@"cashBoxCode").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(10).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCashBox>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCashBox>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(550).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCashBox>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBox>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCashBox>().HasKey(@"CashBoxID");
        }

        partial void CustomizeTbCashBoxMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCashBoxSession Mapping

        private void TbCashBoxSessionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCashBoxSession>().ToTable(@"tb_cash_box_session", @"posme");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.CashBoxSessionID).HasColumnName(@"cashBoxSessionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.CashBoxID).HasColumnName(@"cashBoxID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCashBoxSession>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCashBoxSession>().HasKey(@"CashBoxSessionID");
        }

        partial void CustomizeTbCashBoxSessionMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCashBoxSessionTransactionMaster Mapping

        private void TbCashBoxSessionTransactionMasterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().ToTable(@"tb_cash_box_session_transaction_master", @"posme");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.CashBoxSessionTransactionMasterID).HasColumnName(@"cashBoxSessionTransactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.CashBoxID).HasColumnName(@"cashBoxID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.CashBoxSessionID).HasColumnName(@"cashBoxSessionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxSessionTransactionMaster>().HasKey(@"CashBoxSessionTransactionMasterID");
        }

        partial void CustomizeTbCashBoxSessionTransactionMasterMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCashBoxUser Mapping

        private void TbCashBoxUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCashBoxUser>().ToTable(@"tb_cash_box_user", @"posme");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.CashBoxUserID).HasColumnName(@"cashBoxUserID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.CashBoxID).HasColumnName(@"cashBoxID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().Property(x => x.TypeID).HasColumnName(@"typeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCashBoxUser>().HasKey(@"CashBoxUserID");
        }

        partial void CustomizeTbCashBoxUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCatalog Mapping

        private void TbCatalogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCatalog>().ToTable(@"tb_catalog", @"posme");
            modelBuilder.Entity<TbCatalog>().Property(x => x.CatalogID).HasColumnName(@"catalogID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCatalog>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalog>().Property(x => x.Orden).HasColumnName(@"orden").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalog>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalog>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalog>().Property(x => x.PublicCatalogSystemName).HasColumnName(@"publicCatalogSystemName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalog>().HasKey(@"CatalogID");
        }

        partial void CustomizeTbCatalogMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCatalogItem Mapping

        private void TbCatalogItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCatalogItem>().ToTable(@"tb_catalog_item", @"posme");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.CatalogItemID).HasColumnName(@"catalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.CatalogID).HasColumnName(@"catalogID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Sequence).HasColumnName(@"sequence").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.ParentCatalogID).HasColumnName(@"parentCatalogID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.ParentCatalogItemID).HasColumnName(@"parentCatalogItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Ratio).HasColumnName(@"ratio").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"1.00000000");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItem>().HasKey(@"CatalogItemID");
        }

        partial void CustomizeTbCatalogItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCatalogItemConvertion Mapping

        private void TbCatalogItemConvertionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCatalogItemConvertion>().ToTable(@"tb_catalog_item_convertion", @"posme");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.CatalogItemConvertionID).HasColumnName(@"catalogItemConvertionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.CatalogID).HasColumnName(@"catalogID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.CatalogItemID).HasColumnName(@"catalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.TargetCatalogItemID).HasColumnName(@"targetCatalogItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.Ratio).HasColumnName(@"ratio").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.RegisterDate).HasColumnName(@"registerDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItemConvertion>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCatalogItemConvertion>().HasKey(@"CatalogItemConvertionID");
        }

        partial void CustomizeTbCatalogItemConvertionMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCenterCost Mapping

        private void TbCenterCostMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCenterCost>().ToTable(@"tb_center_cost", @"posme");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCenterCost>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.AccountLevelID).HasColumnName(@"accountLevelID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.ParentAccountID).HasColumnName(@"parentAccountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.ParentClassID).HasColumnName(@"parentClassID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCenterCost>().HasKey(@"ClassID");
        }

        partial void CustomizeTbCenterCostMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompany Mapping

        private void TbCompanyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompany>().ToTable(@"tb_company", @"posme");
            modelBuilder.Entity<TbCompany>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompany>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbCompany>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(550).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbCompany>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompany>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbCompany>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompany>().Property(x => x.Type).HasColumnName(@"type").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255).HasDefaultValueSql(@"''");
            modelBuilder.Entity<TbCompany>().HasKey(@"CompanyID");
        }

        partial void CustomizeTbCompanyMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyComponent Mapping

        private void TbCompanyComponentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyComponent>().ToTable(@"tb_company_component", @"posme");
            modelBuilder.Entity<TbCompanyComponent>().Property(x => x.CompanyComponentID).HasColumnName(@"companyComponentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyComponent>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponent>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponent>().HasKey(@"CompanyComponentID");
        }

        partial void CustomizeTbCompanyComponentMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyComponentConcept Mapping

        private void TbCompanyComponentConceptMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyComponentConcept>().ToTable(@"tb_company_component_concept", @"posme");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.CompanyComponentConceptID).HasColumnName(@"companyComponentConceptID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.ValueIn).HasColumnName(@"valueIn").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentConcept>().Property(x => x.ValueOut).HasColumnName(@"valueOut").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyComponentConcept>().HasKey(@"CompanyComponentConceptID");
        }

        partial void CustomizeTbCompanyComponentConceptMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyComponentFlavor Mapping

        private void TbCompanyComponentFlavorMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyComponentFlavor>().ToTable(@"tb_company_component_flavor", @"posme");
            modelBuilder.Entity<TbCompanyComponentFlavor>().Property(x => x.CompanyComponentFlavorID).HasColumnName(@"companyComponentFlavorID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyComponentFlavor>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentFlavor>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentFlavor>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentFlavor>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyComponentFlavor>().HasKey(@"CompanyComponentFlavorID");
        }

        partial void CustomizeTbCompanyComponentFlavorMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyComponentItemDataview Mapping

        private void TbCompanyComponentItemDataviewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyComponentItemDataview>().ToTable(@"tb_company_component_item_dataview", @"posme");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.CompanyComponentItemDataviewID).HasColumnName(@"companyComponentItemDataviewID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.DataViewID).HasColumnName(@"dataViewID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.CallerID).HasColumnName(@"callerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyComponentItemDataview>().HasKey(@"CompanyComponentItemDataviewID");
        }

        partial void CustomizeTbCompanyComponentItemDataviewMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyCurrency Mapping

        private void TbCompanyCurrencyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyCurrency>().ToTable(@"tb_company_currency", @"posme");
            modelBuilder.Entity<TbCompanyCurrency>().Property(x => x.CompanyCurrencyID).HasColumnName(@"companyCurrencyID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyCurrency>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyCurrency>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyCurrency>().Property(x => x.Simb).HasColumnName(@"simb").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(5).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyCurrency>().HasKey(@"CompanyCurrencyID");
        }

        partial void CustomizeTbCompanyCurrencyMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyDataview Mapping

        private void TbCompanyDataviewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyDataview>().ToTable(@"tb_company_dataview", @"posme");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.CompanyDataViewID).HasColumnName(@"companyDataViewID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.DataViewID).HasColumnName(@"dataViewID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.CallerID).HasColumnName(@"callerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.SqlScript).HasColumnName(@"sqlScript").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(5000).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.VisibleColumns).HasColumnName(@"visibleColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.NonVisibleColumns).HasColumnName(@"nonVisibleColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.SummaryColumns).HasColumnName(@"summaryColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.FormatColumns).HasColumnName(@"formatColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDataview>().Property(x => x.FormatColumnsHeader).HasColumnName(@"formatColumnsHeader").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDataview>().HasKey(@"CompanyDataViewID");
        }

        partial void CustomizeTbCompanyDataviewMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyDefaultDataview Mapping

        private void TbCompanyDefaultDataviewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyDefaultDataview>().ToTable(@"tb_company_default_dataview", @"posme");
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.CompanyDefaultDataviewID).HasColumnName(@"companyDefaultDataviewID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.DataViewID).HasColumnName(@"dataViewID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.CallerID).HasColumnName(@"callerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyDefaultDataview>().Property(x => x.TargetComponentID).HasColumnName(@"targetComponentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCompanyDefaultDataview>().HasKey(@"CompanyDefaultDataviewID");
        }

        partial void CustomizeTbCompanyDefaultDataviewMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanyParameter Mapping

        private void TbCompanyParameterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanyParameter>().ToTable(@"tb_company_parameter", @"posme");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.CompanyParameterID).HasColumnName(@"companyParameterID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.ParameterID).HasColumnName(@"parameterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(300).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyParameter>().Property(x => x.CustomValue).HasColumnName(@"customValue").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(300).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCompanyParameter>().HasKey(@"CompanyParameterID");
        }

        partial void CustomizeTbCompanyParameterMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanySubelementAudit Mapping

        private void TbCompanySubelementAuditMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanySubelementAudit>().ToTable(@"tb_company_subelement_audit", @"posme");
            modelBuilder.Entity<TbCompanySubelementAudit>().Property(x => x.CompanySubelementAudiID).HasColumnName(@"companySubelementAudiID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanySubelementAudit>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementAudit>().Property(x => x.SubElementID).HasColumnName(@"subElementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementAudit>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementAudit>().HasKey(@"CompanySubelementAudiID");
        }

        partial void CustomizeTbCompanySubelementAuditMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCompanySubelementObligatory Mapping

        private void TbCompanySubelementObligatoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCompanySubelementObligatory>().ToTable(@"tb_company_subelement_obligatory", @"posme");
            modelBuilder.Entity<TbCompanySubelementObligatory>().Property(x => x.CompanySubelementObligatoryID).HasColumnName(@"companySubelementObligatoryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCompanySubelementObligatory>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementObligatory>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementObligatory>().Property(x => x.SubElementID).HasColumnName(@"subElementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCompanySubelementObligatory>().HasKey(@"CompanySubelementObligatoryID");
        }

        partial void CustomizeTbCompanySubelementObligatoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponent Mapping

        private void TbComponentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponent>().ToTable(@"tb_component", @"posme");
            modelBuilder.Entity<TbComponent>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponent>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponent>().HasKey(@"ComponentID");
        }

        partial void CustomizeTbComponentMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponentAudit Mapping

        private void TbComponentAuditMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponentAudit>().ToTable(@"tb_component_audit", @"posme");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ComponentAuditID).HasColumnName(@"componentAuditID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ElementItemID).HasColumnName(@"elementItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ModifiedOn).HasColumnName(@"modifiedOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ModifiedAt).HasColumnName(@"modifiedAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ModifiedIn).HasColumnName(@"modifiedIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().Property(x => x.ModifiedBy).HasColumnName(@"modifiedBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAudit>().HasKey(@"ComponentAuditID");
        }

        partial void CustomizeTbComponentAuditMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponentAuditDetail Mapping

        private void TbComponentAuditDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponentAuditDetail>().ToTable(@"tb_component_audit_detail", @"posme");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.ComponentAuditDetailID).HasColumnName(@"componentAuditDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.ComponentAuditID).HasColumnName(@"componentAuditID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.FieldID).HasColumnName(@"fieldID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.OldValue).HasColumnName(@"oldValue").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.NewValue).HasColumnName(@"newValue").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAuditDetail>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAuditDetail>().HasKey(@"ComponentAuditDetailID");
        }

        partial void CustomizeTbComponentAuditDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponentAutorization Mapping

        private void TbComponentAutorizationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponentAutorization>().ToTable(@"tb_component_autorization", @"posme");
            modelBuilder.Entity<TbComponentAutorization>().Property(x => x.ComponentAutorizationID).HasColumnName(@"componentAutorizationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponentAutorization>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorization>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbComponentAutorization>().HasKey(@"ComponentAutorizationID");
        }

        partial void CustomizeTbComponentAutorizationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponentAutorizationDetail Mapping

        private void TbComponentAutorizationDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponentAutorizationDetail>().ToTable(@"tb_component_autorization_detail", @"posme");
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.ComponentAurotizationDetailID).HasColumnName(@"componentAurotizationDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.ComponentAutorizationID).HasColumnName(@"componentAutorizationID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorizationDetail>().Property(x => x.WorkflowStageID).HasColumnName(@"workflowStageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentAutorizationDetail>().HasKey(@"ComponentAurotizationDetailID");
        }

        partial void CustomizeTbComponentAutorizationDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbComponentElement Mapping

        private void TbComponentElementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbComponentElement>().ToTable(@"tb_component_element", @"posme");
            modelBuilder.Entity<TbComponentElement>().Property(x => x.ComponentElementID).HasColumnName(@"componentElementID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbComponentElement>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentElement>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbComponentElement>().HasKey(@"ComponentElementID");
        }

        partial void CustomizeTbComponentElementMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCounter Mapping

        private void TbCounterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCounter>().ToTable(@"tb_counter", @"posme");
            modelBuilder.Entity<TbCounter>().Property(x => x.CounterID).HasColumnName(@"counterID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCounter>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCounter>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCounter>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCounter>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().Property(x => x.InitialValue).HasColumnName(@"initialValue").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().Property(x => x.CurrentValue).HasColumnName(@"currentValue").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().Property(x => x.Seed).HasColumnName(@"seed").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().Property(x => x.Serie).HasColumnName(@"serie").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(10).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().Property(x => x.Length).HasColumnName(@"length").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCounter>().HasKey(@"CounterID");
        }

        partial void CustomizeTbCounterMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCreditLine Mapping

        private void TbCreditLineMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCreditLine>().ToTable(@"tb_credit_line", @"posme");
            modelBuilder.Entity<TbCreditLine>().Property(x => x.CreditLineID).HasColumnName(@"creditLineID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCreditLine>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCreditLine>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCreditLine>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(400).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCreditLine>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCreditLine>().HasKey(@"CreditLineID");
        }

        partial void CustomizeTbCreditLineMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCurrency Mapping

        private void TbCurrencyMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCurrency>().ToTable(@"tb_currency", @"posme");
            modelBuilder.Entity<TbCurrency>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCurrency>().Property(x => x.Simbol).HasColumnName(@"simbol").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCurrency>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCurrency>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCurrency>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCurrency>().HasKey(@"CurrencyID");
        }

        partial void CustomizeTbCurrencyMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomer Mapping

        private void TbCustomerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomer>().ToTable(@"tb_customer", @"posme");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CustomerID).HasColumnName(@"customerID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomer>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomer>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomer>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CustomerNumber).HasColumnName(@"customerNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomer>().Property(x => x.IdentificationType).HasColumnName(@"identificationType").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Identification).HasColumnName(@"identification").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CountryID).HasColumnName(@"countryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.StateID).HasColumnName(@"stateID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CityID).HasColumnName(@"cityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Location).HasColumnName(@"location").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.ClasificationID).HasColumnName(@"clasificationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CategoryID).HasColumnName(@"categoryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.SubCategoryID).HasColumnName(@"subCategoryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CustomerTypeID).HasColumnName(@"customerTypeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.BirthDate).HasColumnName(@"birthDate").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.TypePay).HasColumnName(@"typePay").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.PayConditionID).HasColumnName(@"payConditionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.SexoID).HasColumnName(@"sexoID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.TypeFirm).HasColumnName(@"typeFirm").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.BalancePoint).HasColumnName(@"balancePoint").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.PhoneNumber).HasColumnName(@"phoneNumber").HasColumnType(@"varbinary").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.DateContract).HasColumnName(@"dateContract").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.EntityContactID).HasColumnName(@"entityContactID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference5).HasColumnName(@"reference5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.Budget).HasColumnName(@"budget").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomer>().Property(x => x.ModifiedOn).HasColumnName(@"modifiedOn").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomer>().Property(x => x.FormContactID).HasColumnName(@"formContactID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomer>().HasKey(@"CustomerID");
        }

        partial void CustomizeTbCustomerMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerConsultasSinRiesgo Mapping

        private void TbCustomerConsultasSinRiesgoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().ToTable(@"tb_customer_consultas_sin_riesgo", @"posme");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.RequestID).HasColumnName(@"requestID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.File).HasColumnName(@"file").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.ModifiedOn).HasColumnName(@"modifiedOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().Property(x => x.IsPay).HasColumnName(@"isPay").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomerConsultasSinRiesgo>().HasKey(@"RequestID");
        }

        partial void CustomizeTbCustomerConsultasSinRiesgoMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCredit Mapping

        private void TbCustomerCreditMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCredit>().ToTable(@"tb_customer_credit", @"posme");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.CustomerCreditID).HasColumnName(@"customerCreditID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.LimitCreditDol).HasColumnName(@"limitCreditDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.BalanceDol).HasColumnName(@"balanceDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCredit>().Property(x => x.IncomeDol).HasColumnName(@"incomeDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCredit>().HasKey(@"CustomerCreditID");
        }

        partial void CustomizeTbCustomerCreditMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditAmoritization Mapping

        private void TbCustomerCreditAmoritizationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditAmoritization>().ToTable(@"tb_customer_credit_amoritization", @"posme");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.CreditAmortizationID).HasColumnName(@"creditAmortizationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.CustomerCreditDocumentID).HasColumnName(@"customerCreditDocumentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.DateApply).HasColumnName(@"dateApply").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.BalanceStart).HasColumnName(@"balanceStart").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.Interest).HasColumnName(@"interest").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.Capital).HasColumnName(@"capital").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.Share).HasColumnName(@"share").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.BalanceEnd).HasColumnName(@"balanceEnd").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.Remaining).HasColumnName(@"remaining").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.ShareCapital).HasColumnName(@"shareCapital").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.DayDelay).HasColumnName(@"dayDelay").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(350).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomerCreditAmoritization>().HasKey(@"CreditAmortizationID");
        }

        partial void CustomizeTbCustomerCreditAmoritizationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditClasification Mapping

        private void TbCustomerCreditClasificationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditClasification>().ToTable(@"tb_customer_credit_clasification", @"posme");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.ClasificationID).HasColumnName(@"clasificationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.DateHistory).HasColumnName(@"dateHistory").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.NumberShareLate).HasColumnName(@"numberShareLate").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.AmountCapitalLate).HasColumnName(@"amountCapitalLate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.AmountInterestLate).HasColumnName(@"amountInterestLate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.MaxDayMora).HasColumnName(@"maxDayMora").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.NumberCreditAbiertos).HasColumnName(@"numberCreditAbiertos").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.NumberCreditSaneados).HasColumnName(@"numberCreditSaneados").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.NumberCreditCancelados).HasColumnName(@"numberCreditCancelados").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.AmountCapitalAbierto).HasColumnName(@"amountCapitalAbierto").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.AmountCapitalSaneado).HasColumnName(@"amountCapitalSaneado").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.AmountCapitalCancelado).HasColumnName(@"amountCapitalCancelado").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditClasification>().Property(x => x.Summary).HasColumnName(@"summary").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditClasification>().HasKey(@"ClasificationID");
        }

        partial void CustomizeTbCustomerCreditClasificationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditDocument Mapping

        private void TbCustomerCreditDocumentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditDocument>().ToTable(@"tb_customer_credit_document", @"posme");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.CustomerCreditDocumentID).HasColumnName(@"customerCreditDocumentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.CustomerCreditLineID).HasColumnName(@"customerCreditLineID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.DocumentNumber).HasColumnName(@"documentNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.DateOn).HasColumnName(@"dateOn").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Amount).HasColumnName(@"amount").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Interes).HasColumnName(@"interes").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Term).HasColumnName(@"term").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.BalanceProvicioned).HasColumnName(@"balanceProvicioned").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"1.0000");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(4500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.TypeAmortization).HasColumnName(@"typeAmortization").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.PeriodPay).HasColumnName(@"periodPay").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.ProviderIDCredit).HasColumnName(@"providerIDCredit").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocument>().Property(x => x.ReportSinRiesgo).HasColumnName(@"reportSinRiesgo").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbCustomerCreditDocument>().HasKey(@"CustomerCreditDocumentID");
        }

        partial void CustomizeTbCustomerCreditDocumentMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditDocumentEntityRelated Mapping

        private void TbCustomerCreditDocumentEntityRelatedMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().ToTable(@"tb_customer_credit_document_entity_related", @"posme");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CcEntityRelatedID).HasColumnName(@"ccEntityRelatedID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CustomerCreditDocumentID).HasColumnName(@"customerCreditDocumentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.Type).HasColumnName(@"type").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.TypeCredit).HasColumnName(@"typeCredit").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"4");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.StatusCredit).HasColumnName(@"statusCredit").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.TypeGarantia).HasColumnName(@"typeGarantia").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"4");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.TypeRecuperation).HasColumnName(@"typeRecuperation").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.RatioDesembolso).HasColumnName(@"ratioDesembolso").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.RatioBalance).HasColumnName(@"ratioBalance").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.RatioBalanceExpired).HasColumnName(@"ratioBalanceExpired").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.RatioShare).HasColumnName(@"ratioShare").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(120).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomerCreditDocumentEntityRelated>().HasKey(@"CcEntityRelatedID");
        }

        partial void CustomizeTbCustomerCreditDocumentEntityRelatedMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditExternalSharon Mapping

        private void TbCustomerCreditExternalSharonMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().HasNoKey();
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().ToView(@"tb_customer_credit_external_sharon", @"posme");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.CustomerID).HasColumnName(@"customerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.TIPODEENTIDAD).HasColumnName(@"TIPO_DE_ENTIDAD").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(5).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.NUMEROCORRELATIVO).HasColumnName(@"NUMERO_CORRELATIVO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.FECHADEREPORTE).HasColumnName(@"FECHA_DE_REPORTE").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.DEPARTAMENTO).HasColumnName(@"DEPARTAMENTO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.NUMERODECEDULAORUC).HasColumnName(@"NUMERO_DE_CEDULA_O_RUC").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.NOMBREDEPERSONA).HasColumnName(@"NOMBRE_DE_PERSONA").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.TIPODECREDITO).HasColumnName(@"TIPO_DE_CREDITO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.FECHADEDESEMBOLSO).HasColumnName(@"FECHA_DE_DESEMBOLSO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.TIPODEOBLIGACION).HasColumnName(@"TIPO_DE_OBLIGACION").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.MONTOAUTORIZADO).HasColumnName(@"MONTO_AUTORIZADO").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.PLAZO).HasColumnName(@"PLAZO").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.FRECUENCIADEPAGO).HasColumnName(@"FRECUENCIA_DE_PAGO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.SALDODEUDA).HasColumnName(@"SALDO_DEUDA").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.ESTADO).HasColumnName(@"ESTADO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(450).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.MONTOVENCIDO).HasColumnName(@"MONTO_VENCIDO").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.ANTIGUEDADDEMORA).HasColumnName(@"ANTIGUEDAD_DE_MORA").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.TIPODEGARANTIA).HasColumnName(@"TIPO_DE_GARANTIA").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.FORMADERECUPERACION).HasColumnName(@"FORMA_DE_RECUPERACION").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.NUMERODECREDITO).HasColumnName(@"NUMERO_DE_CREDITO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.VALORDELACUOTA).HasColumnName(@"VALOR_DE_LA_CUOTA").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'1'");
            modelBuilder.Entity<TbCustomerCreditExternalSharon>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
        }

        partial void CustomizeTbCustomerCreditExternalSharonMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditExternalSharonTmp Mapping

        private void TbCustomerCreditExternalSharonTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().HasNoKey();
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().ToView(@"tb_customer_credit_external_sharon_tmp", @"posme");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CompanyName).HasColumnName(@"companyName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CustomerID).HasColumnName(@"customerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.DateCredit).HasColumnName(@"dateCredit").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.DocumentNumber).HasColumnName(@"documentNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CustomerName).HasColumnName(@"customerName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CustomerIdentification).HasColumnName(@"customerIdentification").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CustomerPhone).HasColumnName(@"customerPhone").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.AmountAurotize).HasColumnName(@"amountAurotize").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.Plazo).HasColumnName(@"plazo").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.FormPay).HasColumnName(@"formPay").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.AmountShare).HasColumnName(@"amountShare").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.AmountBalance).HasColumnName(@"amountBalance").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.DayMora).HasColumnName(@"dayMora").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(450).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'1'");
            modelBuilder.Entity<TbCustomerCreditExternalSharonTmp>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
        }

        partial void CustomizeTbCustomerCreditExternalSharonTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerCreditLine Mapping

        private void TbCustomerCreditLineMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerCreditLine>().ToTable(@"tb_customer_credit_line", @"posme");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.CustomerCreditLineID).HasColumnName(@"customerCreditLineID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.CreditLineID).HasColumnName(@"creditLineID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.AccountNumber).HasColumnName(@"accountNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.TypeAmortization).HasColumnName(@"typeAmortization").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.LimitCredit).HasColumnName(@"limitCredit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.InterestYear).HasColumnName(@"interestYear").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.InterestPay).HasColumnName(@"interestPay").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.TotalPay).HasColumnName(@"totalPay").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.TotalDefeated).HasColumnName(@"totalDefeated").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.DateOpen).HasColumnName(@"dateOpen").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.PeriodPay).HasColumnName(@"periodPay").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.DateLastPay).HasColumnName(@"dateLastPay").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.Term).HasColumnName(@"term").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(550).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbCustomerCreditLine>().Property(x => x.DayExcluded).HasColumnName(@"dayExcluded").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerCreditLine>().HasKey(@"CustomerCreditLineID");
        }

        partial void CustomizeTbCustomerCreditLineMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerFrecuencyActuation Mapping

        private void TbCustomerFrecuencyActuationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().ToTable(@"tb_customer_frecuency_actuations", @"posme");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.CustomerFrecuencyActuations).HasColumnName(@"customerFrecuencyActuations").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.SituationID).HasColumnName(@"situationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.FrecuencyContactID).HasColumnName(@"frecuencyContactID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().Property(x => x.IsApply).HasColumnName(@"isApply").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerFrecuencyActuation>().HasKey(@"CustomerFrecuencyActuations");
        }

        partial void CustomizeTbCustomerFrecuencyActuationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbCustomerPaymentMethod Mapping

        private void TbCustomerPaymentMethodMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbCustomerPaymentMethod>().ToTable(@"tb_customer_payment_method", @"posme");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.CustomerPaymentMethod).HasColumnName(@"customerPaymentMethod").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.ExpirationDate).HasColumnName(@"expirationDate").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.Cvc).HasColumnName(@"cvc").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().Property(x => x.TypeId).HasColumnName(@"typeId").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbCustomerPaymentMethod>().HasKey(@"CustomerPaymentMethod");
        }

        partial void CustomizeTbCustomerPaymentMethodMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbDataview Mapping

        private void TbDataviewMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbDataview>().ToTable(@"tb_dataview", @"posme");
            modelBuilder.Entity<TbDataview>().Property(x => x.DataViewID).HasColumnName(@"dataViewID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbDataview>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.SqlScript).HasColumnName(@"sqlScript").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(5000).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.VisibleColumns).HasColumnName(@"visibleColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.NonVisibleColumns).HasColumnName(@"nonVisibleColumns").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbDataview>().Property(x => x.CallerID).HasColumnName(@"callerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbDataview>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbDataview>().HasKey(@"DataViewID");
        }

        partial void CustomizeTbDataviewMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbElement Mapping

        private void TbElementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbElement>().ToTable(@"tb_element", @"posme");
            modelBuilder.Entity<TbElement>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbElement>().Property(x => x.ElementTypeID).HasColumnName(@"elementTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbElement>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbElement>().Property(x => x.ColumnAutoIncrement).HasColumnName(@"columnAutoIncrement").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<TbElement>().HasKey(@"ElementID");
        }

        partial void CustomizeTbElementMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbElementType Mapping

        private void TbElementTypeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbElementType>().ToTable(@"tb_element_type", @"posme");
            modelBuilder.Entity<TbElementType>().Property(x => x.ElementTypeID).HasColumnName(@"elementTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbElementType>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbElementType>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbElementType>().HasKey(@"ElementTypeID");
        }

        partial void CustomizeTbElementTypeMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEmployee Mapping

        private void TbEmployeeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEmployee>().ToTable(@"tb_employee", @"posme");
            modelBuilder.Entity<TbEmployee>().Property(x => x.EmployeeID).HasColumnName(@"employeeID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEmployee>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployee>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployee>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployee>().Property(x => x.EmployeNumber).HasColumnName(@"employeNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEmployee>().Property(x => x.NumberIdentification).HasColumnName(@"numberIdentification").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.IdentificationTypeID).HasColumnName(@"identificationTypeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.SocialSecurityNumber).HasColumnName(@"socialSecurityNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CountryID).HasColumnName(@"countryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.StateID).HasColumnName(@"stateID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CityID).HasColumnName(@"cityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.DepartamentID).HasColumnName(@"departamentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.AreaID).HasColumnName(@"areaID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.ClasificationID).HasColumnName(@"clasificationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CategoryID).HasColumnName(@"categoryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.TypeEmployeeID).HasColumnName(@"typeEmployeeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.HourCost).HasColumnName(@"hourCost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbEmployee>().Property(x => x.ComissionPorcentage).HasColumnName(@"comissionPorcentage").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbEmployee>().Property(x => x.ParentEmployeeID).HasColumnName(@"parentEmployeeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"date").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployee>().HasKey(@"EmployeeID");
        }

        partial void CustomizeTbEmployeeMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEmployeeCalendarPay Mapping

        private void TbEmployeeCalendarPayMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEmployeeCalendarPay>().ToTable(@"tb_employee_calendar_pay", @"posme");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CalendarID).HasColumnName(@"calendarID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.AccountingCycleID).HasColumnName(@"accountingCycleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(300).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(15).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.TypeID).HasColumnName(@"typeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEmployeeCalendarPay>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbEmployeeCalendarPay>().HasKey(@"CalendarID");
        }

        partial void CustomizeTbEmployeeCalendarPayMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEmployeeCalendarPayDetail Mapping

        private void TbEmployeeCalendarPayDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().ToTable(@"tb_employee_calendar_pay_detail", @"posme");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.CalendarDetailID).HasColumnName(@"calendarDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.CalendarID).HasColumnName(@"calendarID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.EmployeeID).HasColumnName(@"employeeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.Salary).HasColumnName(@"salary").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.Commission).HasColumnName(@"commission").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.Adelantos).HasColumnName(@"adelantos").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.Neto).HasColumnName(@"neto").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbEmployeeCalendarPayDetail>().HasKey(@"CalendarDetailID");
        }

        partial void CustomizeTbEmployeeCalendarPayDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEntity Mapping

        private void TbEntityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEntity>().ToTable(@"tb_entity", @"posme");
            modelBuilder.Entity<TbEntity>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEntity>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntity>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntity>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntity>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntity>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"bigint").ValueGeneratedOnAdd().HasPrecision(20, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntity>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntity>().Property(x => x.ImagenBiometric).HasColumnName(@"imagenBiometric").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntity>().HasKey(@"EntityID");
        }

        partial void CustomizeTbEntityMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEntityAccount Mapping

        private void TbEntityAccountMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEntityAccount>().ToTable(@"tb_entity_account", @"posme");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.EntityAccountID).HasColumnName(@"entityAccountID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.AccountTypeID).HasColumnName(@"accountTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.Balance).HasColumnName(@"balance").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CreditLimit).HasColumnName(@"creditLimit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.MaxCredit).HasColumnName(@"maxCredit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.DebitLimit).HasColumnName(@"debitLimit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.MaxDebit).HasColumnName(@"maxDebit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityAccount>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbEntityAccount>().HasKey(@"EntityAccountID");
        }

        partial void CustomizeTbEntityAccountMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEntityEmail Mapping

        private void TbEntityEmailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEntityEmail>().ToTable(@"tb_entity_email", @"posme");
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.EntityEmailID).HasColumnName(@"entityEmailID").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd().HasPrecision(20, 0);
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityEmail>().Property(x => x.IsPrimary).HasColumnName(@"isPrimary").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityEmail>().HasKey(@"EntityEmailID");
        }

        partial void CustomizeTbEntityEmailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEntityPhone Mapping

        private void TbEntityPhoneMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEntityPhone>().ToTable(@"tb_entity_phone", @"posme");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.EntityPhoneID).HasColumnName(@"entityPhoneID").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd().HasPrecision(20, 0);
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.TypeID).HasColumnName(@"typeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityPhone>().Property(x => x.IsPrimary).HasColumnName(@"isPrimary").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEntityPhone>().HasKey(@"EntityPhoneID");
        }

        partial void CustomizeTbEntityPhoneMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbError Mapping

        private void TbErrorMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbError>().ToTable(@"tb_error", @"posme");
            modelBuilder.Entity<TbError>().Property(x => x.ErrorID).HasColumnName(@"errorID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbError>().Property(x => x.TagID).HasColumnName(@"tagID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.Notificated).HasColumnName(@"notificated").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.Message).HasColumnName(@"message").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.IsRead).HasColumnName(@"isRead").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().Property(x => x.ReadOn).HasColumnName(@"readOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbError>().HasKey(@"ErrorID");
        }

        partial void CustomizeTbErrorMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEstadisticaCategoria Mapping

        private void TbEstadisticaCategoriaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEstadisticaCategoria>().ToTable(@"tb_estadistica_categorias", @"posme");
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.CategoriaID).HasColumnName(@"categoriaID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.ClaseID).HasColumnName(@"claseID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.StartValue).HasColumnName(@"startValue").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 5).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.EndValue).HasColumnName(@"endValue").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 5).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbEstadisticaCategoria>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbEstadisticaCategoria>().HasKey(@"CategoriaID");
        }

        partial void CustomizeTbEstadisticaCategoriaMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbEstadisticaClase Mapping

        private void TbEstadisticaClaseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbEstadisticaClase>().ToTable(@"tb_estadistica_clases", @"posme");
            modelBuilder.Entity<TbEstadisticaClase>().Property(x => x.ClaseID).HasColumnName(@"claseID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbEstadisticaClase>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbEstadisticaClase>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbEstadisticaClase>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'1'");
            modelBuilder.Entity<TbEstadisticaClase>().HasKey(@"ClaseID");
        }

        partial void CustomizeTbEstadisticaClaseMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbExchangeRate Mapping

        private void TbExchangeRateMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbExchangeRate>().ToTable(@"tb_exchange_rate", @"posme");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.ExchangeRateID).HasColumnName(@"exchangeRateID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.Date).HasColumnName(@"date").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.TargetCurrencyID).HasColumnName(@"targetCurrencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.Ratio).HasColumnName(@"ratio").HasColumnType(@"double").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbExchangeRate>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbExchangeRate>().HasKey(@"ExchangeRateID");
        }

        partial void CustomizeTbExchangeRateMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbFixedAssent Mapping

        private void TbFixedAssentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbFixedAssent>().ToTable(@"tb_fixed_assent", @"posme");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.FixedAssentID).HasColumnName(@"fixedAssentID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.FixedAssentCode).HasColumnName(@"fixedAssentCode").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.ModelNumber).HasColumnName(@"modelNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Marca).HasColumnName(@"marca").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.ColorID).HasColumnName(@"colorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.ChasisNumber).HasColumnName(@"chasisNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.Year).HasColumnName(@"year").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.AsignedEmployeeID).HasColumnName(@"asignedEmployeeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CategoryID).HasColumnName(@"categoryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.TypeID).HasColumnName(@"typeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.TypeDepresiationID).HasColumnName(@"typeDepresiationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.YearOfUtility).HasColumnName(@"yearOfUtility").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.PriceStart).HasColumnName(@"priceStart").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(28, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.IsForaneo).HasColumnName(@"isForaneo").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbFixedAssent>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbFixedAssent>().HasKey(@"FixedAssentID");
        }

        partial void CustomizeTbFixedAssentMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbIndicator Mapping

        private void TbIndicatorMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbIndicator>().ToTable(@"tb_indicator", @"posme");
            modelBuilder.Entity<TbIndicator>().Property(x => x.IndicadorID).HasColumnName(@"indicadorID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbIndicator>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Code).HasColumnName(@"code").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Label).HasColumnName(@"label").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(500).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Order).HasColumnName(@"order").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Script).HasColumnName(@"script").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5000).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Posfix).HasColumnName(@"posfix").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.Prefix).HasColumnName(@"prefix").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbIndicator>().Property(x => x.IsGroup).HasColumnName(@"isGroup").HasColumnType(@"bit").ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbIndicator>().HasKey(@"IndicadorID");
        }

        partial void CustomizeTbIndicatorMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbIndicatorHistory Mapping

        private void TbIndicatorHistoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbIndicatorHistory>().ToTable(@"tb_indicator_history", @"posme");
            modelBuilder.Entity<TbIndicatorHistory>().Property(x => x.IndicatorHistoryID).HasColumnName(@"indicatorHistoryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbIndicatorHistory>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorHistory>().Property(x => x.IndicatorID).HasColumnName(@"indicatorID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorHistory>().Property(x => x.DateOn).HasColumnName(@"dateOn").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbIndicatorHistory>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbIndicatorHistory>().HasKey(@"IndicatorHistoryID");
        }

        partial void CustomizeTbIndicatorHistoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbIndicatorTmp Mapping

        private void TbIndicatorTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbIndicatorTmp>().ToTable(@"tb_indicator_tmp", @"posme");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.IndicatorTmpID).HasColumnName(@"indicatorTmpID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.TokenID).HasColumnName(@"tokenID").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.IndicadorID).HasColumnName(@"indicadorID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbIndicatorTmp>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbIndicatorTmp>().HasKey(@"IndicatorTmpID");
        }

        partial void CustomizeTbIndicatorTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItem Mapping

        private void TbItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItem>().ToTable(@"tb_item", @"posme");
            modelBuilder.Entity<TbItem>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItem>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.InventoryCategoryID).HasColumnName(@"inventoryCategoryID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.FamilyID).HasColumnName(@"familyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.ItemNumber).HasColumnName(@"itemNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbItem>().Property(x => x.BarCode).HasColumnName(@"barCode").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1200).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbItem>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1000).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.UnitMeasureID).HasColumnName(@"unitMeasureID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.DisplayID).HasColumnName(@"displayID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.Capacity).HasColumnName(@"capacity").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.DisplayUnitMeasureID).HasColumnName(@"displayUnitMeasureID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.DefaultWarehouseID).HasColumnName(@"defaultWarehouseID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItem>().Property(x => x.QuantityMax).HasColumnName(@"quantityMax").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItem>().Property(x => x.QuantityMin).HasColumnName(@"quantityMin").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItem>().Property(x => x.Cost).HasColumnName(@"cost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItem>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.IsPerishable).HasColumnName(@"isPerishable").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.FactorBox).HasColumnName(@"factorBox").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.FactorProgram).HasColumnName(@"factorProgram").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.IsInvoiceQuantityZero).HasColumnName(@"isInvoiceQuantityZero").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.IsServices).HasColumnName(@"isServices").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbItem>().Property(x => x.IsInvoice).HasColumnName(@"isInvoice").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateWallInCloset).HasColumnName(@"realStateWallInCloset").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStatePiscinaPrivate).HasColumnName(@"realStatePiscinaPrivate").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateClubPiscina).HasColumnName(@"realStateClubPiscina").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateAceptanMascota).HasColumnName(@"realStateAceptanMascota").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateContractCorrentaje).HasColumnName(@"realStateContractCorrentaje").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStatePlanReference).HasColumnName(@"realStatePlanReference").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateLinkYoutube).HasColumnName(@"realStateLinkYoutube").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateLinkPaginaWeb).HasColumnName(@"realStateLinkPaginaWeb").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateLinkPhontos).HasColumnName(@"realStateLinkPhontos").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateLinkGoogleMaps).HasColumnName(@"realStateLinkGoogleMaps").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateLinkOther).HasColumnName(@"realStateLinkOther").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateStyleKitchen).HasColumnName(@"realStateStyleKitchen").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateRoomServices).HasColumnName(@"realStateRoomServices").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateRoomBatchServices).HasColumnName(@"realStateRoomBatchServices").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateReferenceUbicacion).HasColumnName(@"realStateReferenceUbicacion").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateReferenceZone).HasColumnName(@"realStateReferenceZone").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateReferenceCondominio).HasColumnName(@"realStateReferenceCondominio").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateEmployerAgentID).HasColumnName(@"realStateEmployerAgentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateCountryID).HasColumnName(@"realStateCountryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateStateID).HasColumnName(@"realStateStateID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateCityID).HasColumnName(@"realStateCityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.ModifiedOn).HasColumnName(@"modifiedOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateRooBatchVisit).HasColumnName(@"realStateRooBatchVisit").HasColumnType(@"tinyint").ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateGerenciaExclusive).HasColumnName(@"realStateGerenciaExclusive").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStatePhone).HasColumnName(@"realStatePhone").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.RealStateEmail).HasColumnName(@"realStateEmail").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.DateLastUse).HasColumnName(@"dateLastUse").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().Property(x => x.QuantityInvoice).HasColumnName(@"quantityInvoice").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItem>().HasKey(@"ItemID");
        }

        partial void CustomizeTbItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemCategory Mapping

        private void TbItemCategoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemCategory>().ToTable(@"tb_item_category", @"posme");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.InventoryCategoryID).HasColumnName(@"inventoryCategoryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemCategory>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemCategory>().HasKey(@"InventoryCategoryID");
        }

        partial void CustomizeTbItemCategoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemConfigLoto Mapping

        private void TbItemConfigLotoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemConfigLoto>().ToTable(@"tb_item_config_loto", @"posme");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.ItemConfigLotoID).HasColumnName(@"itemConfigLotoID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.MaxSale).HasColumnName(@"maxSale").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"1.00");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno1Inicio).HasColumnName(@"turno1Inicio").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno1Fin).HasColumnName(@"turno1Fin").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"9");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno2Inicio).HasColumnName(@"turno2Inicio").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"9");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno2Fin).HasColumnName(@"turno2Fin").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"14");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno3Inicio).HasColumnName(@"turno3Inicio").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"14");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.Turno3Fin).HasColumnName(@"turno3Fin").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"22");
            modelBuilder.Entity<TbItemConfigLoto>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbItemConfigLoto>().HasKey(@"ItemConfigLotoID");
        }

        partial void CustomizeTbItemConfigLotoMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemDataSheet Mapping

        private void TbItemDataSheetMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemDataSheet>().ToTable(@"tb_item_data_sheet", @"posme");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.ItemDataSheetID).HasColumnName(@"itemDataSheetID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.Version).HasColumnName(@"version").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheet>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbItemDataSheet>().HasKey(@"ItemDataSheetID");
        }

        partial void CustomizeTbItemDataSheetMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemDataSheetDetail Mapping

        private void TbItemDataSheetDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemDataSheetDetail>().ToTable(@"tb_item_data_sheet_detail", @"posme");
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.ItemDataSheetDetailID).HasColumnName(@"itemDataSheetDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.ItemDataSheetID).HasColumnName(@"itemDataSheetID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.RelatedItemID).HasColumnName(@"relatedItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemDataSheetDetail>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbItemDataSheetDetail>().HasKey(@"ItemDataSheetDetailID");
        }

        partial void CustomizeTbItemDataSheetDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemImport Mapping

        private void TbItemImportMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemImport>().HasNoKey();
            modelBuilder.Entity<TbItemImport>().ToView(@"tb_item_import", @"posme");
            modelBuilder.Entity<TbItemImport>().Property(x => x.ItemNumber).HasColumnName(@"itemNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemImport>().Property(x => x.Fisico).HasColumnName(@"fisico").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemImport>().Property(x => x.Sistema).HasColumnName(@"sistema").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
        }

        partial void CustomizeTbItemImportMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemSku Mapping

        private void TbItemSkuMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemSku>().ToTable(@"tb_item_sku", @"posme");
            modelBuilder.Entity<TbItemSku>().Property(x => x.SkuID).HasColumnName(@"skuID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemSku>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemSku>().Property(x => x.CatalogItemID).HasColumnName(@"catalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemSku>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2);
            modelBuilder.Entity<TbItemSku>().HasKey(@"SkuID");
        }

        partial void CustomizeTbItemSkuMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemWarehouse Mapping

        private void TbItemWarehouseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemWarehouse>().ToTable(@"tb_item_warehouse", @"posme");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.ItemWarehouseId).HasColumnName(@"itemWarehouseId").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.WarehouseID).HasColumnName(@"warehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.Cost).HasColumnName(@"cost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.QuantityMax).HasColumnName(@"quantityMax").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItemWarehouse>().Property(x => x.QuantityMin).HasColumnName(@"quantityMin").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbItemWarehouse>().HasKey(@"ItemWarehouseId");
        }

        partial void CustomizeTbItemWarehouseMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbItemWarehouseExpired Mapping

        private void TbItemWarehouseExpiredMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbItemWarehouseExpired>().ToTable(@"tb_item_warehouse_expired", @"posme");
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.ItemWarehouseExpiredID).HasColumnName(@"itemWarehouseExpiredID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.WarehouseID).HasColumnName(@"warehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.Lote).HasColumnName(@"lote").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbItemWarehouseExpired>().Property(x => x.DateExpired).HasColumnName(@"dateExpired").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TbItemWarehouseExpired>().HasKey(@"ItemWarehouseExpiredID");
        }

        partial void CustomizeTbItemWarehouseExpiredMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbJournalEntry Mapping

        private void TbJournalEntryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbJournalEntry>().ToTable(@"tb_journal_entry", @"posme");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.JournalEntryID).HasColumnName(@"journalEntryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.JournalNumber).HasColumnName(@"journalNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.JournalDate).HasColumnName(@"journalDate").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.TbExchangeRate).HasColumnName(@"tb_exchange_rate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.IsApplied).HasColumnName(@"isApplied").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.TitleTemplated).HasColumnName(@"titleTemplated").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/A'");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.IsTemplated).HasColumnName(@"isTemplated").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(550).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.JournalTypeID).HasColumnName(@"journalTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.AccountingCycleID).HasColumnName(@"accountingCycleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.EntryName).HasColumnName(@"entryName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(500).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.IsModule).HasColumnName(@"isModule").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntry>().HasKey(@"JournalEntryID");
        }

        partial void CustomizeTbJournalEntryMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbJournalEntryDetail Mapping

        private void TbJournalEntryDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbJournalEntryDetail>().ToTable(@"tb_journal_entry_detail", @"posme");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.JournalEntryDetailID).HasColumnName(@"journalEntryDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.JournalEntryID).HasColumnName(@"journalEntryID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.IsApplied).HasColumnName(@"isApplied").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetail>().Property(x => x.TbExchangeRate).HasColumnName(@"tb_exchange_rate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbJournalEntryDetail>().HasKey(@"JournalEntryDetailID");
        }

        partial void CustomizeTbJournalEntryDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbJournalEntryDetailSummary Mapping

        private void TbJournalEntryDetailSummaryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbJournalEntryDetailSummary>().ToTable(@"tb_journal_entry_detail_summary", @"posme");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.JournalEntryDetailSummaryID).HasColumnName(@"journalEntryDetailSummaryID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.Tocken).HasColumnName(@"tocken").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.JournalEntryID).HasColumnName(@"journalEntryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.ParentAccountID).HasColumnName(@"parentAccountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbJournalEntryDetailSummary>().HasKey(@"JournalEntryDetailSummaryID");
        }

        partial void CustomizeTbJournalEntryDetailSummaryMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbKardex Mapping

        private void TbKardexMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbKardex>().ToTable(@"tb_kardex", @"posme");
            modelBuilder.Entity<TbKardex>().Property(x => x.KardexID).HasColumnName(@"kardexID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbKardex>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbKardex>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbKardex>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbKardex>().Property(x => x.WarehouseID).HasColumnName(@"warehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbKardex>().Property(x => x.KardexCode).HasColumnName(@"kardexCode").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.KardexDate).HasColumnName(@"kardexDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.Sign).HasColumnName(@"sign").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbKardex>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.TransactionDetailID).HasColumnName(@"transactionDetailID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.MovementOn).HasColumnName(@"movementOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbKardex>().Property(x => x.OldQuantity).HasColumnName(@"oldQuantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.OldQuantityWarehouse).HasColumnName(@"oldQuantityWarehouse").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.OldCost).HasColumnName(@"oldCost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.OldCostWarehouse).HasColumnName(@"oldCostWarehouse").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.TransactionQuantity).HasColumnName(@"transactionQuantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.TransactionCost).HasColumnName(@"transactionCost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.NewQuantity).HasColumnName(@"newQuantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.NewQuantityWarehouse).HasColumnName(@"newQuantityWarehouse").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.NewCost).HasColumnName(@"newCost").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.NewCostWarehouse).HasColumnName(@"newCostWarehouse").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbKardex>().Property(x => x.QuantityInWarehouseCurrent).HasColumnName(@"quantityInWarehouseCurrent").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().Property(x => x.QuantityInCurrent).HasColumnName(@"quantityInCurrent").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbKardex>().HasKey(@"KardexID");
        }

        partial void CustomizeTbKardexMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbLegal Mapping

        private void TbLegalMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbLegal>().ToTable(@"tb_legal", @"posme");
            modelBuilder.Entity<TbLegal>().Property(x => x.LegalID).HasColumnName(@"legalID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbLegal>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLegal>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLegal>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLegal>().Property(x => x.ComercialName).HasColumnName(@"comercialName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbLegal>().Property(x => x.LegalName).HasColumnName(@"legalName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbLegal>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'N/D'");
            modelBuilder.Entity<TbLegal>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbLegal>().HasKey(@"LegalID");
        }

        partial void CustomizeTbLegalMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbListPrice Mapping

        private void TbListPriceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbListPrice>().ToTable(@"tb_list_price", @"posme");
            modelBuilder.Entity<TbListPrice>().Property(x => x.ListPriceID).HasColumnName(@"listPriceID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbListPrice>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbListPrice>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbListPrice>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbListPrice>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(200).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbListPrice>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(550).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbListPrice>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbListPrice>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbListPrice>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbListPrice>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbListPrice>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbListPrice>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbListPrice>().HasKey(@"ListPriceID");
        }

        partial void CustomizeTbListPriceMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbLog Mapping

        private void TbLogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbLog>().ToTable(@"tb_log", @"posme");
            modelBuilder.Entity<TbLog>().Property(x => x.LogID).HasColumnName(@"logID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbLog>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLog>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLog>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLog>().Property(x => x.Token).HasColumnName(@"token").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLog>().Property(x => x.ProcedureName).HasColumnName(@"procedureName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLog>().Property(x => x.Code).HasColumnName(@"code").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbLog>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(350).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLog>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbLog>().HasKey(@"LogID");
        }

        partial void CustomizeTbLogMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbLogMesseger Mapping

        private void TbLogMessegerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbLogMesseger>().ToTable(@"tb_log_messeger", @"posme");
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Errno).HasColumnName(@"errno").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Errtype).HasColumnName(@"errtype").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(32);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Errstr).HasColumnName(@"errstr").HasColumnType(@"text").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Errfile).HasColumnName(@"errfile").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Errline).HasColumnName(@"errline").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.UserAgent).HasColumnName(@"user_agent").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(450);
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.IpAddress).HasColumnName(@"ip_address").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(45).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLogMesseger>().Property(x => x.Time).HasColumnName(@"time").HasColumnType(@"datetime").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TbLogMesseger>().HasKey(@"Id");
        }

        partial void CustomizeTbLogMessegerMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbLogSession Mapping

        private void TbLogSessionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbLogSession>().ToTable(@"tb_log_session", @"posme");
            modelBuilder.Entity<TbLogSession>().Property(x => x.SessionId).HasColumnName(@"session_id").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(40).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLogSession>().Property(x => x.IpAddress).HasColumnName(@"ip_address").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(45).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLogSession>().Property(x => x.UserAgent).HasColumnName(@"user_agent").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(120).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLogSession>().Property(x => x.LastActivity).HasColumnName(@"last_activity").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(15).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbLogSession>().Property(x => x.UserData).HasColumnName(@"user_data").HasColumnType(@"text").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbLogSession>().HasKey(@"SessionId");
        }

        partial void CustomizeTbLogSessionMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbMasterKardexTemp Mapping

        private void TbMasterKardexTempMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbMasterKardexTemp>().ToTable(@"tb_master_kardex_temp", @"posme");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.MasterKardexTempID).HasColumnName(@"masterKardexTempID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.TokenID).HasColumnName(@"tokenID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.ItemNumber).HasColumnName(@"itemNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.ItemName).HasColumnName(@"itemName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.MinKardexID).HasColumnName(@"minKardexID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.QuantityInicial).HasColumnName(@"quantityInicial").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.CostInicial).HasColumnName(@"costInicial").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.QuantityInput).HasColumnName(@"quantityInput").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.CostInput).HasColumnName(@"costInput").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.QuantityOutput).HasColumnName(@"quantityOutput").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.CostOutput).HasColumnName(@"costOutput").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbMasterKardexTemp>().Property(x => x.ItemCategoryName).HasColumnName(@"itemCategoryName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMasterKardexTemp>().HasKey(@"MasterKardexTempID");
        }

        partial void CustomizeTbMasterKardexTempMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbMembership Mapping

        private void TbMembershipMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbMembership>().ToTable(@"tb_membership", @"posme");
            modelBuilder.Entity<TbMembership>().Property(x => x.MembershipID).HasColumnName(@"membershipID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbMembership>().Property(x => x.RoleID).HasColumnName(@"roleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMembership>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMembership>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMembership>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMembership>().HasKey(@"MembershipID");
        }

        partial void CustomizeTbMembershipMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbMenuElement Mapping

        private void TbMenuElementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbMenuElement>().ToTable(@"tb_menu_element", @"posme");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.MenuElementID).HasColumnName(@"menuElementID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbMenuElement>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.ParentMenuElementID).HasColumnName(@"parentMenuElementID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Orden).HasColumnName(@"orden").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(40).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Icon).HasColumnName(@"icon").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Template).HasColumnName(@"template").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.Nivel).HasColumnName(@"nivel").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.TypeMenuElementID).HasColumnName(@"typeMenuElementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.IconWindowForm).HasColumnName(@"iconWindowForm").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1200).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.FormRedirectWindowForm).HasColumnName(@"formRedirectWindowForm").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().Property(x => x.TypeUrlRedirect).HasColumnName(@"typeUrlRedirect").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbMenuElement>().HasKey(@"MenuElementID");
        }

        partial void CustomizeTbMenuElementMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbNaturale Mapping

        private void TbNaturaleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbNaturale>().ToTable(@"tb_naturales", @"posme");
            modelBuilder.Entity<TbNaturale>().Property(x => x.NaturalesID).HasColumnName(@"naturalesID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbNaturale>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNaturale>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNaturale>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNaturale>().Property(x => x.FirstName).HasColumnName(@"firstName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNaturale>().Property(x => x.LastName).HasColumnName(@"lastName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNaturale>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNaturale>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNaturale>().Property(x => x.ProfesionID).HasColumnName(@"profesionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNaturale>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNaturale>().HasKey(@"NaturalesID");
        }

        partial void CustomizeTbNaturaleMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbNotification Mapping

        private void TbNotificationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbNotification>().ToTable(@"tb_notification", @"posme");
            modelBuilder.Entity<TbNotification>().Property(x => x.NotificationID).HasColumnName(@"notificationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbNotification>().Property(x => x.ErrorID).HasColumnName(@"errorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.From).HasColumnName(@"from").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.To).HasColumnName(@"to").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.Subject).HasColumnName(@"subject").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.Message).HasColumnName(@"message").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(5000).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.Summary).HasColumnName(@"summary").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.Title).HasColumnName(@"title").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.TagID).HasColumnName(@"tagID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.PhoneFrom).HasColumnName(@"phoneFrom").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.PhoneTo).HasColumnName(@"phoneTo").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.ProgramDate).HasColumnName(@"programDate").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.ProgramHour).HasColumnName(@"programHour").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.SendOn).HasColumnName(@"sendOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.SendEmailOn).HasColumnName(@"sendEmailOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.SendWhatsappOn).HasColumnName(@"sendWhatsappOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.AddedCalendarGoogle).HasColumnName(@"addedCalendarGoogle").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().Property(x => x.QuantityOcupation).HasColumnName(@"quantityOcupation").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNotification>().Property(x => x.QuantityDisponible).HasColumnName(@"quantityDisponible").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbNotification>().Property(x => x.GoogleCalendarEventID).HasColumnName(@"googleCalendarEventID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbNotification>().HasKey(@"NotificationID");
        }

        partial void CustomizeTbNotificationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbParameter Mapping

        private void TbParameterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbParameter>().ToTable(@"tb_parameter", @"posme");
            modelBuilder.Entity<TbParameter>().Property(x => x.ParameterID).HasColumnName(@"parameterID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbParameter>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbParameter>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbParameter>().Property(x => x.IsRequiered).HasColumnName(@"isRequiered").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbParameter>().Property(x => x.IsEdited).HasColumnName(@"isEdited").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbParameter>().HasKey(@"ParameterID");
        }

        partial void CustomizeTbParameterMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbPrice Mapping

        private void TbPriceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbPrice>().ToTable(@"tb_price", @"posme");
            modelBuilder.Entity<TbPrice>().Property(x => x.PriceID).HasColumnName(@"priceID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbPrice>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbPrice>().Property(x => x.ListPriceID).HasColumnName(@"listPriceID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbPrice>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbPrice>().Property(x => x.TypePriceID).HasColumnName(@"typePriceID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbPrice>().Property(x => x.Percentage).HasColumnName(@"percentage").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbPrice>().Property(x => x.Price).HasColumnName(@"price").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbPrice>().Property(x => x.PercentageCommision).HasColumnName(@"percentageCommision").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbPrice>().HasKey(@"PriceID");
        }

        partial void CustomizeTbPriceMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbProvider Mapping

        private void TbProviderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbProvider>().ToTable(@"tb_provider", @"posme");
            modelBuilder.Entity<TbProvider>().Property(x => x.ProviderID).HasColumnName(@"providerID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbProvider>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProvider>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProvider>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProvider>().Property(x => x.ProviderNumber).HasColumnName(@"providerNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbProvider>().Property(x => x.NumberIdentification).HasColumnName(@"numberIdentification").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.IdentificationTypeID).HasColumnName(@"identificationTypeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.ProviderType).HasColumnName(@"providerType").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.ProviderCategoryID).HasColumnName(@"providerCategoryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.ProviderClasificationID).HasColumnName(@"providerClasificationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.PayConditionID).HasColumnName(@"payConditionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.IsLocal).HasColumnName(@"isLocal").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CountryID).HasColumnName(@"countryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.StateID).HasColumnName(@"stateID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CityID).HasColumnName(@"cityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.DeleveryDay).HasColumnName(@"deleveryDay").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.DeleveryDayReal).HasColumnName(@"deleveryDayReal").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.Distancia).HasColumnName(@"distancia").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbProvider>().HasKey(@"ProviderID");
        }

        partial void CustomizeTbProviderMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbProviderItem Mapping

        private void TbProviderItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbProviderItem>().ToTable(@"tb_provider_item", @"posme");
            modelBuilder.Entity<TbProviderItem>().Property(x => x.ProviderItemID).HasColumnName(@"providerItemID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbProviderItem>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProviderItem>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProviderItem>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProviderItem>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbProviderItem>().HasKey(@"ProviderItemID");
        }

        partial void CustomizeTbProviderItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbPublicCatalog Mapping

        private void TbPublicCatalogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbPublicCatalog>().ToTable(@"tb_public_catalog", @"posme");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.PublicCatalogID).HasColumnName(@"publicCatalogID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.SystemName).HasColumnName(@"systemName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.Orden).HasColumnName(@"orden").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalog>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbPublicCatalog>().HasKey(@"PublicCatalogID");
        }

        partial void CustomizeTbPublicCatalogMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbPublicCatalogDetail Mapping

        private void TbPublicCatalogDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbPublicCatalogDetail>().ToTable(@"tb_public_catalog_detail", @"posme");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.PublicCatalogDetailID).HasColumnName(@"publicCatalogDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.PublicCatalogID).HasColumnName(@"publicCatalogID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Sequence).HasColumnName(@"sequence").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.ParentCatalogDetailID).HasColumnName(@"parentCatalogDetailID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Ratio).HasColumnName(@"ratio").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.ParentName).HasColumnName(@"parentName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference5).HasColumnName(@"reference5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference7).HasColumnName(@"reference7").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference8).HasColumnName(@"reference8").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference9).HasColumnName(@"reference9").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference10).HasColumnName(@"reference10").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference11).HasColumnName(@"reference11").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference12).HasColumnName(@"reference12").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference13).HasColumnName(@"reference13").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference14).HasColumnName(@"reference14").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference15).HasColumnName(@"reference15").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference16).HasColumnName(@"reference16").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference17).HasColumnName(@"reference17").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference18).HasColumnName(@"reference18").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference19).HasColumnName(@"reference19").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference20).HasColumnName(@"reference20").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference21).HasColumnName(@"reference21").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference22).HasColumnName(@"reference22").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference23).HasColumnName(@"reference23").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Refecence24).HasColumnName(@"refecence24").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().Property(x => x.Reference25).HasColumnName(@"reference25").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbPublicCatalogDetail>().HasKey(@"PublicCatalogDetailID");
        }

        partial void CustomizeTbPublicCatalogDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbRazonesFinancierasTmp Mapping

        private void TbRazonesFinancierasTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbRazonesFinancierasTmp>().ToTable(@"tb_razones_financieras_tmp", @"posme");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.RzID).HasColumnName(@"rzID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Token).HasColumnName(@"token").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(150).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Sequence).HasColumnName(@"sequence").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Simbol).HasColumnName(@"simbol").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(500).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRazonesFinancierasTmp>().HasKey(@"RzID");
        }

        partial void CustomizeTbRazonesFinancierasTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbRelationship Mapping

        private void TbRelationshipMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbRelationship>().ToTable(@"tb_relationship", @"posme");
            modelBuilder.Entity<TbRelationship>().Property(x => x.RelationshipID).HasColumnName(@"relationshipID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbRelationship>().Property(x => x.EmployeeID).HasColumnName(@"employeeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRelationship>().Property(x => x.CustomerID).HasColumnName(@"customerID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRelationship>().Property(x => x.StartOn).HasColumnName(@"startOn").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbRelationship>().Property(x => x.EndOn).HasColumnName(@"endOn").HasColumnType(@"date").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01'");
            modelBuilder.Entity<TbRelationship>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbRelationship>().HasKey(@"RelationshipID");
        }

        partial void CustomizeTbRelationshipMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbRemember Mapping

        private void TbRememberMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbRemember>().ToTable(@"tb_remember", @"posme");
            modelBuilder.Entity<TbRemember>().Property(x => x.RememberID).HasColumnName(@"rememberID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbRemember>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.Title).HasColumnName(@"title").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRemember>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(500).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRemember>().Property(x => x.Period).HasColumnName(@"period").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.Day).HasColumnName(@"day").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.LastNotificationOn).HasColumnName(@"lastNotificationOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRemember>().Property(x => x.IsTemporal).HasColumnName(@"isTemporal").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbRemember>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TbRemember>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRemember>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbRemember>().Property(x => x.TagID).HasColumnName(@"tagID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().Property(x => x.LeerFile).HasColumnName(@"leerFile").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRemember>().HasKey(@"RememberID");
        }

        partial void CustomizeTbRememberMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbRole Mapping

        private void TbRoleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbRole>().ToTable(@"tb_role", @"posme");
            modelBuilder.Entity<TbRole>().Property(x => x.RoleID).HasColumnName(@"roleID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbRole>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRole>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRole>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRole>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRole>().Property(x => x.IsAdmin).HasColumnName(@"isAdmin").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRole>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRole>().Property(x => x.UrlDefault).HasColumnName(@"urlDefault").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbRole>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbRole>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRole>().HasKey(@"RoleID");
        }

        partial void CustomizeTbRoleMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbRoleAutorization Mapping

        private void TbRoleAutorizationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbRoleAutorization>().ToTable(@"tb_role_autorization", @"posme");
            modelBuilder.Entity<TbRoleAutorization>().Property(x => x.RoleAurotizationID).HasColumnName(@"roleAurotizationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbRoleAutorization>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRoleAutorization>().Property(x => x.ComponentAutorizationID).HasColumnName(@"componentAutorizationID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRoleAutorization>().Property(x => x.RoleID).HasColumnName(@"roleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRoleAutorization>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbRoleAutorization>().HasKey(@"RoleAurotizationID");
        }

        partial void CustomizeTbRoleAutorizationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbSubelement Mapping

        private void TbSubelementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbSubelement>().ToTable(@"tb_subelement", @"posme");
            modelBuilder.Entity<TbSubelement>().Property(x => x.SubElementID).HasColumnName(@"subElementID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbSubelement>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbSubelement>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbSubelement>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbSubelement>().Property(x => x.CatalogID).HasColumnName(@"catalogID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbSubelement>().HasKey(@"SubElementID");
        }

        partial void CustomizeTbSubelementMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTag Mapping

        private void TbTagMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTag>().ToTable(@"tb_tag", @"posme");
            modelBuilder.Entity<TbTag>().Property(x => x.TagID).HasColumnName(@"tagID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTag>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().Property(x => x.SendEmail).HasColumnName(@"sendEmail").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().Property(x => x.SendNotificationApp).HasColumnName(@"sendNotificationApp").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().Property(x => x.SendSMS).HasColumnName(@"sendSMS").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTag>().HasKey(@"TagID");
        }

        partial void CustomizeTbTagMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransaction Mapping

        private void TbTransactionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransaction>().ToTable(@"tb_transaction", @"posme");
            modelBuilder.Entity<TbTransaction>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransaction>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransaction>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransaction>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.IsCountable).HasColumnName(@"isCountable").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.GenerateTransactionNumber).HasColumnName(@"generateTransactionNumber").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.DecimalPlaces).HasColumnName(@"decimalPlaces").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.JournalTypeID).HasColumnName(@"journalTypeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.SignInventory).HasColumnName(@"signInventory").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.IsRevert).HasColumnName(@"isRevert").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransaction>().HasKey(@"TransactionID");
        }

        partial void CustomizeTbTransactionMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionCausal Mapping

        private void TbTransactionCausalMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionCausal>().ToTable(@"tb_transaction_causal", @"posme");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.TransactionCausalID).HasColumnName(@"transactionCausalID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.WarehouseSourceID).HasColumnName(@"warehouseSourceID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.WarehouseTargetID).HasColumnName(@"warehouseTargetID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.IsDefault).HasColumnName(@"isDefault").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbTransactionCausal>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbTransactionCausal>().HasKey(@"TransactionCausalID");
        }

        partial void CustomizeTbTransactionCausalMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionConcept Mapping

        private void TbTransactionConceptMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionConcept>().ToTable(@"tb_transaction_concept", @"posme");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.ConceptID).HasColumnName(@"conceptID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.Orden).HasColumnName(@"orden").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.Sign).HasColumnName(@"sign").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.Visible).HasColumnName(@"visible").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.Base).HasColumnName(@"base").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionConcept>().HasKey(@"ConceptID");
        }

        partial void CustomizeTbTransactionConceptMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMaster Mapping

        private void TbTransactionMasterMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMaster>().ToTable(@"tb_transaction_master", @"posme");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionNumber).HasColumnName(@"transactionNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionCausalID).HasColumnName(@"transactionCausalID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionOn).HasColumnName(@"transactionOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TransactionOn2).HasColumnName(@"transactionOn2").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.StatusIDChangeOn).HasColumnName(@"statusIDChangeOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Note).HasColumnName(@"note").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(3500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Sign).HasColumnName(@"sign").HasColumnType(@"smallint").ValueGeneratedOnAdd().HasPrecision(6, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CurrencyID2).HasColumnName(@"currencyID2").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.DescriptionReference).HasColumnName(@"descriptionReference").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(4000).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Amount).HasColumnName(@"amount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Tax1).HasColumnName(@"tax1").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Tax2).HasColumnName(@"tax2").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Tax3).HasColumnName(@"tax3").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Tax4).HasColumnName(@"tax4").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.Discount).HasColumnName(@"discount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.SubAmount).HasColumnName(@"subAmount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.IsApplied).HasColumnName(@"isApplied").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.JournalEntryID).HasColumnName(@"journalEntryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.AreaID).HasColumnName(@"areaID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.PriorityID).HasColumnName(@"priorityID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.SourceWarehouseID).HasColumnName(@"sourceWarehouseID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.TargetWarehouseID).HasColumnName(@"targetWarehouseID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.IsTemplate).HasColumnName(@"isTemplate").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.PeriodPay).HasColumnName(@"periodPay").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.NextVisit).HasColumnName(@"nextVisit").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.NumberPhone).HasColumnName(@"numberPhone").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.NotificationID).HasColumnName(@"notificationID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.PrinterQuantity).HasColumnName(@"printerQuantity").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.EntityIDSecondary).HasColumnName(@"entityIDSecondary").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().Property(x => x.DayExcluded).HasColumnName(@"dayExcluded").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMaster>().HasKey(@"TransactionMasterID");
        }

        partial void CustomizeTbTransactionMasterMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterConcept Mapping

        private void TbTransactionMasterConceptMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterConcept>().ToTable(@"tb_transaction_master_concept", @"posme");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.TransactionMasterConceptID).HasColumnName(@"transactionMasterConceptID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.ConceptID).HasColumnName(@"conceptID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4).HasDefaultValueSql(@"0.0000");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterConcept>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterConcept>().HasKey(@"TransactionMasterConceptID");
        }

        partial void CustomizeTbTransactionMasterConceptMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterDenomination Mapping

        private void TbTransactionMasterDenominationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterDenomination>().ToTable(@"tb_transaction_master_denomination", @"posme");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.TransactionMasterDenominationID).HasColumnName(@"transactionMasterDenominationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.CatalogItemID).HasColumnName(@"catalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"1.00000000");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"1");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.Ratio).HasColumnName(@"ratio").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"1.00000000");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDenomination>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDenomination>().HasKey(@"TransactionMasterDenominationID");
        }

        partial void CustomizeTbTransactionMasterDenominationMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterDetail Mapping

        private void TbTransactionMasterDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterDetail>().ToTable(@"tb_transaction_master_detail", @"posme");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.TransactionMasterDetailID).HasColumnName(@"transactionMasterDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.PromotionID).HasColumnName(@"promotionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Amount).HasColumnName(@"amount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Cost).HasColumnName(@"cost").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Discount).HasColumnName(@"discount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.UnitaryAmount).HasColumnName(@"unitaryAmount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Tax1).HasColumnName(@"tax1").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Tax2).HasColumnName(@"tax2").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Tax3).HasColumnName(@"tax3").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Tax4).HasColumnName(@"tax4").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.UnitaryCost).HasColumnName(@"unitaryCost").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.UnitaryPrice).HasColumnName(@"unitaryPrice").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference5).HasColumnName(@"reference5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Reference7).HasColumnName(@"reference7").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.DescriptionReference).HasColumnName(@"descriptionReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(800).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ExchangeRateReference).HasColumnName(@"exchangeRateReference").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.CatalogStatusID).HasColumnName(@"catalogStatusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.InventoryStatusID).HasColumnName(@"inventoryStatusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.QuantityStock).HasColumnName(@"quantityStock").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.QuantiryStockInTraffic).HasColumnName(@"quantiryStockInTraffic").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.QuantityStockUnaswared).HasColumnName(@"quantityStockUnaswared").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.RemaingStock).HasColumnName(@"remaingStock").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.Lote).HasColumnName(@"lote").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ExpirationDate).HasColumnName(@"expirationDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.InventoryWarehouseSourceID).HasColumnName(@"inventoryWarehouseSourceID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.InventoryWarehouseTargetID).HasColumnName(@"inventoryWarehouseTargetID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ItemFormulatedApplied).HasColumnName(@"itemFormulatedApplied").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.TypePriceID).HasColumnName(@"typePriceID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.SkuCatalogItemID).HasColumnName(@"skuCatalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.SkuQuantity).HasColumnName(@"skuQuantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.SkuQuantityBySku).HasColumnName(@"skuQuantityBySku").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.SkuFormatoDescription).HasColumnName(@"skuFormatoDescription").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ItemNameLog).HasColumnName(@"itemNameLog").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.AmountCommision).HasColumnName(@"amountCommision").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbTransactionMasterDetail>().Property(x => x.ItemNameDescriptionLog).HasColumnName(@"itemNameDescriptionLog").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetail>().HasKey(@"TransactionMasterDetailID");
        }

        partial void CustomizeTbTransactionMasterDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterDetailCredit Mapping

        private void TbTransactionMasterDetailCreditMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().ToTable(@"tb_transaction_master_detail_credit", @"posme");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.TransactionMasterDetailCreditID).HasColumnName(@"transactionMasterDetailCreditID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.TransactionMasterDetailID).HasColumnName(@"transactionMasterDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Capital).HasColumnName(@"capital").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Interest).HasColumnName(@"interest").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.DayDalay).HasColumnName(@"dayDalay").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.InterestMora).HasColumnName(@"interestMora").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8).HasDefaultValueSql(@"0.00000000");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference5).HasColumnName(@"reference5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference7).HasColumnName(@"reference7").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference8).HasColumnName(@"reference8").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().Property(x => x.Reference9).HasColumnName(@"reference9").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailCredit>().HasKey(@"TransactionMasterDetailCreditID");
        }

        partial void CustomizeTbTransactionMasterDetailCreditMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterDetailTemp Mapping

        private void TbTransactionMasterDetailTempMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().ToTable(@"tb_transaction_master_detail_temp", @"posme");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.TransactionMasterDetailTemporalID).HasColumnName(@"transactionMasterDetailTemporalID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Token).HasColumnName(@"token").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(500).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.TransactionMasterDetailID).HasColumnName(@"transactionMasterDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.PromotionID).HasColumnName(@"promotionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Amount).HasColumnName(@"amount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Cost).HasColumnName(@"cost").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Discount).HasColumnName(@"discount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.UnitaryAmount).HasColumnName(@"unitaryAmount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Tax1).HasColumnName(@"tax1").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Tax2).HasColumnName(@"tax2").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Tax3).HasColumnName(@"tax3").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Tax4).HasColumnName(@"tax4").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.UnitaryCost).HasColumnName(@"unitaryCost").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.UnitaryPrice).HasColumnName(@"unitaryPrice").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference4).HasColumnName(@"reference4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference5).HasColumnName(@"reference5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.Reference7).HasColumnName(@"reference7").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.DescriptionReference).HasColumnName(@"descriptionReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(800).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.ExchangeRateReference).HasColumnName(@"exchangeRateReference").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.CatalogStatusID).HasColumnName(@"catalogStatusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.InventoryStatusID).HasColumnName(@"inventoryStatusID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.QuantityStock).HasColumnName(@"quantityStock").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.QuantiryStockInTraffic).HasColumnName(@"quantiryStockInTraffic").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.QuantityStockUnaswared).HasColumnName(@"quantityStockUnaswared").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.RemaingStock).HasColumnName(@"remaingStock").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(18, 4).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.ExpirationDate).HasColumnName(@"expirationDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.InventoryWarehouseSourceID).HasColumnName(@"inventoryWarehouseSourceID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.InventoryWarehouseTargetID).HasColumnName(@"inventoryWarehouseTargetID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.ItemFormulatedApplied).HasColumnName(@"itemFormulatedApplied").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.TypePriceID).HasColumnName(@"typePriceID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.SkuCatalogItemID).HasColumnName(@"skuCatalogItemID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.SkuQuantity).HasColumnName(@"skuQuantity").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.SkuQuantityBySku).HasColumnName(@"skuQuantityBySku").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().Property(x => x.SkuFormatoDescription).HasColumnName(@"skuFormatoDescription").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterDetailTemp>().HasKey(@"TransactionMasterDetailTemporalID");
        }

        partial void CustomizeTbTransactionMasterDetailTempMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterInfo Mapping

        private void TbTransactionMasterInfoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterInfo>().ToTable(@"tb_transaction_master_info", @"posme");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.TransactionMasterInfoID).HasColumnName(@"transactionMasterInfoID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ZoneID).HasColumnName(@"zoneID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.RouteID).HasColumnName(@"routeID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.MesaID).HasColumnName(@"mesaID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReferenceClientName).HasColumnName(@"referenceClientName").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReferenceClientIdentifier).HasColumnName(@"referenceClientIdentifier").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ChangeAmount).HasColumnName(@"changeAmount").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9).HasDefaultValueSql(@"0.000000000");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountPoint).HasColumnName(@"receiptAmountPoint").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(10, 2).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmount).HasColumnName(@"receiptAmount").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(19, 9).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountDol).HasColumnName(@"receiptAmountDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 5).HasDefaultValueSql(@"0.00000");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(150).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBank).HasColumnName(@"receiptAmountBank").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 2).HasDefaultValueSql(@"0.00");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBankID).HasColumnName(@"receiptAmountBankID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBankReference).HasColumnName(@"receiptAmountBankReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBankDol).HasColumnName(@"receiptAmountBankDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBankDolID).HasColumnName(@"receiptAmountBankDolID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountBankDolReference).HasColumnName(@"receiptAmountBankDolReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCard).HasColumnName(@"receiptAmountCard").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCardBankID).HasColumnName(@"receiptAmountCardBankID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCardBankReference).HasColumnName(@"receiptAmountCardBankReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCardDol).HasColumnName(@"receiptAmountCardDol").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(10, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCardBankDolID).HasColumnName(@"receiptAmountCardBankDolID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterInfo>().Property(x => x.ReceiptAmountCardBankDolReference).HasColumnName(@"receiptAmountCardBankDolReference").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterInfo>().HasKey(@"TransactionMasterInfoID");
        }

        partial void CustomizeTbTransactionMasterInfoMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterPurchase Mapping

        private void TbTransactionMasterPurchaseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterPurchase>().ToTable(@"tb_transaction_master_purchase", @"posme");
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.TransactionMasterPurchaseID).HasColumnName(@"transactionMasterPurchaseID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.PurchaseTypeID).HasColumnName(@"purchaseTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterPurchase>().Property(x => x.TransportTypeID).HasColumnName(@"transportTypeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionMasterPurchase>().HasKey(@"TransactionMasterPurchaseID");
        }

        partial void CustomizeTbTransactionMasterPurchaseMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterReference Mapping

        private void TbTransactionMasterReferenceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterReference>().ToTable(@"tb_transaction_master_references", @"posme");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.TransactionMasterReferenceID).HasColumnName(@"transactionMasterReferenceID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.TransactionReferenceNumber).HasColumnName(@"transactionReferenceNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").ValueGeneratedOnAdd().HasPrecision(1).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Refernece4).HasColumnName(@"refernece4").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Refernece5).HasColumnName(@"refernece5").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference6).HasColumnName(@"reference6").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference7).HasColumnName(@"reference7").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference8).HasColumnName(@"reference8").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Referecne9).HasColumnName(@"referecne9").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference10).HasColumnName(@"reference10").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference11).HasColumnName(@"reference11").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference12).HasColumnName(@"reference12").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference13).HasColumnName(@"reference13").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference14).HasColumnName(@"reference14").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference15).HasColumnName(@"reference15").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference16).HasColumnName(@"reference16").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference17).HasColumnName(@"reference17").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference18).HasColumnName(@"reference18").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference19).HasColumnName(@"reference19").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference20).HasColumnName(@"reference20").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference21).HasColumnName(@"reference21").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().Property(x => x.Reference22).HasColumnName(@"reference22").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterReference>().HasKey(@"TransactionMasterReferenceID");
        }

        partial void CustomizeTbTransactionMasterReferenceMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionMasterSummaryConceptTmp Mapping

        private void TbTransactionMasterSummaryConceptTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().ToTable(@"tb_transaction_master_summary_concept_tmp", @"posme");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.ID).HasColumnName(@"ID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.TransactionMasterCausalID).HasColumnName(@"transactionMasterCausalID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.JournalEntryID).HasColumnName(@"journalEntryID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.CurrencyID).HasColumnName(@"currencyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.TransactionNumber).HasColumnName(@"transactionNumber").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.TransactionDate).HasColumnName(@"transactionDate").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.ExchangeRate).HasColumnName(@"exchangeRate").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(26, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.ConceptID).HasColumnName(@"conceptID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.Value).HasColumnName(@"value").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(26, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.Reference1).HasColumnName(@"reference1").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.Reference2).HasColumnName(@"reference2").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().Property(x => x.Reference3).HasColumnName(@"reference3").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionMasterSummaryConceptTmp>().HasKey(@"ID");
        }

        partial void CustomizeTbTransactionMasterSummaryConceptTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionProfileDetail Mapping

        private void TbTransactionProfileDetailMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionProfileDetail>().ToTable(@"tb_transaction_profile_detail", @"posme");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.ProfileDetailID).HasColumnName(@"profileDetailID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.TransactionCausalID).HasColumnName(@"transactionCausalID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.ConceptID).HasColumnName(@"conceptID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(50).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetail>().Property(x => x.Sign).HasColumnName(@"sign").HasColumnType(@"char").IsRequired().ValueGeneratedNever().HasMaxLength(1).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTransactionProfileDetail>().HasKey(@"ProfileDetailID");
        }

        partial void CustomizeTbTransactionProfileDetailMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTransactionProfileDetailTmp Mapping

        private void TbTransactionProfileDetailTmpMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().ToTable(@"tb_transaction_profile_detail_tmp", @"posme");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.TransactionProfileDetailTmpID).HasColumnName(@"transactionProfileDetailTmpID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.LoginID).HasColumnName(@"loginID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.TransactionID).HasColumnName(@"transactionID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.TransactionCausalID).HasColumnName(@"transactionCausalID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.ConceptID).HasColumnName(@"conceptID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.AccountID).HasColumnName(@"accountID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.ClassID).HasColumnName(@"classID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.Debit).HasColumnName(@"debit").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(26, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().Property(x => x.Credit).HasColumnName(@"credit").HasColumnType(@"decimal").ValueGeneratedOnAdd().HasPrecision(26, 8).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbTransactionProfileDetailTmp>().HasKey(@"TransactionProfileDetailTmpID");
        }

        partial void CustomizeTbTransactionProfileDetailTmpMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbTypeMenuElement Mapping

        private void TbTypeMenuElementMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbTypeMenuElement>().ToTable(@"tb_type_menu_element", @"posme");
            modelBuilder.Entity<TbTypeMenuElement>().Property(x => x.TypeMenuElementID).HasColumnName(@"typeMenuElementID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbTypeMenuElement>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbTypeMenuElement>().HasKey(@"TypeMenuElementID");
        }

        partial void CustomizeTbTypeMenuElementMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbUser Mapping

        private void TbUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbUser>().ToTable(@"tb_user", @"posme");
            modelBuilder.Entity<TbUser>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbUser>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUser>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUser>().Property(x => x.Nickname).HasColumnName(@"nickname").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.Password).HasColumnName(@"password").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbUser>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUser>().Property(x => x.EmployeeID).HasColumnName(@"employeeID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUser>().Property(x => x.UseMobile).HasColumnName(@"useMobile").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUser>().Property(x => x.Phone).HasColumnName(@"phone").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.LastPayment).HasColumnName(@"lastPayment").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.Comercio).HasColumnName(@"comercio").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.Foto).HasColumnName(@"foto").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().Property(x => x.TokenGoogleCalendar).HasColumnName(@"token_google_calendar").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(1200).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUser>().HasKey(@"UserID");
        }

        partial void CustomizeTbUserMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbUserPermission Mapping

        private void TbUserPermissionMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbUserPermission>().ToTable(@"tb_user_permission", @"posme");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.UserPermissionID).HasColumnName(@"userPermissionID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbUserPermission>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.ElementID).HasColumnName(@"elementID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.RoleID).HasColumnName(@"roleID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.Selected).HasColumnName(@"selected").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.Inserted).HasColumnName(@"inserted").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.Deleted).HasColumnName(@"deleted").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUserPermission>().Property(x => x.Edited).HasColumnName(@"edited").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbUserPermission>().HasKey(@"UserPermissionID");
        }

        partial void CustomizeTbUserPermissionMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbUserTag Mapping

        private void TbUserTagMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbUserTag>().ToTable(@"tb_user_tag", @"posme");
            modelBuilder.Entity<TbUserTag>().Property(x => x.UserTagID).HasColumnName(@"userTagID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbUserTag>().Property(x => x.TagID).HasColumnName(@"tagID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserTag>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserTag>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserTag>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserTag>().HasKey(@"UserTagID");
        }

        partial void CustomizeTbUserTagMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbUserWarehouse Mapping

        private void TbUserWarehouseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbUserWarehouse>().ToTable(@"tb_user_warehouse", @"posme");
            modelBuilder.Entity<TbUserWarehouse>().Property(x => x.UserWarehouseID).HasColumnName(@"userWarehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbUserWarehouse>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserWarehouse>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserWarehouse>().Property(x => x.UserID).HasColumnName(@"userID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserWarehouse>().Property(x => x.WarehouseID).HasColumnName(@"warehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbUserWarehouse>().HasKey(@"UserWarehouseID");
        }

        partial void CustomizeTbUserWarehouseMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbWarehouse Mapping

        private void TbWarehouseMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbWarehouse>().ToTable(@"tb_warehouse", @"posme");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.WarehouseID).HasColumnName(@"warehouseID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbWarehouse>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.BranchID).HasColumnName(@"branchID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.Number).HasColumnName(@"number").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.Address).HasColumnName(@"address").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.StatusID).HasColumnName(@"statusID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"bit").IsRequired().ValueGeneratedNever().HasPrecision(1).HasDefaultValueSql(@"b'0'");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").IsRequired().ValueGeneratedOnAdd().HasDefaultValueSql(@"'1980-01-01 00:00:00'");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.CreatedIn).HasColumnName(@"createdIn").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"'0'");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.CreatedAt).HasColumnName(@"createdAt").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.TypeWarehouse).HasColumnName(@"typeWarehouse").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWarehouse>().Property(x => x.EmailResponsability).HasColumnName(@"emailResponsability").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWarehouse>().HasKey(@"WarehouseID");
        }

        partial void CustomizeTbWarehouseMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbWorkflow Mapping

        private void TbWorkflowMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbWorkflow>().ToTable(@"tb_workflow", @"posme");
            modelBuilder.Entity<TbWorkflow>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbWorkflow>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflow>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflow>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflow>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflow>().HasKey(@"WorkflowID");
        }

        partial void CustomizeTbWorkflowMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbWorkflowStage Mapping

        private void TbWorkflowStageMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbWorkflowStage>().ToTable(@"tb_workflow_stage", @"posme");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.WorkflowStageID).HasColumnName(@"workflowStageID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Display).HasColumnName(@"display").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.FlavorID).HasColumnName(@"flavorID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.EditableParcial).HasColumnName(@"editableParcial").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.EditableTotal).HasColumnName(@"editableTotal").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Eliminable).HasColumnName(@"eliminable").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Aplicable).HasColumnName(@"aplicable").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.Vinculable).HasColumnName(@"vinculable").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStage>().Property(x => x.IsInit).HasColumnName(@"isInit").HasColumnType(@"tinyint").IsRequired().ValueGeneratedNever().HasPrecision(1, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStage>().HasKey(@"WorkflowStageID");
        }

        partial void CustomizeTbWorkflowStageMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbWorkflowStageChangeLog Mapping

        private void TbWorkflowStageChangeLogMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbWorkflowStageChangeLog>().ToTable(@"tb_workflow_stage_change_log", @"posme");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.WorkflowStageChangeLogID).HasColumnName(@"workflowStageChangeLogID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.WorkflowStageID).HasColumnName(@"workflowStageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.Description).HasColumnName(@"description").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(250).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().Property(x => x.CreatedBy).HasColumnName(@"createdBy").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageChangeLog>().HasKey(@"WorkflowStageChangeLogID");
        }

        partial void CustomizeTbWorkflowStageChangeLogMapping(ModelBuilder modelBuilder);

        #endregion

        #region TbWorkflowStageRelation Mapping

        private void TbWorkflowStageRelationMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TbWorkflowStageRelation>().ToTable(@"tb_workflow_stage_relation", @"posme");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.WorkflowStageRelationID).HasColumnName(@"workflowStageRelationID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(11, 0);
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.ComponentID).HasColumnName(@"componentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.WorkflowID).HasColumnName(@"workflowID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.WorkflowStageID).HasColumnName(@"workflowStageID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.WorkflowStageTargetID).HasColumnName(@"workflowStageTargetID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0).HasDefaultValueSql(@"0");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.NecesitaAuth).HasColumnName(@"necesitaAuth").HasColumnType(@"tinyint").ValueGeneratedOnAdd().HasPrecision(1, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageRelation>().Property(x => x.AuthRolID).HasColumnName(@"AuthRolID").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TbWorkflowStageRelation>().HasKey(@"WorkflowStageRelationID");
        }

        partial void CustomizeTbWorkflowStageRelationMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwContabilidadComprobante Mapping

        private void VwContabilidadComprobanteMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwContabilidadComprobante>().HasNoKey();
            modelBuilder.Entity<VwContabilidadComprobante>().ToView(@"vw_contabilidad_comprobantes", @"posme");
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.CodigoComprobante).HasColumnName(@"CodigoComprobante").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.FechaComprobante).HasColumnName(@"FechaComprobante").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.TipoCambioComprobante).HasColumnName(@"TipoCambioComprobante").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.EstadoComprobante).HasColumnName(@"EstadoComprobante").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.DebitoComprobante).HasColumnName(@"DebitoComprobante").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.CrditoComprobante).HasColumnName(@"CrditoComprobante").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.TipoComprobante).HasColumnName(@"TipoComprobante").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.MonedaComprobante).HasColumnName(@"MonedaComprobante").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.CentroCostoCuenta).HasColumnName(@"CentroCostoCuenta").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.CodigoCuenta).HasColumnName(@"CodigoCuenta").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(251);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.NombreCuenta).HasColumnName(@"NombreCuenta").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.DebitoCuenta).HasColumnName(@"DebitoCuenta").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.CreditoCuenta).HasColumnName(@"CreditoCuenta").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 8);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.TipoCuenta).HasColumnName(@"TipoCuenta").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(350);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.BeneficiarioComprobante).HasColumnName(@"BeneficiarioComprobante").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<VwContabilidadComprobante>().Property(x => x.NotaComprobante).HasColumnName(@"NotaComprobante").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(550);
        }

        partial void CustomizeVwContabilidadComprobanteMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwCxcCustomerListRealEstate Mapping

        private void VwCxcCustomerListRealEstateMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().HasNoKey();
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().ToView(@"vw_cxc_customer_list_real_estate", @"posme");
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Codigo).HasColumnName(@"Codigo").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Contacto).HasColumnName(@"Contacto").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Modificacion).HasColumnName(@"Modificacion").HasColumnType(@"date").ValueGeneratedNever();
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Cliente).HasColumnName(@"Cliente").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Sexo).HasColumnName(@"Sexo").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Email).HasColumnName(@"Email").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Estado).HasColumnName(@"Estado").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(307);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Clasificacion).HasColumnName(@"Clasificacion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Categoria).HasColumnName(@"Categoria").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Presupuesto).HasColumnName(@"Presupuesto").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(10, 2);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Telefono).HasColumnName(@"Telefono").HasColumnType(@"varbinary").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.UbicacionInteres).HasColumnName(@"Ubicacion Interes").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Agente).HasColumnName(@"Agente").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Encuentra24).HasColumnName(@"Encuentra 24").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Mensaje).HasColumnName(@"Mensaje").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Comentario1).HasColumnName(@"Comentario 1").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Comentario2).HasColumnName(@"Comentario 2").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Ubicacion).HasColumnName(@"Ubicacion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwCxcCustomerListRealEstate>().Property(x => x.Formadecontacto).HasColumnName(@"Forma de contacto").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
        }

        partial void CustomizeVwCxcCustomerListRealEstateMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaBalance Mapping

        private void VwGerenciaBalanceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaBalance>().HasNoKey();
            modelBuilder.Entity<VwGerenciaBalance>().ToView(@"vw_gerencia_balance", @"posme");
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.CentroCosto).HasColumnName(@"CentroCosto").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.Cuenta).HasColumnName(@"Cuenta").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(503);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.Ano).HasColumnName(@"Ano").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.Mes).HasColumnName(@"Mes").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.MesOnly).HasColumnName(@"MesOnly").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.CsaldoInicial).HasColumnName(@"C$saldoInicial").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 8);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.CsaldoFinal).HasColumnName(@"C$saldoFinal").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(20, 8);
            modelBuilder.Entity<VwGerenciaBalance>().Property(x => x.CsaldoMensual).HasColumnName(@"C$saldoMensual").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 8);
        }

        partial void CustomizeVwGerenciaBalanceMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaCustomer Mapping

        private void VwGerenciaCustomerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaCustomer>().HasNoKey();
            modelBuilder.Entity<VwGerenciaCustomer>().ToView(@"vw_gerencia_customer", @"posme");
            modelBuilder.Entity<VwGerenciaCustomer>().Property(x => x.CustomerNumber).HasColumnName(@"customerNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaCustomer>().Property(x => x.FirstName).HasColumnName(@"firstName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaCustomer>().Property(x => x.Identification).HasColumnName(@"identification").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaCustomer>().Property(x => x.BirthDate).HasColumnName(@"birthDate").HasColumnType(@"date").ValueGeneratedNever();
        }

        partial void CustomizeVwGerenciaCustomerMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaDesembolsosDetalle Mapping

        private void VwGerenciaDesembolsosDetalleMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().HasNoKey();
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().ToView(@"vw_gerencia_desembolsos_detalle", @"posme");
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Colaborador).HasColumnName(@"Colaborador").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.NombreColaborador).HasColumnName(@"NombreColaborador").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Cliente).HasColumnName(@"Cliente").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.NombreCliente).HasColumnName(@"NombreCliente").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Factura).HasColumnName(@"Factura").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CreditAmortizationID).HasColumnName(@"creditAmortizationID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.FechaCuota).HasColumnName(@"FechaCuota").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.AnoCuota).HasColumnName(@"AnoCuota").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Mes1Cuota).HasColumnName(@"Mes1Cuota").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Mes2Cuota).HasColumnName(@"Mes2Cuota").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CBalanceStartCuota).HasColumnName(@"C$BalanceStartCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CInteresCuota).HasColumnName(@"C$InteresCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CCapitalCuota).HasColumnName(@"C$CapitalCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CBalanceEndCuota).HasColumnName(@"C$BalanceEndCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CShareCuota).HasColumnName(@"C$ShareCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CRemainingCuota).HasColumnName(@"C$RemainingCuota").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CshareCapital).HasColumnName(@"C$shareCapital").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.EstadoCuota).HasColumnName(@"EstadoCuota").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.DiasAtrazoCuota).HasColumnName(@"diasAtrazoCuota").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.Moneda).HasColumnName(@"Moneda").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.TipoCambioActual).HasColumnName(@"TipoCambioActual").HasColumnType(@"double").ValueGeneratedNever();
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CCapitalPagado).HasColumnName(@"C$CapitalPagado").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CCapitalPendiente).HasColumnName(@"C$CapitalPendiente").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CIntaresPagado).HasColumnName(@"C$IntaresPagado").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosDetalle>().Property(x => x.CInteresPendiente).HasColumnName(@"C$InteresPendiente").HasColumnType(@"double").ValueGeneratedNever().HasPrecision(19, 2);
        }

        partial void CustomizeVwGerenciaDesembolsosDetalleMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaDesembolsosResuman Mapping

        private void VwGerenciaDesembolsosResumanMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().HasNoKey();
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().ToView(@"vw_gerencia_desembolsos_resumen", @"posme");
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.CodigoCliente).HasColumnName(@"CodigoCliente").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Moneda).HasColumnName(@"Moneda").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(5);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Edad).HasColumnName(@"Edad").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(5, 0);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.CMonto).HasColumnName(@"C$Monto").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(17, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.CBalance).HasColumnName(@"C$Balance").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(17, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.CProvisionado).HasColumnName(@"C$Provisionado").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(17, 2);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Estado).HasColumnName(@"Estado").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Interes).HasColumnName(@"Interes").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(19, 9);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Plazo).HasColumnName(@"Plazo").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.TipoCambio).HasColumnName(@"TipoCambio").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType(@"date").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.TipoAmortizacion).HasColumnName(@"TipoAmortizacion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.PeriodoPago).HasColumnName(@"PeriodoPago").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Anio).HasColumnName(@"Anio").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Mes).HasColumnName(@"Mes").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.MesUnicamente).HasColumnName(@"MesUnicamente").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwGerenciaDesembolsosResuman>().Property(x => x.Factura).HasColumnName(@"Factura").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
        }

        partial void CustomizeVwGerenciaDesembolsosResumanMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaEstadoResultado001 Mapping

        private void VwGerenciaEstadoResultado001Mapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().HasNoKey();
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().ToView(@"vw_gerencia_estado_resultado_001", @"posme");
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.Cuenta).HasColumnName(@"Cuenta").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(503);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.Ano).HasColumnName(@"Ano").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.Mes).HasColumnName(@"Mes").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.MesOnly).HasColumnName(@"MesOnly").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.CsaldoInicial).HasColumnName(@"C$saldoInicial").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(19, 8);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.CsaldoFinal).HasColumnName(@"C$saldoFinal").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(21, 8);
            modelBuilder.Entity<VwGerenciaEstadoResultado001>().Property(x => x.CsaldoMensual).HasColumnName(@"C$saldoMensual").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(20, 8);
        }

        partial void CustomizeVwGerenciaEstadoResultado001Mapping(ModelBuilder modelBuilder);

        #endregion

        #region VwGerenciaEstadoResultado002 Mapping

        private void VwGerenciaEstadoResultado002Mapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().HasNoKey();
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().ToView(@"vw_gerencia_estado_resultado_002", @"posme");
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.Ano).HasColumnName(@"Ano").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(4);
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.Mes).HasColumnName(@"Mes").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.MesOnly).HasColumnName(@"MesOnly").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.CsaldoInicial).HasColumnName(@"C$saldoInicial").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(41, 8);
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.CsaldoFinal).HasColumnName(@"C$saldoFinal").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(43, 8);
            modelBuilder.Entity<VwGerenciaEstadoResultado002>().Property(x => x.CsaldoMensual).HasColumnName(@"C$saldoMensual").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(42, 8);
        }

        partial void CustomizeVwGerenciaEstadoResultado002Mapping(ModelBuilder modelBuilder);

        #endregion

        #region VwInventoryListItemRealEstate Mapping

        private void VwInventoryListItemRealEstateMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwInventoryListItemRealEstate>().HasNoKey();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().ToView(@"vw_inventory_list_item_real_estate", @"posme");
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Codigointerno).HasColumnName(@"Codigo interno").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.ItemID).HasColumnName(@"itemID").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(121);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Codigo).HasColumnName(@"Codigo").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Nombre).HasColumnName(@"Nombre").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PaginaWebUrl).HasColumnName(@"Pagina Web Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(1200);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PaginaWeb).HasColumnName(@"Pagina Web").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Amueblado).HasColumnName(@"Amueblado").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Aires).HasColumnName(@"Aires").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Niveles).HasColumnName(@"Niveles").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Horadevisita).HasColumnName(@"Hora de visita").HasColumnType(@"decimal").IsRequired().ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Baños).HasColumnName(@"Baños").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Habitaciones).HasColumnName(@"Habitaciones").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Diseñodepropiedad).HasColumnName(@"Diseño de propiedad").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Tipodecasa).HasColumnName(@"Tipo de casa").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Proposito).HasColumnName(@"Proposito").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Moneda).HasColumnName(@"Moneda").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(7);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Fechadeenlistamiento).HasColumnName(@"Fecha de enlistamiento").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Fechadeactualizacion).HasColumnName(@"Fecha de actualizacion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PrecioVenta).HasColumnName(@"Precio Venta").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(19, 8);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PrecioRenta).HasColumnName(@"Precio Renta").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(19, 8);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Disponible).HasColumnName(@"Disponible").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.AreadecontruccionM2).HasColumnName(@"Area de contruccion M2").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.AreadeterrenoV2).HasColumnName(@"Area de terreno V2").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.IDEncuentra24).HasColumnName(@"ID Encuentra 24").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Bañodeservicio).HasColumnName(@"Baño de servicio").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Bañodevisita).HasColumnName(@"Baño de visita").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Cuartodeservicio).HasColumnName(@"Cuarto de servicio").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Walkincloset).HasColumnName(@"Walk in closet").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Piscinaprivada).HasColumnName(@"Piscina privada").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Areaclubconpiscina).HasColumnName(@"Area club con piscina").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Aceptamascota).HasColumnName(@"Acepta mascota").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Corretaje).HasColumnName(@"Corretaje").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Plandereferido).HasColumnName(@"Plan de referido").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.LinkYoutubeUrl).HasColumnName(@"Link Youtube Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.LinkYoutube).HasColumnName(@"Link Youtube").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PaginaWebLinkUrl).HasColumnName(@"Pagina Web Link Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.PaginaWebLink).HasColumnName(@"Pagina Web Link").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.FotoUrl).HasColumnName(@"Foto Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Foto).HasColumnName(@"Foto").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.GoogleUrl).HasColumnName(@"Google Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Google).HasColumnName(@"Google").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.OtrosLinkUrl).HasColumnName(@"Otros Link Url").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.OtrosLink).HasColumnName(@"Otros Link").HasColumnType(@"text").ValueGeneratedNever();
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Estilodecocina).HasColumnName(@"Estilo de cocina").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Agente).HasColumnName(@"Agente").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Zona).HasColumnName(@"Zona").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Condominio).HasColumnName(@"Condominio").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Ubicacion).HasColumnName(@"Ubicacion").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Exclusividaddeagente).HasColumnName(@"Exclusividad de agente").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Pais).HasColumnName(@"Pais").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Estado).HasColumnName(@"Estado").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.Ciudad).HasColumnName(@"Ciudad").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwInventoryListItemRealEstate>().Property(x => x.IsActive).HasColumnName(@"isActive").HasColumnType(@"tinyint").ValueGeneratedNever().HasPrecision(1, 0);
        }

        partial void CustomizeVwInventoryListItemRealEstateMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwSalesInventory Mapping

        private void VwSalesInventoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwSalesInventory>().HasNoKey();
            modelBuilder.Entity<VwSalesInventory>().ToView(@"vw_sales_inventory", @"posme");
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.CreatedOn).HasColumnName(@"createdOn").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.CreatedOnDay).HasColumnName(@"createdOnDay").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(3, 0);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Currency).HasColumnName(@"currency").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Tipo).HasColumnName(@"tipo").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Causal).HasColumnName(@"causal").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.TransactionNumber).HasColumnName(@"transactionNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.StatusName).HasColumnName(@"statusName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.CompaniaName).HasColumnName(@"companiaName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.WarehouseName).HasColumnName(@"warehouseName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.CustomerNumber).HasColumnName(@"customerNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.FirstName).HasColumnName(@"firstName").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.ItemNumber).HasColumnName(@"itemNumber").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.CategoryName).HasColumnName(@"categoryName").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.TipoCambio).HasColumnName(@"tipoCambio").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(9, 4);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Quantity).HasColumnName(@"quantity").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.UnitaryCost).HasColumnName(@"unitaryCost").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Cost).HasColumnName(@"cost").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(36, 8);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.UnitaryAmount).HasColumnName(@"unitaryAmount").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(27, 8);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Amount).HasColumnName(@"amount").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(27, 8);
            modelBuilder.Entity<VwSalesInventory>().Property(x => x.Utility).HasColumnName(@"utility").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(37, 8);
        }

        partial void CustomizeVwSalesInventoryMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwSinRiesgoReporteCliente Mapping

        private void VwSinRiesgoReporteClienteMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().HasNoKey();
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().ToView(@"vw_sin_riesgo_reporte_clientes", @"posme");
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.FECHAREPORTE).HasColumnName(@"FECHA REPORTE").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.IDENTIFICACION).HasColumnName(@"IDENTIFICACION").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.TIPODEPERSONA).HasColumnName(@"TIPO DE PERSONA").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.NACIONALIDAD).HasColumnName(@"NACIONALIDAD").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(12);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.SEXO).HasColumnName(@"SEXO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(1);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.FECHADENACIMIENTO).HasColumnName(@"FECHA DE NACIMIENTO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.ESTADOCIVIL).HasColumnName(@"ESTADO CIVIL").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.DIRECCION).HasColumnName(@"DIRECCION").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.DEPARTAMENTO).HasColumnName(@"DEPARTAMENTO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.MUNICIPIO).HasColumnName(@"MUNICIPIO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.DIRECCIONDETRABAJO).HasColumnName(@"DIRECCION DE TRABAJO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.DEPARTAMENTODETRABAJO).HasColumnName(@"DEPARTAMENTO DE TRABAJO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.MUNICIPIODETRABAJO).HasColumnName(@"MUNICIPIO DE TRABAJO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.TELEFONODOMICILIAR).HasColumnName(@"TELEFONO DOMICILIAR").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.TELEFONOTRABAJO).HasColumnName(@"TELEFONO TRABAJO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.CELULAR).HasColumnName(@"CELULAR").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.CORREOELECTRONICO).HasColumnName(@"CORREO ELECTRONICO").HasColumnType(@"char").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.OCUPACION).HasColumnName(@"OCUPACION").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(11);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.ACTIVIDADECONOMICA).HasColumnName(@"ACTIVIDAD ECONOMICA").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(8);
            modelBuilder.Entity<VwSinRiesgoReporteCliente>().Property(x => x.SECTOR).HasColumnName(@"SECTOR").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(7);
        }

        partial void CustomizeVwSinRiesgoReporteClienteMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwSinRiesgoReporteCredito Mapping

        private void VwSinRiesgoReporteCreditoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().HasNoKey();
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().ToView(@"vw_sin_riesgo_reporte_creditos", @"posme");
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.CustomerCreditDocumentID).HasColumnName(@"customerCreditDocumentID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.EntityID).HasColumnName(@"entityID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.TIPODEENTIDAD).HasColumnName(@"TIPO DE ENTIDAD").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.NUMEROCORRELATIVO).HasColumnName(@"NUMERO CORRELATIVO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.FECHADEREPORTE).HasColumnName(@"FECHA DE REPORTE").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.DEPARTAMENTO).HasColumnName(@"DEPARTAMENTO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.NUMERODECEDULAORUC).HasColumnName(@"NUMERO DE CEDULA O RUC").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.NOMBREDEPERSONA).HasColumnName(@"NOMBRE DE PERSONA").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(501);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.TIPODECREDITO).HasColumnName(@"TIPO DE CREDITO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.FECHADEDESEMBOLSO).HasColumnName(@"FECHA DE DESEMBOLSO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.TIPODEOBLIGACION).HasColumnName(@"TIPO DE OBLIGACION").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.MONTOAUTORIZADO).HasColumnName(@"MONTO AUTORIZADO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(11, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.PLAZO).HasColumnName(@"PLAZO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(13, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.FRECUENCIADEPAGO).HasColumnName(@"FRECUENCIA DE PAGO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.SALDODEUDA).HasColumnName(@"SALDO DEUDA").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(11, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.ESTADO).HasColumnName(@"ESTADO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.MONTOVENCIDO).HasColumnName(@"MONTO VENCIDO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(34, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.ANTIGUEDADDEMORA).HasColumnName(@"ANTIGUEDAD DE MORA").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(7, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.TIPODEGARANTIA).HasColumnName(@"TIPO DE GARANTIA").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.FORMADERECUPERACION).HasColumnName(@"FORMA DE RECUPERACION").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.NUMERODECREDITO).HasColumnName(@"NUMERO DE CREDITO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VwSinRiesgoReporteCredito>().Property(x => x.VALORDELACUOTA).HasColumnName(@"VALOR DE LA CUOTA").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(32, 2);
        }

        partial void CustomizeVwSinRiesgoReporteCreditoMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwSinRiesgoReporteCreditosToSystema Mapping

        private void VwSinRiesgoReporteCreditosToSystemaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().HasNoKey();
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().ToView(@"vw_sin_riesgo_reporte_creditos_to_systema", @"posme");
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.CompanyID).HasColumnName(@"companyID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.TIPODEENTIDAD).HasColumnName(@"TIPO_DE_ENTIDAD").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.NUMEROCORRELATIVO).HasColumnName(@"NUMERO_CORRELATIVO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.FECHADEREPORTE).HasColumnName(@"FECHA_DE_REPORTE").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.DEPARTAMENTO).HasColumnName(@"DEPARTAMENTO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.NUMERODECEDULAORUC).HasColumnName(@"NUMERO_DE_CEDULA_O_RUC").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.NOMBREDEPERSONA).HasColumnName(@"NOMBRE_DE_PERSONA").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(501);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.TIPODECREDITO).HasColumnName(@"TIPO_DE_CREDITO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.FECHADEDESEMBOLSO).HasColumnName(@"FECHA_DE_DESEMBOLSO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(10);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.TIPODEOBLIGACION).HasColumnName(@"TIPO_DE_OBLIGACION").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.MONTOAUTORIZADO).HasColumnName(@"MONTO_AUTORIZADO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(11, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.PLAZO).HasColumnName(@"PLAZO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(13, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.FRECUENCIADEPAGO).HasColumnName(@"FRECUENCIA_DE_PAGO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.SALDODEUDA).HasColumnName(@"SALDO_DEUDA").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(11, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.ESTADO).HasColumnName(@"ESTADO").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(3);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.MONTOVENCIDO).HasColumnName(@"MONTO_VENCIDO").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(34, 2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.ANTIGUEDADDEMORA).HasColumnName(@"ANTIGUEDAD_DE_MORA").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(7, 0);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.TIPODEGARANTIA).HasColumnName(@"TIPO_DE_GARANTIA").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.FORMADERECUPERACION).HasColumnName(@"FORMA_DE_RECUPERACION").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(2);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.NUMERODECREDITO).HasColumnName(@"NUMERO_DE_CREDITO").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<VwSinRiesgoReporteCreditosToSystema>().Property(x => x.VALORDELACUOTA).HasColumnName(@"VALOR_DE_LA_CUOTA").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(32, 2);
        }

        partial void CustomizeVwSinRiesgoReporteCreditosToSystemaMapping(ModelBuilder modelBuilder);

        #endregion

        #region VwTransaccionMasterConcept232425 Mapping

        private void VwTransaccionMasterConcept232425Mapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().HasNoKey();
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().ToView(@"vw_transaccion_master_concept_232425", @"posme");
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.TransactionMasterID).HasColumnName(@"transactionMasterID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Descripcion).HasColumnName(@"Descripcion").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Fecha).HasColumnName(@"Fecha").HasColumnType(@"datetime").ValueGeneratedNever();
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Documento).HasColumnName(@"Documento").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Moneda).HasColumnName(@"Moneda").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Concepto).HasColumnName(@"Concepto").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Valor).HasColumnName(@"Valor").HasColumnType(@"decimal").ValueGeneratedNever().HasPrecision(18, 4);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Componente).HasColumnName(@"Componente").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.ComponentItemID).HasColumnName(@"componentItemID").HasColumnType(@"int").ValueGeneratedNever().HasPrecision(11, 0);
            modelBuilder.Entity<VwTransaccionMasterConcept232425>().Property(x => x.Referencia1).HasColumnName(@"Referencia1").HasColumnType(@"varchar").ValueGeneratedNever().HasMaxLength(250);
        }

        partial void CustomizeVwTransaccionMasterConcept232425Mapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}

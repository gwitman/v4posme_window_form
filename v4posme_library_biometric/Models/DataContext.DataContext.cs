//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 4/10/2024 9:28:56 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

#nullable disable

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using MySql.EntityFrameworkCore.Extensions;
using v4posme_library_biometric.Models;

namespace Models
{

    public partial class DataContext : DbContext
    {

        public DataContext() :
            base()
        {
            OnCreated();
        }

        public DataContext(DbContextOptions<DataContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseMySQL(GetConnectionString("BiometricModelConnectionString"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Fingerprint> Fingerprints
        {
            get;
            set;
        }

        public virtual DbSet<TempFingerprint> TempFingerprints
        {
            get;
            set;
        }

        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.FingerprintMapping(modelBuilder);
            this.CustomizeFingerprintMapping(modelBuilder);

            this.TempFingerprintMapping(modelBuilder);
            this.CustomizeTempFingerprintMapping(modelBuilder);

            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Fingerprint Mapping

        private void FingerprintMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Fingerprint>().ToTable(@"fingerprints", @"biometric");
            modelBuilder.Entity<Fingerprint>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd().HasPrecision(20, 0);
            modelBuilder.Entity<Fingerprint>().Property(x => x.FingerName).HasColumnName(@"finger_name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(30).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Fingerprint>().Property(x => x.Image).HasColumnName(@"image").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Fingerprint>().Property(x => x.Fingerprint1).HasColumnName(@"fingerprint").HasColumnType(@"longblob").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Fingerprint>().Property(x => x.Notified).HasColumnName(@"notified").HasColumnType(@"int").ValueGeneratedOnAdd().HasPrecision(11, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Fingerprint>().Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"bigint").IsRequired().ValueGeneratedNever().HasPrecision(20, 0);
            modelBuilder.Entity<Fingerprint>().Property(x => x.CreatedAt).HasColumnName(@"created_at").HasColumnType(@"timestamp").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Fingerprint>().Property(x => x.UpdatedAt).HasColumnName(@"updated_at").HasColumnType(@"timestamp").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<Fingerprint>().HasKey(@"Id");
        }

        partial void CustomizeFingerprintMapping(ModelBuilder modelBuilder);

        #endregion

        #region TempFingerprint Mapping

        private void TempFingerprintMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TempFingerprint>().ToTable(@"temp_fingerprint", @"biometric");
            modelBuilder.Entity<TempFingerprint>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(40);
            modelBuilder.Entity<TempFingerprint>().Property(x => x.Image).HasColumnName(@"image").HasColumnType(@"longblob").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TempFingerprint>().Property(x => x.Fingerprint).HasColumnName(@"fingerprint").HasColumnType(@"longblob").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TempFingerprint>().Property(x => x.UserIdNumber).HasColumnName(@"user_id_number").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(30).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TempFingerprint>().Property(x => x.FingerName).HasColumnName(@"finger_name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(30).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TempFingerprint>().Property(x => x.TokenPc).HasColumnName(@"token_pc").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TempFingerprint>().Property(x => x.Option).HasColumnName(@"option").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(30).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TempFingerprint>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(200).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TempFingerprint>().Property(x => x.Text).HasColumnName(@"text").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TempFingerprint>().Property(x => x.UserId).HasColumnName(@"user_id").HasColumnType(@"bigint").ValueGeneratedOnAdd().HasPrecision(20, 0).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<TempFingerprint>().Property(x => x.CreatedAt).HasColumnName(@"created_at").HasColumnType(@"timestamp").ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TempFingerprint>().Property(x => x.UpdatedAt).HasColumnName(@"updated_at").HasColumnType(@"timestamp").ValueGeneratedOnAdd().HasDefaultValueSql(@"current_timestamp()");
            modelBuilder.Entity<TempFingerprint>().HasKey(@"Id");
        }

        partial void CustomizeTempFingerprintMapping(ModelBuilder modelBuilder);

        #endregion

        #region User Mapping

        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"users", @"biometric");
            modelBuilder.Entity<User>().Property(x => x.Id).HasColumnName(@"id").HasColumnType(@"bigint").IsRequired().ValueGeneratedOnAdd().HasPrecision(20, 0);
            modelBuilder.Entity<User>().Property(x => x.Name).HasColumnName(@"name").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().Property(x => x.Email).HasColumnName(@"email").HasColumnType(@"varchar").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<User>().Property(x => x.EmailVerifiedAt).HasColumnName(@"email_verified_at").HasColumnType(@"timestamp").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<User>().Property(x => x.Password).HasColumnName(@"password").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(255).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<User>().Property(x => x.RememberToken).HasColumnName(@"remember_token").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(100).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<User>().Property(x => x.Image).HasColumnName(@"image").HasColumnType(@"varchar").ValueGeneratedOnAdd().HasMaxLength(200).HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<User>().Property(x => x.CreatedAt).HasColumnName(@"created_at").HasColumnType(@"timestamp").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<User>().Property(x => x.UpdatedAt).HasColumnName(@"updated_at").HasColumnType(@"timestamp").ValueGeneratedOnAdd().HasDefaultValueSql(@"NULL");
            modelBuilder.Entity<User>().HasKey(@"Id");
        }

        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
